[{"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\index.tsx":"1","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\i18n.ts":"2","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\style\\Global.ts":"3","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\lists\\updater.ts":"4","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\application\\updater.ts":"5","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\Providers.tsx":"6","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\App.tsx":"7","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\transactions\\updater.tsx":"8","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\multicall\\updater.tsx":"9","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\lists\\actions.ts":"10","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\application\\actions.ts":"11","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useInterval.ts":"12","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useFetchListCallback.ts":"13","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useIsWindowVisible.ts":"14","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useDebounce.ts":"15","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\LanguageContext.ts":"16","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\TranslationsContext.ts":"17","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useGetDocumentTitlePrice.ts":"18","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\getLibrary.ts":"19","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\application\\hooks.ts":"20","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\transactions\\actions.ts":"21","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useContract.ts":"22","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\multicall\\actions.ts":"23","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\retry.ts":"24","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\chunkArray.ts":"25","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\ToastListener\\index.tsx":"26","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\ThemeContext.tsx":"27","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\constants\\localisation\\languageCodes.ts":"28","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\AddLiquidity\\redirects.tsx":"29","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\RemoveLiquidity\\redirects.tsx":"30","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\Swap\\redirects.tsx":"31","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\index.ts":"32","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\index.ts":"33","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\constants\\index.ts":"34","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\resolveENSContentHash.ts":"35","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useGetPriceData.ts":"36","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\getTokenList.ts":"37","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\AddLiquidity\\index.tsx":"38","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\Swap\\index.tsx":"39","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\RemoveLiquidity\\index.tsx":"40","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\constants\\abis\\erc20.ts":"41","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Popups\\index.tsx":"42","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\PoolFinder\\index.tsx":"43","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Web3ReactManager\\index.tsx":"44","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\Pool\\index.tsx":"45","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Menu\\index.tsx":"46","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\Migration\\index.tsx":"47","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\UseV2ExchangeModal\\index.tsx":"48","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\application\\reducer.ts":"49","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\transactions\\reducer.ts":"50","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\lists\\reducer.ts":"51","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\multicall\\reducer.ts":"52","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\theme.ts":"53","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\global\\actions.ts":"54","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\user\\reducer.ts":"55","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\swap\\reducer.ts":"56","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\mint\\reducer.ts":"57","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\burn\\reducer.ts":"58","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\index.ts":"59","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\constants\\lists.ts":"60","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\connectors\\index.ts":"61","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\constants\\multicall\\index.ts":"62","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useToast.ts":"63","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\burn\\actions.ts":"64","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Menu\\config.ts":"65","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\VersionBar\\index.tsx":"66","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\AddLiquidity\\PoolPriceBar.tsx":"67","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\AppBody.tsx":"68","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\user\\hooks.tsx":"69","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\Migration\\SecondCard.tsx":"70","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\Migration\\FirstCard.tsx":"71","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\Migration\\FAQ.tsx":"72","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\toasts\\index.ts":"73","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\user\\actions.ts":"74","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\mint\\actions.ts":"75","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\swap\\actions.ts":"76","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\connectors\\NetworkConnector.ts":"77","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useAuth.ts":"78","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useGetLocalProfile.ts":"79","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useTheme.ts":"80","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\Tokens.ts":"81","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\Migration\\config.ts":"82","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Container.tsx":"83","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\actions.ts":"84","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\multicall\\hooks.ts":"85","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\lists\\hooks.ts":"86","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useI18n.ts":"87","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\data\\Reserves.ts":"88","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Row\\index.tsx":"89","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Column\\index.tsx":"90","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\wallet\\hooks.ts":"91","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\wrappedCurrency.ts":"92","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\PositionCard\\index.tsx":"93","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\FoldableText\\index.tsx":"94","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Shared\\index.tsx":"95","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\Pool\\styleds.tsx":"96","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\burn\\hooks.ts":"97","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useApproveCallback.ts":"98","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\useDebouncedChangeHandler.ts":"99","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\currencyId.ts":"100","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Popups\\PopupItem.tsx":"101","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\translateTextHelpers.ts":"102","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\styleds.tsx":"103","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\transactions\\hooks.tsx":"104","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\data\\TotalSupply.ts":"105","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Shared\\Common.tsx":"106","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Loader\\index.tsx":"107","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\swap\\hooks.ts":"108","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\prices.ts":"109","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\data\\Allowances.ts":"110","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SearchModal\\CurrencySearchModal.tsx":"111","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Popups\\TransactionPopup.tsx":"112","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Popups\\ListUpdatePopup.tsx":"113","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\CurrencyLogo\\index.tsx":"114","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Slider\\index.tsx":"115","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\NavigationTabs\\index.tsx":"116","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\DoubleLogo\\index.tsx":"117","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Card\\index.tsx":"118","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\PageHeader\\index.tsx":"119","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\QuestionHelper\\index.tsx":"120","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\CardNav\\index.tsx":"121","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\maxAmountSpend.ts":"122","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useWrapCallback.ts":"123","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useParsedQueryString.ts":"124","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\Trades.ts":"125","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useENS.ts":"126","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\CurrencyInputPanel\\index.tsx":"127","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\TransactionConfirmationModal\\index.tsx":"128","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useLast.ts":"129","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\listVersionLabel.ts":"130","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useHttpLocations.ts":"131","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useSwapCallback.ts":"132","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SearchModal\\CurrencySearch.tsx":"133","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SearchModal\\ListSelect.tsx":"134","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\pancake\\CoinLogo.ts":"135","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\AddLiquidity\\ConfirmAddModalBottom.tsx":"136","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\confirmPriceImpactWithoutFee.ts":"137","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\TradePrice.tsx":"138","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\PageHeader\\RecentTransactionsModal.tsx":"139","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\PageHeader\\SettingsModal.tsx":"140","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useENSName.ts":"141","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useENSAddress.ts":"142","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\ConnectWalletButton\\index.tsx":"143","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\V2ExchangeRedirectModal\\index.tsx":"144","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\TransactionConfirmationModal\\TransactionSubmittedContent.tsx":"145","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\TransactionConfirmationModal\\TransactionErrorContent.tsx":"146","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\TransactionConfirmationModal\\ConfirmationPendingContent.tsx":"147","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\TransactionConfirmationModal\\ConfirmationModalContent.tsx":"148","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\TransactionConfirmationModal\\TransactionConfirmationModal.tsx":"149","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useENSContentHash.ts":"150","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\isZero.ts":"151","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\uriToHttp.ts":"152","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\AdvancedSwapDetailsDropdown.tsx":"153","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Modal\\index.tsx":"154","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\ConfirmSwapModal.tsx":"155","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\mint\\hooks.ts":"156","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SearchModal\\styleds.tsx":"157","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Logo\\index.tsx":"158","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\ProgressSteps\\index.tsx":"159","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SafeMoonWarningModal\\index.tsx":"160","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SyrupWarningModal\\index.tsx":"161","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\TokenWarningModal\\index.tsx":"162","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useToggle.ts":"163","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\parseENSAddress.ts":"164","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SearchModal\\sorting.ts":"165","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SearchModal\\filtering.ts":"166","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useOnClickOutside.tsx":"167","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SearchModal\\SortButton.tsx":"168","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SearchModal\\CurrencyList.tsx":"169","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Tooltip\\index.tsx":"170","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SearchModal\\CommonBases.tsx":"171","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\PageHeader\\AudioSetting.tsx":"172","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\PageHeader\\TransactionDeadlineSetting.tsx":"173","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\PageHeader\\SlippageToleranceSetting.tsx":"174","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\TransactionConfirmationModal\\helpers.tsx":"175","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\NumericalInput\\index.tsx":"176","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\contenthashToUri.ts":"177","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\AddressInputPanel\\index.tsx":"178","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Pane\\index.tsx":"179","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\AdvancedSwapDetails.tsx":"180","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\SwapModalFooter.tsx":"181","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\SwapModalHeader.tsx":"182","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\ListLogo\\index.tsx":"183","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\SwapRoute.tsx":"184","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\FormattedPriceImpact.tsx":"185","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Popover\\index.tsx":"186"},{"size":1126,"mtime":1622978628539,"results":"187","hashOfConfig":"188"},{"size":532,"mtime":1622978628538,"results":"189","hashOfConfig":"188"},{"size":496,"mtime":1622978628570,"results":"190","hashOfConfig":"188"},{"size":3712,"mtime":1622978628556,"results":"191","hashOfConfig":"188"},{"size":1952,"mtime":1622978628551,"results":"192","hashOfConfig":"188"},{"size":885,"mtime":1622978628483,"results":"193","hashOfConfig":"188"},{"size":5899,"mtime":1623010009265,"results":"194","hashOfConfig":"188"},{"size":3134,"mtime":1622978628567,"results":"195","hashOfConfig":"188"},{"size":7843,"mtime":1622978628561,"results":"196","hashOfConfig":"188"},{"size":1000,"mtime":1622978628554,"results":"197","hashOfConfig":"188"},{"size":871,"mtime":1622978628550,"results":"198","hashOfConfig":"188"},{"size":669,"mtime":1622978628535,"results":"199","hashOfConfig":"188"},{"size":1942,"mtime":1623426072708,"results":"200","hashOfConfig":"188"},{"size":814,"mtime":1622978628535,"results":"201","hashOfConfig":"188"},{"size":733,"mtime":1622978628531,"results":"202","hashOfConfig":"188"},{"size":747,"mtime":1622978628528,"results":"203","hashOfConfig":"188"},{"size":435,"mtime":1622978628529,"results":"204","hashOfConfig":"188"},{"size":688,"mtime":1622978628533,"results":"205","hashOfConfig":"188"},{"size":228,"mtime":1622978628609,"results":"206","hashOfConfig":"188"},{"size":1932,"mtime":1622978628550,"results":"207","hashOfConfig":"188"},{"size":960,"mtime":1623426072706,"results":"208","hashOfConfig":"188"},{"size":2788,"mtime":1623434500658,"results":"209","hashOfConfig":"188"},{"size":1739,"mtime":1622978628559,"results":"210","hashOfConfig":"188"},{"size":1929,"mtime":1622978628614,"results":"211","hashOfConfig":"188"},{"size":534,"mtime":1622978628607,"results":"212","hashOfConfig":"188"},{"size":518,"mtime":1622978628508,"results":"213","hashOfConfig":"188"},{"size":1062,"mtime":1622978628484,"results":"214","hashOfConfig":"188"},{"size":1943,"mtime":1622978628524,"results":"215","hashOfConfig":"188"},{"size":954,"mtime":1622978628541,"results":"216","hashOfConfig":"188"},{"size":581,"mtime":1622978628547,"results":"217","hashOfConfig":"188"},{"size":331,"mtime":1622978628548,"results":"218","hashOfConfig":"188"},{"size":1377,"mtime":1623101917563,"results":"219","hashOfConfig":"188"},{"size":3204,"mtime":1623426072708,"results":"220","hashOfConfig":"188"},{"size":3768,"mtime":1623434500658,"results":"221","hashOfConfig":"188"},{"size":1761,"mtime":1622978628613,"results":"222","hashOfConfig":"188"},{"size":769,"mtime":1622978628534,"results":"223","hashOfConfig":"188"},{"size":2807,"mtime":1622978628609,"results":"224","hashOfConfig":"188"},{"size":17676,"mtime":1623426072707,"results":"225","hashOfConfig":"188"},{"size":23439,"mtime":1623426072707,"results":"226","hashOfConfig":"188"},{"size":27743,"mtime":1623426072707,"results":"227","hashOfConfig":"188"},{"size":267,"mtime":1622978628522,"results":"228","hashOfConfig":"188"},{"size":1853,"mtime":1622978628498,"results":"229","hashOfConfig":"188"},{"size":7062,"mtime":1623426072707,"results":"230","hashOfConfig":"188"},{"size":2377,"mtime":1622978628514,"results":"231","hashOfConfig":"188"},{"size":5361,"mtime":1623426072707,"results":"232","hashOfConfig":"188"},{"size":1367,"mtime":1622978628491,"results":"233","hashOfConfig":"188"},{"size":2690,"mtime":1622978628544,"results":"234","hashOfConfig":"188"},{"size":2756,"mtime":1623019719026,"results":"235","hashOfConfig":"188"},{"size":1774,"mtime":1622978628551,"results":"236","hashOfConfig":"188"},{"size":1965,"mtime":1622978628565,"results":"237","hashOfConfig":"188"},{"size":5491,"mtime":1622978628556,"results":"238","hashOfConfig":"188"},{"size":4051,"mtime":1622978628560,"results":"239","hashOfConfig":"188"},{"size":479,"mtime":1622978628614,"results":"240","hashOfConfig":"188"},{"size":294,"mtime":1622978628553,"results":"241","hashOfConfig":"188"},{"size":4931,"mtime":1622978628569,"results":"242","hashOfConfig":"188"},{"size":2541,"mtime":1622978628563,"results":"243","hashOfConfig":"188"},{"size":1319,"mtime":1622978628558,"results":"244","hashOfConfig":"188"},{"size":547,"mtime":1622978628552,"results":"245","hashOfConfig":"188"},{"size":3864,"mtime":1623426072704,"results":"246","hashOfConfig":"188"},{"size":128,"mtime":1622993435587,"results":"247","hashOfConfig":"188"},{"size":1975,"mtime":1622978628519,"results":"248","hashOfConfig":"188"},{"size":342,"mtime":1623434541891,"results":"249","hashOfConfig":"188"},{"size":1314,"mtime":1622978628537,"results":"250","hashOfConfig":"188"},{"size":307,"mtime":1622978628552,"results":"251","hashOfConfig":"188"},{"size":3059,"mtime":1622978628491,"results":"252","hashOfConfig":"188"},{"size":1265,"mtime":1622978628514,"results":"253","hashOfConfig":"188"},{"size":1713,"mtime":1623426072707,"results":"254","hashOfConfig":"188"},{"size":464,"mtime":1622978628542,"results":"255","hashOfConfig":"188"},{"size":8538,"mtime":1623426072707,"results":"256","hashOfConfig":"188"},{"size":3974,"mtime":1623426072708,"results":"257","hashOfConfig":"188"},{"size":4143,"mtime":1622978628543,"results":"258","hashOfConfig":"188"},{"size":1648,"mtime":1622978628542,"results":"259","hashOfConfig":"188"},{"size":1197,"mtime":1622978628564,"results":"260","hashOfConfig":"188"},{"size":1459,"mtime":1622978628567,"results":"261","hashOfConfig":"188"},{"size":330,"mtime":1622978628556,"results":"262","hashOfConfig":"188"},{"size":688,"mtime":1622978628561,"results":"263","hashOfConfig":"188"},{"size":5835,"mtime":1622978628519,"results":"264","hashOfConfig":"188"},{"size":2127,"mtime":1622978628530,"results":"265","hashOfConfig":"188"},{"size":1070,"mtime":1622978628533,"results":"266","hashOfConfig":"188"},{"size":365,"mtime":1622978628537,"results":"267","hashOfConfig":"188"},{"size":4108,"mtime":1623426072708,"results":"268","hashOfConfig":"188"},{"size":3136,"mtime":1622978628544,"results":"269","hashOfConfig":"188"},{"size":884,"mtime":1622978628487,"results":"270","hashOfConfig":"188"},{"size":46,"mtime":1622978628549,"results":"271","hashOfConfig":"188"},{"size":8126,"mtime":1622978628559,"results":"272","hashOfConfig":"188"},{"size":3751,"mtime":1623434500658,"results":"273","hashOfConfig":"188"},{"size":873,"mtime":1622978628534,"results":"274","hashOfConfig":"188"},{"size":2133,"mtime":1623426072707,"results":"275","hashOfConfig":"188"},{"size":1037,"mtime":1622978628500,"results":"276","hashOfConfig":"188"},{"size":670,"mtime":1622978628486,"results":"277","hashOfConfig":"188"},{"size":4830,"mtime":1623426072706,"results":"278","hashOfConfig":"188"},{"size":864,"mtime":1623426072705,"results":"279","hashOfConfig":"188"},{"size":8544,"mtime":1623426072706,"results":"280","hashOfConfig":"188"},{"size":1658,"mtime":1622978628489,"results":"281","hashOfConfig":"188"},{"size":26,"mtime":1622978628506,"results":"282","hashOfConfig":"188"},{"size":625,"mtime":1622978628545,"results":"283","hashOfConfig":"188"},{"size":5436,"mtime":1623426072707,"results":"284","hashOfConfig":"188"},{"size":4086,"mtime":1623426072708,"results":"285","hashOfConfig":"188"},{"size":1183,"mtime":1622978628615,"results":"286","hashOfConfig":"188"},{"size":286,"mtime":1623426072704,"results":"287","hashOfConfig":"188"},{"size":2622,"mtime":1622978628497,"results":"288","hashOfConfig":"188"},{"size":1446,"mtime":1622978628614,"results":"289","hashOfConfig":"188"},{"size":3371,"mtime":1622978628518,"results":"290","hashOfConfig":"188"},{"size":2878,"mtime":1622978628564,"results":"291","hashOfConfig":"188"},{"size":718,"mtime":1623426072704,"results":"292","hashOfConfig":"188"},{"size":2393,"mtime":1622978628506,"results":"293","hashOfConfig":"188"},{"size":1132,"mtime":1622978628490,"results":"294","hashOfConfig":"188"},{"size":9989,"mtime":1623426072706,"results":"295","hashOfConfig":"188"},{"size":3279,"mtime":1623426072706,"results":"296","hashOfConfig":"188"},{"size":713,"mtime":1623426072707,"results":"297","hashOfConfig":"188"},{"size":2436,"mtime":1623426072706,"results":"298","hashOfConfig":"188"},{"size":1269,"mtime":1622978628497,"results":"299","hashOfConfig":"188"},{"size":3649,"mtime":1622978628497,"results":"300","hashOfConfig":"188"},{"size":1937,"mtime":1623433433870,"results":"301","hashOfConfig":"188"},{"size":3335,"mtime":1622978628507,"results":"302","hashOfConfig":"188"},{"size":2198,"mtime":1622978628492,"results":"303","hashOfConfig":"188"},{"size":1145,"mtime":1623426072708,"results":"304","hashOfConfig":"188"},{"size":585,"mtime":1622978628485,"results":"305","hashOfConfig":"188"},{"size":1824,"mtime":1622978628495,"results":"306","hashOfConfig":"188"},{"size":1113,"mtime":1622978628499,"results":"307","hashOfConfig":"188"},{"size":1093,"mtime":1622978628485,"results":"308","hashOfConfig":"188"},{"size":664,"mtime":1623426072706,"results":"309","hashOfConfig":"188"},{"size":3208,"mtime":1623426072708,"results":"310","hashOfConfig":"188"},{"size":370,"mtime":1622978628536,"results":"311","hashOfConfig":"188"},{"size":4483,"mtime":1623426072708,"results":"312","hashOfConfig":"188"},{"size":786,"mtime":1622978628531,"results":"313","hashOfConfig":"188"},{"size":6488,"mtime":1623426072705,"results":"314","hashOfConfig":"188"},{"size":460,"mtime":1622978628512,"results":"315","hashOfConfig":"188"},{"size":1057,"mtime":1622978628535,"results":"316","hashOfConfig":"188"},{"size":187,"mtime":1622978628611,"results":"317","hashOfConfig":"188"},{"size":734,"mtime":1622978628534,"results":"318","hashOfConfig":"188"},{"size":8991,"mtime":1623426072708,"results":"319","hashOfConfig":"188"},{"size":7911,"mtime":1623426072705,"results":"320","hashOfConfig":"188"},{"size":11131,"mtime":1622978628503,"results":"321","hashOfConfig":"188"},{"size":217,"mtime":1622978628515,"results":"322","hashOfConfig":"188"},{"size":2336,"mtime":1623426072708,"results":"323","hashOfConfig":"188"},{"size":1015,"mtime":1623426072705,"results":"324","hashOfConfig":"188"},{"size":1193,"mtime":1623426072705,"results":"325","hashOfConfig":"188"},{"size":3162,"mtime":1622978628493,"results":"326","hashOfConfig":"188"},{"size":902,"mtime":1622978628494,"results":"327","hashOfConfig":"188"},{"size":1633,"mtime":1622978628532,"results":"328","hashOfConfig":"188"},{"size":1429,"mtime":1622978628531,"results":"329","hashOfConfig":"188"},{"size":554,"mtime":1622978628486,"results":"330","hashOfConfig":"188"},{"size":2593,"mtime":1623010186960,"results":"331","hashOfConfig":"188"},{"size":1354,"mtime":1623426072705,"results":"332","hashOfConfig":"188"},{"size":1192,"mtime":1622978628511,"results":"333","hashOfConfig":"188"},{"size":1288,"mtime":1622978628510,"results":"334","hashOfConfig":"188"},{"size":679,"mtime":1622978628509,"results":"335","hashOfConfig":"188"},{"size":1121,"mtime":1622978628510,"results":"336","hashOfConfig":"188"},{"size":1277,"mtime":1622978628532,"results":"337","hashOfConfig":"188"},{"size":192,"mtime":1622978628610,"results":"338","hashOfConfig":"188"},{"size":796,"mtime":1622978628615,"results":"339","hashOfConfig":"188"},{"size":989,"mtime":1622978628515,"results":"340","hashOfConfig":"188"},{"size":3292,"mtime":1622978628492,"results":"341","hashOfConfig":"188"},{"size":3325,"mtime":1623426072705,"results":"342","hashOfConfig":"188"},{"size":7321,"mtime":1623426072707,"results":"343","hashOfConfig":"188"},{"size":1775,"mtime":1622978628505,"results":"344","hashOfConfig":"188"},{"size":817,"mtime":1622978628490,"results":"345","hashOfConfig":"188"},{"size":2530,"mtime":1622978628499,"results":"346","hashOfConfig":"188"},{"size":2706,"mtime":1622978628501,"results":"347","hashOfConfig":"188"},{"size":2814,"mtime":1622978628507,"results":"348","hashOfConfig":"188"},{"size":5529,"mtime":1623426072705,"results":"349","hashOfConfig":"188"},{"size":279,"mtime":1622978628538,"results":"350","hashOfConfig":"188"},{"size":369,"mtime":1622978628612,"results":"351","hashOfConfig":"188"},{"size":1729,"mtime":1623426072706,"results":"352","hashOfConfig":"188"},{"size":1008,"mtime":1623426072706,"results":"353","hashOfConfig":"188"},{"size":769,"mtime":1622978628536,"results":"354","hashOfConfig":"188"},{"size":752,"mtime":1622978628504,"results":"355","hashOfConfig":"188"},{"size":6464,"mtime":1623426072705,"results":"356","hashOfConfig":"188"},{"size":933,"mtime":1622978628509,"results":"357","hashOfConfig":"188"},{"size":2407,"mtime":1623426072705,"results":"358","hashOfConfig":"188"},{"size":818,"mtime":1622978628493,"results":"359","hashOfConfig":"188"},{"size":2108,"mtime":1622978628495,"results":"360","hashOfConfig":"188"},{"size":3909,"mtime":1622978628494,"results":"361","hashOfConfig":"188"},{"size":1200,"mtime":1622978628511,"results":"362","hashOfConfig":"188"},{"size":2218,"mtime":1622978628493,"results":"363","hashOfConfig":"188"},{"size":1461,"mtime":1622978628608,"results":"364","hashOfConfig":"188"},{"size":3928,"mtime":1622978628484,"results":"365","hashOfConfig":"188"},{"size":201,"mtime":1622978628496,"results":"366","hashOfConfig":"188"},{"size":4206,"mtime":1623426072705,"results":"367","hashOfConfig":"188"},{"size":4721,"mtime":1623426072705,"results":"368","hashOfConfig":"188"},{"size":4883,"mtime":1623426072705,"results":"369","hashOfConfig":"188"},{"size":600,"mtime":1622978628489,"results":"370","hashOfConfig":"188"},{"size":1306,"mtime":1623426072705,"results":"371","hashOfConfig":"188"},{"size":588,"mtime":1623426072705,"results":"372","hashOfConfig":"188"},{"size":3220,"mtime":1622978628496,"results":"373","hashOfConfig":"188"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},"1q8o85n",{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"399","messages":"400","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"376"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"416","messages":"417","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"376"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"441","messages":"442","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443","usedDeprecatedRules":"376"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"446","messages":"447","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"376"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"451","messages":"452","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"376"},{"filePath":"454","messages":"455","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"376"},{"filePath":"457","messages":"458","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"376"},{"filePath":"460","messages":"461","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"376"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"467","messages":"468","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"376"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"472","messages":"473","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474","usedDeprecatedRules":"376"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"501","messages":"502","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"503","usedDeprecatedRules":"376"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"518","messages":"519","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"520","usedDeprecatedRules":"376"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"523","messages":"524","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525","usedDeprecatedRules":"376"},{"filePath":"526","messages":"527","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"376"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"549","messages":"550","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551","usedDeprecatedRules":"376"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"564","messages":"565","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"566","usedDeprecatedRules":"376"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"571","messages":"572","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"376"},{"filePath":"574","messages":"575","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"376"},{"filePath":"577","messages":"578","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"579","usedDeprecatedRules":"376"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"586","messages":"587","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"376"},{"filePath":"589","messages":"590","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"591","usedDeprecatedRules":"376"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"594","messages":"595","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596","usedDeprecatedRules":"376"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"605","messages":"606","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"607","usedDeprecatedRules":"376"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"612","messages":"613","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"614","usedDeprecatedRules":"376"},{"filePath":"615","messages":"616","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"617","usedDeprecatedRules":"376"},{"filePath":"618","messages":"619","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"620","usedDeprecatedRules":"376"},{"filePath":"621","messages":"622","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"623","usedDeprecatedRules":"376"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"634","messages":"635","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"636","usedDeprecatedRules":"376"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"645","messages":"646","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"647","usedDeprecatedRules":"376"},{"filePath":"648","messages":"649","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"650","usedDeprecatedRules":"376"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"653","messages":"654","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"655","usedDeprecatedRules":"376"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"658","messages":"659","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"660","usedDeprecatedRules":"376"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"667","messages":"668","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"669","messages":"670","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"671","usedDeprecatedRules":"376"},{"filePath":"672","messages":"673","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"674","usedDeprecatedRules":"376"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"677","messages":"678","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"679","messages":"680","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"681","usedDeprecatedRules":"376"},{"filePath":"682","messages":"683","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"684","usedDeprecatedRules":"376"},{"filePath":"685","messages":"686","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"687","usedDeprecatedRules":"376"},{"filePath":"688","messages":"689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"692","messages":"693","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"694","usedDeprecatedRules":"376"},{"filePath":"695","messages":"696","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"697","usedDeprecatedRules":"376"},{"filePath":"698","messages":"699","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"700","messages":"701","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"702","messages":"703","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"704","usedDeprecatedRules":"376"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"709","messages":"710","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"711","messages":"712","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"713","messages":"714","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"715","usedDeprecatedRules":"376"},{"filePath":"716","messages":"717","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"718","messages":"719","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"720","messages":"721","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"722","messages":"723","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"724","messages":"725","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"726","usedDeprecatedRules":"376"},{"filePath":"727","messages":"728","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"729","usedDeprecatedRules":"376"},{"filePath":"730","messages":"731","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"732","messages":"733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"736","messages":"737","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"738","messages":"739","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"740","messages":"741","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"742","usedDeprecatedRules":"376"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"745","messages":"746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"747","messages":"748","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"749","usedDeprecatedRules":"376"},{"filePath":"750","messages":"751","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"752","usedDeprecatedRules":"376"},{"filePath":"753","messages":"754","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"755","messages":"756","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"757","messages":"758","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"759","usedDeprecatedRules":"376"},{"filePath":"760","messages":"761","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"762","messages":"763","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"764","usedDeprecatedRules":"376"},{"filePath":"765","messages":"766","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"767","messages":"768","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"769","messages":"770","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"771","messages":"772","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"773","messages":"774","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"775","messages":"776","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"777","usedDeprecatedRules":"376"},{"filePath":"778","messages":"779","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"780","messages":"781","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"782"},{"filePath":"783","messages":"784","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"785","usedDeprecatedRules":"376"},{"filePath":"786","messages":"787","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"788","usedDeprecatedRules":"376"},{"filePath":"789","messages":"790","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"791","usedDeprecatedRules":"376"},{"filePath":"792","messages":"793","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"794","messages":"795","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"796","usedDeprecatedRules":"376"},{"filePath":"797","messages":"798","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"799","usedDeprecatedRules":"376"},{"filePath":"800","messages":"801","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"802","usedDeprecatedRules":"376"},"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\index.tsx",[],["803","804","805","806","807"],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\i18n.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\style\\Global.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\lists\\updater.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\application\\updater.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\Providers.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\App.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\transactions\\updater.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\multicall\\updater.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\lists\\actions.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\application\\actions.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useInterval.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useFetchListCallback.ts",["808"],"import { nanoid } from '@reduxjs/toolkit'\r\nimport { ChainId } from '@appleswap/sdk'\r\nimport { TokenList } from '@uniswap/token-lists'\r\nimport { useCallback } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { getNetworkLibrary, NETWORK_CHAIN_ID } from '../connectors'\r\nimport { AppDispatch } from '../state'\r\nimport { fetchTokenList } from '../state/lists/actions'\r\nimport getTokenList from '../utils/getTokenList'\r\nimport resolveENSContentHash from '../utils/resolveENSContentHash'\r\nimport { useActiveWeb3React } from './index'\r\n\r\nexport function useFetchListCallback(): (listUrl: string) => Promise<TokenList> {\r\n  const { chainId, library } = useActiveWeb3React()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const ensResolver = useCallback(\r\n    (ensName: string) => {\r\n      if (!library || chainId !== ChainId.MAINNET) {\r\n        if (NETWORK_CHAIN_ID === ChainId.MAINNET) {\r\n          const networkLibrary = getNetworkLibrary()\r\n          if (networkLibrary) {\r\n            return resolveENSContentHash(ensName, networkLibrary)\r\n          }\r\n        }\r\n        throw new Error('Could not construct mainnet ENS resolver')\r\n      }\r\n      return resolveENSContentHash(ensName, library)\r\n    },\r\n    [chainId, library]\r\n  )\r\n\r\n  return useCallback(\r\n    async (listUrl: string) => {\r\n      const requestId = nanoid()\r\n      dispatch(fetchTokenList.pending({ requestId, url: listUrl }))\r\n      return getTokenList(listUrl, ensResolver)\r\n        .then((tokenList) => {\r\n          dispatch(fetchTokenList.fulfilled({ url: listUrl, tokenList, requestId }))\r\n          return tokenList\r\n        })\r\n        .catch((error) => {\r\n          console.error(`Failed to get list at url ${listUrl}`, error)\r\n          dispatch(fetchTokenList.rejected({ url: listUrl, requestId, errorMessage: error.message }))\r\n          throw error\r\n        })\r\n    },\r\n    [dispatch, ensResolver]\r\n  )\r\n}\r\n\r\nexport default useFetchListCallback\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useIsWindowVisible.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useDebounce.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\LanguageContext.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\TranslationsContext.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useGetDocumentTitlePrice.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\getLibrary.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\application\\hooks.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\transactions\\actions.ts",["809"],"import { createAction } from '@reduxjs/toolkit'\r\nimport { ChainId } from '@appleswap/sdk'\r\n\r\nexport interface SerializableTransactionReceipt {\r\n  to: string\r\n  from: string\r\n  contractAddress: string\r\n  transactionIndex: number\r\n  blockHash: string\r\n  transactionHash: string\r\n  blockNumber: number\r\n  status?: number\r\n}\r\n\r\nexport const addTransaction = createAction<{\r\n  chainId: ChainId\r\n  hash: string\r\n  from: string\r\n  approval?: { tokenAddress: string; spender: string }\r\n  summary?: string\r\n}>('transactions/addTransaction')\r\nexport const clearAllTransactions = createAction<{ chainId: ChainId }>('transactions/clearAllTransactions')\r\nexport const finalizeTransaction = createAction<{\r\n  chainId: ChainId\r\n  hash: string\r\n  receipt: SerializableTransactionReceipt\r\n}>('transactions/finalizeTransaction')\r\nexport const checkedTransaction = createAction<{\r\n  chainId: ChainId\r\n  hash: string\r\n  blockNumber: number\r\n}>('transactions/checkedTransaction')\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useContract.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\multicall\\actions.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\retry.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\chunkArray.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\ToastListener\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\ThemeContext.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\constants\\localisation\\languageCodes.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\AddLiquidity\\redirects.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\RemoveLiquidity\\redirects.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\Swap\\redirects.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\index.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\index.ts",["810"],"import { Web3Provider } from '@ethersproject/providers'\r\nimport { ChainId } from '@appleswap/sdk'\r\nimport { connectorLocalStorageKey } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\r\nimport { useEffect, useState } from 'react'\r\nimport { isMobile } from 'react-device-detect'\r\nimport { injected } from '../connectors'\r\nimport { NetworkContextName } from '../constants'\r\n\r\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\r\n  const context = useWeb3ReactCore<Web3Provider>()\r\n  const contextNetwork = useWeb3ReactCore<Web3Provider>(NetworkContextName)\r\n  return context.active ? context : contextNetwork\r\n}\r\n\r\nexport function useEagerConnect() {\r\n  const { activate, active } = useWeb3ReactCore() // specifically using useWeb3ReactCore because of what this hook does\r\n  const [tried, setTried] = useState(false)\r\n\r\n  useEffect(() => {\r\n    injected.isAuthorized().then((isAuthorized) => {\r\n      const hasSignedIn = window.localStorage.getItem(connectorLocalStorageKey)\r\n      if (isAuthorized && hasSignedIn) {\r\n        activate(injected, undefined, true).catch(() => {\r\n          setTried(true)\r\n        })\r\n      } else if (isMobile && window.ethereum && hasSignedIn) {\r\n        activate(injected, undefined, true).catch(() => {\r\n          setTried(true)\r\n        })\r\n      } else {\r\n        setTried(true)\r\n      }\r\n    })\r\n  }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\r\n\r\n  // if the connection worked, wait until we get confirmation of that to flip the flag\r\n  useEffect(() => {\r\n    if (active) {\r\n      setTried(true)\r\n    }\r\n  }, [active])\r\n\r\n  return tried\r\n}\r\n\r\n/**\r\n * Use for network and injected - logs user in\r\n * and out after checking what network theyre on\r\n */\r\nexport function useInactiveListener(suppress = false) {\r\n  const { active, error, activate } = useWeb3ReactCore() // specifically using useWeb3React because of what this hook does\r\n\r\n  useEffect(() => {\r\n    const { ethereum } = window\r\n\r\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\r\n      const handleChainChanged = () => {\r\n        // eat errors\r\n        activate(injected, undefined, true).catch((e) => {\r\n          console.error('Failed to activate after chain changed', e)\r\n        })\r\n      }\r\n\r\n      const handleAccountsChanged = (accounts: string[]) => {\r\n        if (accounts.length > 0) {\r\n          // eat errors\r\n          activate(injected, undefined, true).catch((e) => {\r\n            console.error('Failed to activate after accounts changed', e)\r\n          })\r\n        }\r\n      }\r\n\r\n      ethereum.on('chainChanged', handleChainChanged)\r\n      ethereum.on('accountsChanged', handleAccountsChanged)\r\n\r\n      return () => {\r\n        if (ethereum.removeListener) {\r\n          ethereum.removeListener('chainChanged', handleChainChanged)\r\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\r\n        }\r\n      }\r\n    }\r\n    return undefined\r\n  }, [active, error, suppress, activate])\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\constants\\index.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\resolveENSContentHash.ts",["811"],"import { Contract } from '@ethersproject/contracts'\r\nimport { Provider } from '@ethersproject/abstract-provider'\r\nimport { namehash } from 'ethers/lib/utils'\r\n\r\nconst REGISTRAR_ABI = [\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: 'node',\r\n        type: 'bytes32'\r\n      }\r\n    ],\r\n    name: 'resolver',\r\n    outputs: [\r\n      {\r\n        name: 'resolverAddress',\r\n        type: 'address'\r\n      }\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function'\r\n  }\r\n]\r\nconst REGISTRAR_ADDRESS = '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\r\n\r\nconst RESOLVER_ABI = [\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'node',\r\n        type: 'bytes32'\r\n      }\r\n    ],\r\n    name: 'contenthash',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes',\r\n        name: '',\r\n        type: 'bytes'\r\n      }\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function'\r\n  }\r\n]\r\n\r\n// cache the resolver contracts since most of them are the public resolver\r\nfunction resolverContract(resolverAddress: string, provider: Provider): Contract {\r\n  return new Contract(resolverAddress, RESOLVER_ABI, provider)\r\n}\r\n\r\n/**\r\n * Fetches and decodes the result of an ENS contenthash lookup on mainnet to a URI\r\n * @param ensName to resolve\r\n * @param provider provider to use to fetch the data\r\n */\r\nexport default async function resolveENSContentHash(ensName: string, provider: Provider): Promise<string> {\r\n  const ensRegistrarContract = new Contract(REGISTRAR_ADDRESS, REGISTRAR_ABI, provider)\r\n  const hash = namehash(ensName)\r\n  const resolverAddress = await ensRegistrarContract.resolver(hash)\r\n  return resolverContract(resolverAddress, provider).contenthash(hash)\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useGetPriceData.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\getTokenList.ts",["812"],"import { TokenList } from '@uniswap/token-lists'\r\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\r\nimport Ajv from 'ajv'\r\nimport contenthashToUri from './contenthashToUri'\r\nimport { parseENSAddress } from './parseENSAddress'\r\nimport uriToHttp from './uriToHttp'\r\n\r\n// bakeryswap defaultTokenJson\r\nimport { DEFAULT_TOKEN_LIST_URL } from '../constants/lists'\r\nimport defaultTokenJson from '../constants/token/pancakeswap.json'\r\n\r\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema)\r\n\r\n/**\r\n * Contains the logic for resolving a list URL to a validated token list\r\n * @param listUrl list url\r\n * @param resolveENSContentHash resolves an ens name to a contenthash\r\n */\r\nexport default async function getTokenList(\r\n  listUrl: string,\r\n  resolveENSContentHash: (ensName: string) => Promise<string>\r\n): Promise<TokenList> {\r\n  if (listUrl === DEFAULT_TOKEN_LIST_URL) {\r\n    return defaultTokenJson\r\n  }\r\n  const parsedENS = parseENSAddress(listUrl)\r\n\r\n  let urls: string[]\r\n  if (parsedENS) {\r\n    let contentHashUri\r\n    try {\r\n      contentHashUri = await resolveENSContentHash(parsedENS.ensName)\r\n    } catch (error) {\r\n      console.error(`Failed to resolve ENS name: ${parsedENS.ensName}`, error)\r\n      throw new Error(`Failed to resolve ENS name: ${parsedENS.ensName}`)\r\n    }\r\n    let translatedUri\r\n    try {\r\n      translatedUri = contenthashToUri(contentHashUri)\r\n    } catch (error) {\r\n      console.error('Failed to translate contenthash to URI', contentHashUri)\r\n      throw new Error(`Failed to translate contenthash to URI: ${contentHashUri}`)\r\n    }\r\n    urls = uriToHttp(`${translatedUri}${parsedENS.ensPath ?? ''}`)\r\n  } else {\r\n    urls = uriToHttp(listUrl)\r\n  }\r\n  for (let i = 0; i < urls.length; i++) {\r\n    const url = urls[i]\r\n    const isLast = i === urls.length - 1\r\n    let response\r\n    try {\r\n      response = await fetch(url)\r\n    } catch (error) {\r\n      console.error('Failed to fetch list', listUrl, error)\r\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n      // eslint-disable-next-line no-continue\r\n      continue\r\n    }\r\n\r\n    if (!response.ok) {\r\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n      // eslint-disable-next-line no-continue\r\n      continue\r\n    }\r\n\r\n    const json = await response.json()\r\n    if (!tokenListValidator(json)) {\r\n      const validationErrors: string =\r\n        tokenListValidator.errors?.reduce<string>((memo, error) => {\r\n          const add = `${error.dataPath} ${error.message ?? ''}`\r\n          return memo.length > 0 ? `${memo}; ${add}` : `${add}`\r\n        }, '') ?? 'unknown error'\r\n      throw new Error(`Token list failed validation: ${validationErrors}`)\r\n    }\r\n    return json\r\n  }\r\n  throw new Error('Unrecognized list URL protocol.')\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\AddLiquidity\\index.tsx",["813"],"import React, { useCallback, useState } from 'react'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { TransactionResponse } from '@ethersproject/providers'\r\nimport { Currency, currencyEquals, ETHER, TokenAmount, WETH } from '@appleswap/sdk'\r\nimport { Button, CardBody, AddIcon, Text as UIKitText } from '@pancakeswap-libs/uikit'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport { LightCard } from 'components/Card'\r\nimport { AutoColumn, ColumnCenter } from 'components/Column'\r\nimport TransactionConfirmationModal, { ConfirmationModalContent } from 'components/TransactionConfirmationModal'\r\nimport CardNav from 'components/CardNav'\r\nimport CurrencyInputPanel from 'components/CurrencyInputPanel'\r\nimport DoubleCurrencyLogo from 'components/DoubleLogo'\r\nimport { AddRemoveTabs } from 'components/NavigationTabs'\r\nimport { MinimalPositionCard } from 'components/PositionCard'\r\nimport Row, { RowBetween, RowFlat } from 'components/Row'\r\n\r\nimport { PairState } from 'data/Reserves'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { useCurrency } from 'hooks/Tokens'\r\nimport { ApprovalState, useApproveCallback } from 'hooks/useApproveCallback'\r\nimport { Field } from 'state/mint/actions'\r\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from 'state/mint/hooks'\r\n\r\nimport { useTransactionAdder } from 'state/transactions/hooks'\r\nimport { useIsExpertMode, useUserDeadline, useUserSlippageTolerance } from 'state/user/hooks'\r\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from 'utils'\r\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\r\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\r\nimport { currencyId } from 'utils/currencyId'\r\nimport Pane from 'components/Pane'\r\nimport Container from 'components/Container'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport useI18n from 'hooks/useI18n'\r\nimport AppBody from '../AppBody'\r\nimport { Dots, Wrapper } from '../Pool/styleds'\r\nimport { ConfirmAddModalBottom } from './ConfirmAddModalBottom'\r\nimport { PoolPriceBar } from './PoolPriceBar'\r\nimport { ROUTER_ADDRESS } from '../../constants'\r\n\r\nexport default function AddLiquidity({\r\n  match: {\r\n    params: { currencyIdA, currencyIdB },\r\n  },\r\n  history,\r\n}: RouteComponentProps<{ currencyIdA?: string; currencyIdB?: string }>) {\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n  const currencyA = useCurrency(currencyIdA)\r\n  const currencyB = useCurrency(currencyIdB)\r\n  const TranslateString = useI18n()\r\n\r\n  const oneCurrencyIsWBNB = Boolean(\r\n    chainId &&\r\n      ((currencyA && currencyEquals(currencyA, WETH[chainId])) ||\r\n        (currencyB && currencyEquals(currencyB, WETH[chainId])))\r\n  )\r\n  const expertMode = useIsExpertMode()\r\n\r\n  // mint state\r\n  const { independentField, typedValue, otherTypedValue } = useMintState()\r\n  const {\r\n    dependentField,\r\n    currencies,\r\n    pair,\r\n    pairState,\r\n    currencyBalances,\r\n    parsedAmounts,\r\n    price,\r\n    noLiquidity,\r\n    liquidityMinted,\r\n    poolTokenPercentage,\r\n    error,\r\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\r\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\r\n\r\n  const isValid = !error\r\n\r\n  // modal and loading\r\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\r\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\r\n\r\n  // txn values\r\n  const [deadline] = useUserDeadline() // custom from users settings\r\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\r\n  const [txHash, setTxHash] = useState<string>('')\r\n\r\n  // get formatted amounts\r\n  const formattedAmounts = {\r\n    [independentField]: typedValue,\r\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  // get the max amounts user can add\r\n  const maxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\r\n    (accumulator, field) => {\r\n      return {\r\n        ...accumulator,\r\n        [field]: maxAmountSpend(currencyBalances[field]),\r\n      }\r\n    },\r\n    {}\r\n  )\r\n\r\n  const atMaxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\r\n    (accumulator, field) => {\r\n      return {\r\n        ...accumulator,\r\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0'),\r\n      }\r\n    },\r\n    {}\r\n  )\r\n\r\n  // check whether the user has approved the router on the tokens\r\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], ROUTER_ADDRESS)\r\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], ROUTER_ADDRESS)\r\n\r\n  const addTransaction = useTransactionAdder()\r\n\r\n  async function onAdd() {\r\n    if (!chainId || !library || !account) return\r\n    const router = getRouterContract(chainId, library, account)\r\n\r\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\r\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB) {\r\n      return\r\n    }\r\n\r\n    const amountsMin = {\r\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\r\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0],\r\n    }\r\n\r\n    const deadlineFromNow = Math.ceil(Date.now() / 1000) + deadline\r\n\r\n    let estimate\r\n    let method: (...args: any) => Promise<TransactionResponse>\r\n    let args: Array<string | string[] | number>\r\n    let value: BigNumber | null\r\n    if (currencyA === ETHER || currencyB === ETHER) {\r\n      const tokenBIsBNB = currencyB === ETHER\r\n      estimate = router.estimateGas.addLiquidityETH\r\n      method = router.addLiquidityETH\r\n      args = [\r\n        wrappedCurrency(tokenBIsBNB ? currencyA : currencyB, chainId)?.address ?? '', // token\r\n        (tokenBIsBNB ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\r\n        amountsMin[tokenBIsBNB ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\r\n        amountsMin[tokenBIsBNB ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\r\n        account,\r\n        deadlineFromNow,\r\n      ]\r\n      value = BigNumber.from((tokenBIsBNB ? parsedAmountB : parsedAmountA).raw.toString())\r\n    } else {\r\n      estimate = router.estimateGas.addLiquidity\r\n      method = router.addLiquidity\r\n      args = [\r\n        wrappedCurrency(currencyA, chainId)?.address ?? '',\r\n        wrappedCurrency(currencyB, chainId)?.address ?? '',\r\n        parsedAmountA.raw.toString(),\r\n        parsedAmountB.raw.toString(),\r\n        amountsMin[Field.CURRENCY_A].toString(),\r\n        amountsMin[Field.CURRENCY_B].toString(),\r\n        account,\r\n        deadlineFromNow,\r\n      ]\r\n      value = null\r\n    }\r\n\r\n    setAttemptingTxn(true)\r\n    // const aa = await estimate(...args, value ? { value } : {})\r\n    await estimate(...args, value ? { value } : {})\r\n      .then((estimatedGasLimit) =>\r\n        method(...args, {\r\n          ...(value ? { value } : {}),\r\n          gasLimit: calculateGasMargin(estimatedGasLimit),\r\n        }).then((response) => {\r\n          setAttemptingTxn(false)\r\n\r\n          addTransaction(response, {\r\n            summary: `Add ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\r\n              currencies[Field.CURRENCY_A]?.symbol\r\n            } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencies[Field.CURRENCY_B]?.symbol}`,\r\n          })\r\n\r\n          setTxHash(response.hash)\r\n        })\r\n      )\r\n      .catch((e) => {\r\n        setAttemptingTxn(false)\r\n        // we only care if the error is something _other_ than the user rejected the tx\r\n        if (e?.code !== 4001) {\r\n          console.error(e)\r\n        }\r\n      })\r\n  }\r\n\r\n  const modalHeader = () => {\r\n    return noLiquidity ? (\r\n      <AutoColumn gap=\"20px\">\r\n        <LightCard mt=\"20px\" borderRadius=\"20px\">\r\n          <RowFlat>\r\n            <UIKitText fontSize=\"48px\" mr=\"8px\">\r\n              {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol}`}\r\n            </UIKitText>\r\n            <DoubleCurrencyLogo\r\n              currency0={currencies[Field.CURRENCY_A]}\r\n              currency1={currencies[Field.CURRENCY_B]}\r\n              size={30}\r\n            />\r\n          </RowFlat>\r\n        </LightCard>\r\n      </AutoColumn>\r\n    ) : (\r\n      <AutoColumn gap=\"20px\">\r\n        <RowFlat style={{ marginTop: '20px' }}>\r\n          <UIKitText fontSize=\"48px\" mr=\"8px\">\r\n            {liquidityMinted?.toSignificant(6)}\r\n          </UIKitText>\r\n          <DoubleCurrencyLogo\r\n            currency0={currencies[Field.CURRENCY_A]}\r\n            currency1={currencies[Field.CURRENCY_B]}\r\n            size={30}\r\n          />\r\n        </RowFlat>\r\n        <Row>\r\n          <UIKitText fontSize=\"24px\">\r\n            {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol} Pool Tokens`}\r\n          </UIKitText>\r\n        </Row>\r\n        <UIKitText small textAlign=\"left\" padding=\"8px 0 0 0 \" style={{ fontStyle: 'italic' }}>\r\n          {`Output is estimated. If the price changes by more than ${\r\n            allowedSlippage / 100\r\n          }% your transaction will revert.`}\r\n        </UIKitText>\r\n      </AutoColumn>\r\n    )\r\n  }\r\n\r\n  const modalBottom = () => {\r\n    return (\r\n      <ConfirmAddModalBottom\r\n        price={price}\r\n        currencies={currencies}\r\n        parsedAmounts={parsedAmounts}\r\n        noLiquidity={noLiquidity}\r\n        onAdd={onAdd}\r\n        poolTokenPercentage={poolTokenPercentage}\r\n      />\r\n    )\r\n  }\r\n\r\n  const pendingText = `Supplying ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)} ${\r\n    currencies[Field.CURRENCY_A]?.symbol\r\n  } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)} ${currencies[Field.CURRENCY_B]?.symbol}`\r\n\r\n  const handleCurrencyASelect = useCallback(\r\n    (currA: Currency) => {\r\n      const newCurrencyIdA = currencyId(currA)\r\n      if (newCurrencyIdA === currencyIdB) {\r\n        history.push(`/add/${currencyIdB}/${currencyIdA}`)\r\n      } else {\r\n        history.push(`/add/${newCurrencyIdA}/${currencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdB, history, currencyIdA]\r\n  )\r\n  const handleCurrencyBSelect = useCallback(\r\n    (currB: Currency) => {\r\n      const newCurrencyIdB = currencyId(currB)\r\n      if (currencyIdA === newCurrencyIdB) {\r\n        if (currencyIdB) {\r\n          history.push(`/add/${currencyIdB}/${newCurrencyIdB}`)\r\n        } else {\r\n          history.push(`/add/${newCurrencyIdB}`)\r\n        }\r\n      } else {\r\n        history.push(`/add/${currencyIdA || 'BNB'}/${newCurrencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdA, history, currencyIdB]\r\n  )\r\n\r\n  const handleDismissConfirmation = useCallback(() => {\r\n    setShowConfirm(false)\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onFieldAInput('')\r\n    }\r\n    setTxHash('')\r\n  }, [onFieldAInput, txHash])\r\n\r\n  return (\r\n    <Container>\r\n      <CardNav activeIndex={1} />\r\n      <AppBody>\r\n        <AddRemoveTabs adding />\r\n        <Wrapper>\r\n          <TransactionConfirmationModal\r\n            isOpen={showConfirm}\r\n            onDismiss={handleDismissConfirmation}\r\n            attemptingTxn={attemptingTxn}\r\n            hash={txHash}\r\n            content={() => (\r\n              <ConfirmationModalContent\r\n                title={\r\n                  noLiquidity\r\n                    ? TranslateString(1154, 'You are creating a pool')\r\n                    : TranslateString(1156, 'You will receive')\r\n                }\r\n                onDismiss={handleDismissConfirmation}\r\n                topContent={modalHeader}\r\n                bottomContent={modalBottom}\r\n              />\r\n            )}\r\n            pendingText={pendingText}\r\n          />\r\n          <CardBody>\r\n            <AutoColumn gap=\"20px\">\r\n              {noLiquidity && (\r\n                <ColumnCenter>\r\n                  <Pane>\r\n                    <AutoColumn gap=\"12px\">\r\n                      <UIKitText>{TranslateString(1158, 'You are the first liquidity provider.')}</UIKitText>\r\n                      <UIKitText>\r\n                        {TranslateString(1160, 'The ratio of tokens you add will set the price of this pool.')}\r\n                      </UIKitText>\r\n                      <UIKitText>\r\n                        {TranslateString(1162, 'Once you are happy with the rate click supply to review.')}\r\n                      </UIKitText>\r\n                    </AutoColumn>\r\n                  </Pane>\r\n                </ColumnCenter>\r\n              )}\r\n              <CurrencyInputPanel\r\n                value={formattedAmounts[Field.CURRENCY_A]}\r\n                onUserInput={onFieldAInput}\r\n                onMax={() => {\r\n                  onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\r\n                }}\r\n                onCurrencySelect={handleCurrencyASelect}\r\n                showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\r\n                currency={currencies[Field.CURRENCY_A]}\r\n                id=\"add-liquidity-input-tokena\"\r\n                showCommonBases={false}\r\n              />\r\n              <ColumnCenter>\r\n                <AddIcon color=\"textSubtle\" />\r\n              </ColumnCenter>\r\n              <CurrencyInputPanel\r\n                value={formattedAmounts[Field.CURRENCY_B]}\r\n                onUserInput={onFieldBInput}\r\n                onCurrencySelect={handleCurrencyBSelect}\r\n                onMax={() => {\r\n                  onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\r\n                }}\r\n                showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\r\n                currency={currencies[Field.CURRENCY_B]}\r\n                id=\"add-liquidity-input-tokenb\"\r\n                showCommonBases={false}\r\n              />\r\n              {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\r\n                <div>\r\n                  <UIKitText\r\n                    style={{ textTransform: 'uppercase', fontWeight: 600 }}\r\n                    color=\"textSubtle\"\r\n                    fontSize=\"12px\"\r\n                    mb=\"2px\"\r\n                  >\r\n                    {noLiquidity\r\n                      ? TranslateString(1164, 'Initial prices and pool share')\r\n                      : TranslateString(1166, 'Prices and pool share')}\r\n                  </UIKitText>\r\n                  <Pane>\r\n                    <PoolPriceBar\r\n                      currencies={currencies}\r\n                      poolTokenPercentage={poolTokenPercentage}\r\n                      noLiquidity={noLiquidity}\r\n                      price={price}\r\n                    />\r\n                  </Pane>\r\n                </div>\r\n              )}\r\n\r\n              {!account ? (\r\n                <ConnectWalletButton width=\"100%\" />\r\n              ) : (\r\n                <AutoColumn gap=\"md\">\r\n                  {(approvalA === ApprovalState.NOT_APPROVED ||\r\n                    approvalA === ApprovalState.PENDING ||\r\n                    approvalB === ApprovalState.NOT_APPROVED ||\r\n                    approvalB === ApprovalState.PENDING) &&\r\n                    isValid && (\r\n                      <RowBetween>\r\n                        {approvalA !== ApprovalState.APPROVED && (\r\n                          <Button\r\n                            onClick={approveACallback}\r\n                            disabled={approvalA === ApprovalState.PENDING}\r\n                            style={{ width: approvalB !== ApprovalState.APPROVED ? '48%' : '100%' }}\r\n                          >\r\n                            {approvalA === ApprovalState.PENDING ? (\r\n                              <Dots>Approving {currencies[Field.CURRENCY_A]?.symbol}</Dots>\r\n                            ) : (\r\n                              `Approve ${currencies[Field.CURRENCY_A]?.symbol}`\r\n                            )}\r\n                          </Button>\r\n                        )}\r\n                        {approvalB !== ApprovalState.APPROVED && (\r\n                          <Button\r\n                            onClick={approveBCallback}\r\n                            disabled={approvalB === ApprovalState.PENDING}\r\n                            style={{ width: approvalA !== ApprovalState.APPROVED ? '48%' : '100%' }}\r\n                          >\r\n                            {approvalB === ApprovalState.PENDING ? (\r\n                              <Dots>Approving {currencies[Field.CURRENCY_B]?.symbol}</Dots>\r\n                            ) : (\r\n                              `Approve ${currencies[Field.CURRENCY_B]?.symbol}`\r\n                            )}\r\n                          </Button>\r\n                        )}\r\n                      </RowBetween>\r\n                    )}\r\n                  <Button\r\n                    onClick={() => {\r\n                      if (expertMode) {\r\n                        onAdd()\r\n                      } else {\r\n                        setShowConfirm(true)\r\n                      }\r\n                    }}\r\n                    disabled={!isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED}\r\n                  >\r\n                    {error ?? \"Supply\"}\r\n                  </Button>\r\n                </AutoColumn>\r\n              )}\r\n            </AutoColumn>\r\n          </CardBody>\r\n        </Wrapper>\r\n      </AppBody>\r\n      {pair && !noLiquidity && pairState !== PairState.INVALID ? (\r\n        <AutoColumn style={{ minWidth: '20rem', marginTop: '1rem' }}>\r\n          <MinimalPositionCard showUnwrapped={oneCurrencyIsWBNB} pair={pair} />\r\n        </AutoColumn>\r\n      ) : null}\r\n    </Container>\r\n  )\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\Swap\\index.tsx",["814"],"import { CurrencyAmount, JSBI, Token, Trade } from '@appleswap/sdk'\r\nimport React, { useCallback, useContext, useEffect, useMemo, useState, useRef } from 'react'\r\nimport { ArrowDown } from 'react-feather'\r\nimport { CardBody, ArrowDownIcon, Button, IconButton, Text, useModal, Link, Flex } from '@pancakeswap-libs/uikit'\r\nimport styled, { ThemeContext } from 'styled-components'\r\nimport AddressInputPanel from 'components/AddressInputPanel'\r\nimport Card, { GreyCard } from 'components/Card'\r\nimport { AutoColumn } from 'components/Column'\r\nimport ConfirmSwapModal from 'components/swap/ConfirmSwapModal'\r\nimport CurrencyInputPanel from 'components/CurrencyInputPanel'\r\nimport CardNav from 'components/CardNav'\r\nimport { AutoRow, RowBetween } from 'components/Row'\r\nimport AdvancedSwapDetailsDropdown from 'components/swap/AdvancedSwapDetailsDropdown'\r\nimport confirmPriceImpactWithoutFee from 'components/swap/confirmPriceImpactWithoutFee'\r\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from 'components/swap/styleds'\r\nimport TradePrice from 'components/swap/TradePrice'\r\nimport TokenWarningModal from 'components/TokenWarningModal'\r\nimport SyrupWarningModal from 'components/SyrupWarningModal'\r\nimport SafeMoonWarningModal from 'components/SafeMoonWarningModal'\r\nimport ProgressSteps from 'components/ProgressSteps'\r\nimport Container from 'components/Container'\r\n\r\nimport { INITIAL_ALLOWED_SLIPPAGE } from 'constants/index'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { useCurrency } from 'hooks/Tokens'\r\nimport { ApprovalState, useApproveCallbackFromTrade } from 'hooks/useApproveCallback'\r\nimport { useSwapCallback } from 'hooks/useSwapCallback'\r\nimport useWrapCallback, { WrapType } from 'hooks/useWrapCallback'\r\nimport { Field } from 'state/swap/actions'\r\nimport { useDefaultsFromURLSearch, useDerivedSwapInfo, useSwapActionHandlers, useSwapState } from 'state/swap/hooks'\r\nimport { useExpertModeManager, useUserDeadline, useUserSlippageTolerance } from 'state/user/hooks'\r\nimport { LinkStyledButton } from 'components/Shared'\r\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\r\nimport { computeTradePriceBreakdown, warningSeverity } from 'utils/prices'\r\nimport Loader from 'components/Loader'\r\nimport useI18n from 'hooks/useI18n'\r\nimport PageHeader from 'components/PageHeader'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport V2ExchangeRedirectModal from 'components/V2ExchangeRedirectModal'\r\nimport AppBody from '../AppBody'\r\n\r\nconst StyledLink = styled(Link)`\r\n  display: inline;\r\n  color: ${({ theme }) => theme.colors.failure};\r\n`\r\n\r\nconst Swap = () => {\r\n  const loadedUrlParams = useDefaultsFromURLSearch()\r\n  const TranslateString = useI18n()\r\n  const [modalCountdownSecondsRemaining, setModalCountdownSecondsRemaining] = useState(5)\r\n  const [disableSwap, setDisableSwap] = useState(false)\r\n  const [hasPoppedModal, setHasPoppedModal] = useState(false)\r\n  const [interruptRedirectCountdown, setInterruptRedirectCountdown] = useState(false)\r\n  const [onPresentV2ExchangeRedirectModal] = useModal(\r\n    <V2ExchangeRedirectModal handleCloseModal={() => setInterruptRedirectCountdown(true)} />\r\n  )\r\n  const onPresentV2ExchangeRedirectModalRef = useRef(onPresentV2ExchangeRedirectModal)\r\n  // token warning stuff\r\n  const [loadedInputCurrency, loadedOutputCurrency] = [\r\n    useCurrency(loadedUrlParams?.inputCurrencyId),\r\n    useCurrency(loadedUrlParams?.outputCurrencyId),\r\n  ]\r\n  const [dismissTokenWarning, setDismissTokenWarning] = useState<boolean>(false)\r\n  const [transactionWarning, setTransactionWarning] = useState<{\r\n    selectedToken: string | null\r\n    purchaseType: string | null\r\n  }>({\r\n    selectedToken: null,\r\n    purchaseType: null,\r\n  })\r\n  const urlLoadedTokens: Token[] = useMemo(\r\n    () => [loadedInputCurrency, loadedOutputCurrency]?.filter((c): c is Token => c instanceof Token) ?? [],\r\n    [loadedInputCurrency, loadedOutputCurrency]\r\n  )\r\n  const handleConfirmTokenWarning = useCallback(() => {\r\n    setDismissTokenWarning(true)\r\n  }, [])\r\n\r\n  const handleConfirmWarning = () => {\r\n    setTransactionWarning({\r\n      selectedToken: null,\r\n      purchaseType: null,\r\n    })\r\n  }\r\n\r\n  const { account } = useActiveWeb3React()\r\n  const theme = useContext(ThemeContext)\r\n\r\n  const [isExpertMode] = useExpertModeManager()\r\n\r\n  // get custom setting values for user\r\n  const [deadline] = useUserDeadline()\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  // swap state\r\n  const { independentField, typedValue, recipient } = useSwapState()\r\n  const { v2Trade, currencyBalances, parsedAmount, currencies, inputError: swapInputError } = useDerivedSwapInfo()\r\n  const { wrapType, execute: onWrap, inputError: wrapInputError } = useWrapCallback(\r\n    currencies[Field.INPUT],\r\n    currencies[Field.OUTPUT],\r\n    typedValue\r\n  )\r\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\r\n  const trade = showWrap ? undefined : v2Trade\r\n\r\n  // Manage disabled trading pairs that should redirect users to V2\r\n  useEffect(() => {\r\n    const disabledSwaps = ['BNB', 'BUSD', 'USDT', 'USDC', 'CAKE', 'BUNNY', 'ETH', 'BTCB', 'AUTO', 'XVS']\r\n    const inputCurrencySymbol = currencies[Field.INPUT]?.symbol || ''\r\n    const outputCurrencySymbol = currencies[Field.OUTPUT]?.symbol || ''\r\n    const doesInputMatch = disabledSwaps.includes(inputCurrencySymbol)\r\n    const doesOutputMatch = disabledSwaps.includes(outputCurrencySymbol)\r\n\r\n    if (doesInputMatch && doesOutputMatch) {\r\n      // Prevent infinite re-render of modal with this condition\r\n      if (!hasPoppedModal) {\r\n        setHasPoppedModal(true)\r\n        onPresentV2ExchangeRedirectModalRef.current()\r\n      }\r\n\r\n      // Controls the swap buttons being disabled & renders a message\r\n      setDisableSwap(true)\r\n\r\n      const tick = () => {\r\n        setModalCountdownSecondsRemaining((prevSeconds) => prevSeconds - 1)\r\n      }\r\n      const timerInterval = setInterval(() => tick(), 1000)\r\n\r\n      if (interruptRedirectCountdown) {\r\n        // Reset timer if countdown is interrupted\r\n        clearInterval(timerInterval)\r\n        setModalCountdownSecondsRemaining(5)\r\n      }\r\n\r\n      if (modalCountdownSecondsRemaining <= 0) {\r\n        window.location.href = 'https://exchange.pancakeswap.finance/#/swap'\r\n      }\r\n\r\n      return () => {\r\n        clearInterval(timerInterval)\r\n      }\r\n    }\r\n\r\n    // Unset disableSwap state if the swap inputs & outputs dont match disabledSwaps\r\n    setDisableSwap(false)\r\n    return undefined\r\n  }, [\r\n    currencies,\r\n    hasPoppedModal,\r\n    modalCountdownSecondsRemaining,\r\n    onPresentV2ExchangeRedirectModalRef,\r\n    interruptRedirectCountdown,\r\n  ])\r\n\r\n  const parsedAmounts = showWrap\r\n    ? {\r\n        [Field.INPUT]: parsedAmount,\r\n        [Field.OUTPUT]: parsedAmount,\r\n      }\r\n    : {\r\n        [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\r\n        [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount,\r\n      }\r\n\r\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\r\n  const isValid = !swapInputError\r\n  const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\r\n\r\n  const handleTypeInput = useCallback(\r\n    (value: string) => {\r\n      onUserInput(Field.INPUT, value)\r\n    },\r\n    [onUserInput]\r\n  )\r\n  const handleTypeOutput = useCallback(\r\n    (value: string) => {\r\n      onUserInput(Field.OUTPUT, value)\r\n    },\r\n    [onUserInput]\r\n  )\r\n\r\n  // modal and loading\r\n  const [{ showConfirm, tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\r\n    showConfirm: boolean\r\n    tradeToConfirm: Trade | undefined\r\n    attemptingTxn: boolean\r\n    swapErrorMessage: string | undefined\r\n    txHash: string | undefined\r\n  }>({\r\n    showConfirm: false,\r\n    tradeToConfirm: undefined,\r\n    attemptingTxn: false,\r\n    swapErrorMessage: undefined,\r\n    txHash: undefined,\r\n  })\r\n\r\n  const formattedAmounts = {\r\n    [independentField]: typedValue,\r\n    [dependentField]: showWrap\r\n      ? parsedAmounts[independentField]?.toExact() ?? ''\r\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  const route = trade?.route\r\n  const userHasSpecifiedInputOutput = Boolean(\r\n    currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0))\r\n  )\r\n  const noRoute = !route\r\n\r\n  // check whether the user has approved the router on the input token\r\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\r\n\r\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\r\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\r\n\r\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\r\n  useEffect(() => {\r\n    if (approval === ApprovalState.PENDING) {\r\n      setApprovalSubmitted(true)\r\n    }\r\n  }, [approval, approvalSubmitted])\r\n\r\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\r\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\r\n\r\n  // the callback to execute the swap\r\n  const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(\r\n    trade,\r\n    allowedSlippage,\r\n    deadline,\r\n    recipient\r\n  )\r\n\r\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade)\r\n\r\n  const handleSwap = useCallback(() => {\r\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\r\n      return\r\n    }\r\n    if (!swapCallback) {\r\n      return\r\n    }\r\n    setSwapState((prevState) => ({ ...prevState, attemptingTxn: true, swapErrorMessage: undefined, txHash: undefined }))\r\n    swapCallback()\r\n      .then((hash) => {\r\n        setSwapState((prevState) => ({\r\n          ...prevState,\r\n          attemptingTxn: false,\r\n          swapErrorMessage: undefined,\r\n          txHash: hash,\r\n        }))\r\n      })\r\n      .catch((error) => {\r\n        setSwapState((prevState) => ({\r\n          ...prevState,\r\n          attemptingTxn: false,\r\n          swapErrorMessage: error.message,\r\n          txHash: undefined,\r\n        }))\r\n      })\r\n  }, [priceImpactWithoutFee, swapCallback, setSwapState])\r\n\r\n  // errors\r\n  const [showInverted, setShowInverted] = useState<boolean>(false)\r\n\r\n  // warnings on slippage\r\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\r\n\r\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\r\n  // never show if price impact is above threshold in non expert mode\r\n  const showApproveFlow =\r\n    !swapInputError &&\r\n    (approval === ApprovalState.NOT_APPROVED ||\r\n      approval === ApprovalState.PENDING ||\r\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\r\n    !(priceImpactSeverity > 3 && !isExpertMode)\r\n\r\n  const handleConfirmDismiss = useCallback(() => {\r\n    setSwapState((prevState) => ({ ...prevState, showConfirm: false }))\r\n\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onUserInput(Field.INPUT, '')\r\n    }\r\n  }, [onUserInput, txHash, setSwapState])\r\n\r\n  const handleAcceptChanges = useCallback(() => {\r\n    setSwapState((prevState) => ({ ...prevState, tradeToConfirm: trade }))\r\n  }, [trade])\r\n\r\n  // This will check to see if the user has selected Syrup or SafeMoon to either buy or sell.\r\n  // If so, they will be alerted with a warning message.\r\n  const checkForWarning = useCallback(\r\n    (selected: string, purchaseType: string) => {\r\n      if (['SYRUP', 'SAFEMOON'].includes(selected)) {\r\n        setTransactionWarning({\r\n          selectedToken: selected,\r\n          purchaseType,\r\n        })\r\n      }\r\n    },\r\n    [setTransactionWarning]\r\n  )\r\n\r\n  const handleInputSelect = useCallback(\r\n    (inputCurrency) => {\r\n      setHasPoppedModal(false)\r\n      setInterruptRedirectCountdown(false)\r\n      setApprovalSubmitted(false) // reset 2 step UI for approvals\r\n      onCurrencySelection(Field.INPUT, inputCurrency)\r\n      if (inputCurrency.symbol === 'SYRUP') {\r\n        checkForWarning(inputCurrency.symbol, 'Selling')\r\n      }\r\n      if (inputCurrency.symbol === 'SAFEMOON') {\r\n        checkForWarning(inputCurrency.symbol, 'Selling')\r\n      }\r\n    },\r\n    [onCurrencySelection, setApprovalSubmitted, checkForWarning]\r\n  )\r\n\r\n  const handleMaxInput = useCallback(() => {\r\n    if (maxAmountInput) {\r\n      onUserInput(Field.INPUT, maxAmountInput.toExact())\r\n    }\r\n  }, [maxAmountInput, onUserInput])\r\n\r\n  const handleOutputSelect = useCallback(\r\n    (outputCurrency) => {\r\n      setHasPoppedModal(false)\r\n      setInterruptRedirectCountdown(false)\r\n      onCurrencySelection(Field.OUTPUT, outputCurrency)\r\n      if (outputCurrency.symbol === 'SYRUP') {\r\n        checkForWarning(outputCurrency.symbol, 'Buying')\r\n      }\r\n      if (outputCurrency.symbol === 'SAFEMOON') {\r\n        checkForWarning(outputCurrency.symbol, 'Buying')\r\n      }\r\n    },\r\n    [onCurrencySelection, checkForWarning]\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <TokenWarningModal\r\n        isOpen={urlLoadedTokens.length > 0 && !dismissTokenWarning}\r\n        tokens={urlLoadedTokens}\r\n        onConfirm={handleConfirmTokenWarning}\r\n      />\r\n      <SyrupWarningModal\r\n        isOpen={transactionWarning.selectedToken === 'SYRUP'}\r\n        transactionType={transactionWarning.purchaseType}\r\n        onConfirm={handleConfirmWarning}\r\n      />\r\n      <SafeMoonWarningModal isOpen={transactionWarning.selectedToken === 'SAFEMOON'} onConfirm={handleConfirmWarning} />\r\n      <CardNav />\r\n      <AppBody>\r\n        <Wrapper id=\"swap-page\">\r\n          <ConfirmSwapModal\r\n            isOpen={showConfirm}\r\n            trade={trade}\r\n            originalTrade={tradeToConfirm}\r\n            onAcceptChanges={handleAcceptChanges}\r\n            attemptingTxn={attemptingTxn}\r\n            txHash={txHash}\r\n            recipient={recipient}\r\n            allowedSlippage={allowedSlippage}\r\n            onConfirm={handleSwap}\r\n            swapErrorMessage={swapErrorMessage}\r\n            onDismiss={handleConfirmDismiss}\r\n          />\r\n          <PageHeader\r\n            title={TranslateString(8, 'Exchange')}\r\n            description={TranslateString(1192, 'Trade tokens in an instant')}\r\n          />\r\n          <CardBody>\r\n            <AutoColumn gap=\"md\">\r\n              <CurrencyInputPanel\r\n                label={\r\n                  independentField === Field.OUTPUT && !showWrap && trade\r\n                    ? TranslateString(194, 'From (estimated)')\r\n                    : TranslateString(76, 'From')\r\n                }\r\n                value={formattedAmounts[Field.INPUT]}\r\n                showMaxButton={!atMaxAmountInput}\r\n                currency={currencies[Field.INPUT]}\r\n                onUserInput={handleTypeInput}\r\n                onMax={handleMaxInput}\r\n                onCurrencySelect={handleInputSelect}\r\n                otherCurrency={currencies[Field.OUTPUT]}\r\n                id=\"swap-currency-input\"\r\n              />\r\n              <AutoColumn justify=\"space-between\">\r\n                <AutoRow justify={isExpertMode ? 'space-between' : 'center'} style={{ padding: '0 1rem' }}>\r\n                  <ArrowWrapper clickable>\r\n                    <IconButton\r\n                      variant=\"tertiary\"\r\n                      onClick={() => {\r\n                        setApprovalSubmitted(false) // reset 2 step UI for approvals\r\n                        onSwitchTokens()\r\n                      }}\r\n                      style={{ borderRadius: '50%' }}\r\n                      scale=\"sm\"\r\n                    >\r\n                      <ArrowDownIcon color=\"primary\" width=\"24px\" />\r\n                    </IconButton>\r\n                  </ArrowWrapper>\r\n                  {recipient === null && !showWrap && isExpertMode ? (\r\n                    <LinkStyledButton id=\"add-recipient-button\" onClick={() => onChangeRecipient('')}>\r\n                      + Add a send (optional)\r\n                    </LinkStyledButton>\r\n                  ) : null}\r\n                </AutoRow>\r\n              </AutoColumn>\r\n              <CurrencyInputPanel\r\n                value={formattedAmounts[Field.OUTPUT]}\r\n                onUserInput={handleTypeOutput}\r\n                label={\r\n                  independentField === Field.INPUT && !showWrap && trade\r\n                    ? TranslateString(196, 'To (estimated)')\r\n                    : TranslateString(80, 'To')\r\n                }\r\n                showMaxButton={false}\r\n                currency={currencies[Field.OUTPUT]}\r\n                onCurrencySelect={handleOutputSelect}\r\n                otherCurrency={currencies[Field.INPUT]}\r\n                id=\"swap-currency-output\"\r\n              />\r\n\r\n              {recipient !== null && !showWrap ? (\r\n                <>\r\n                  <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\r\n                    <ArrowWrapper clickable={false}>\r\n                      <ArrowDown size=\"16\" color={theme.colors.textSubtle} />\r\n                    </ArrowWrapper>\r\n                    <LinkStyledButton id=\"remove-recipient-button\" onClick={() => onChangeRecipient(null)}>\r\n                      - Remove send\r\n                    </LinkStyledButton>\r\n                  </AutoRow>\r\n                  <AddressInputPanel id=\"recipient\" value={recipient} onChange={onChangeRecipient} />\r\n                </>\r\n              ) : null}\r\n\r\n              {showWrap ? null : (\r\n                <Card padding=\".25rem .75rem 0 .75rem\" borderRadius=\"20px\">\r\n                  <AutoColumn gap=\"4px\">\r\n                    {Boolean(trade) && (\r\n                      <RowBetween align=\"center\">\r\n                        <Text fontSize=\"14px\">{TranslateString(1182, 'Price')}</Text>\r\n                        <TradePrice\r\n                          price={trade?.executionPrice}\r\n                          showInverted={showInverted}\r\n                          setShowInverted={setShowInverted}\r\n                        />\r\n                      </RowBetween>\r\n                    )}\r\n                    {allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && (\r\n                      <RowBetween align=\"center\">\r\n                        <Text fontSize=\"14px\">{TranslateString(88, 'Slippage Tolerance')}</Text>\r\n                        <Text fontSize=\"14px\">{allowedSlippage / 100}%</Text>\r\n                      </RowBetween>\r\n                    )}\r\n                  </AutoColumn>\r\n                </Card>\r\n              )}\r\n            </AutoColumn>\r\n            <BottomGrouping>\r\n              {disableSwap && (\r\n                <Flex alignItems=\"center\" justifyContent=\"center\" mb=\"1rem\">\r\n                  <Text color=\"failure\">\r\n                    Please use{' '}\r\n                    <StyledLink external href=\"https://exchange.pancakeswap.finance\">\r\n                      PancakeSwap V2\r\n                    </StyledLink>{' '}\r\n                    to make this trade\r\n                  </Text>\r\n                </Flex>\r\n              )}\r\n              {!account ? (\r\n                <ConnectWalletButton width=\"100%\" />\r\n              ) : showWrap ? (\r\n                <Button disabled={Boolean(wrapInputError)} onClick={onWrap} width=\"100%\">\r\n                  {wrapInputError ??\r\n                    (wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null)}\r\n                </Button>\r\n              ) : noRoute && userHasSpecifiedInputOutput ? (\r\n                <GreyCard style={{ textAlign: 'center' }}>\r\n                  <Text mb=\"4px\">{TranslateString(1194, 'Insufficient liquidity for this trade.')}</Text>\r\n                </GreyCard>\r\n              ) : showApproveFlow ? (\r\n                <RowBetween>\r\n                  <Button\r\n                    onClick={approveCallback}\r\n                    disabled={disableSwap || approval !== ApprovalState.NOT_APPROVED || approvalSubmitted}\r\n                    style={{ width: '48%' }}\r\n                    variant={approval === ApprovalState.APPROVED ? 'success' : 'primary'}\r\n                  >\r\n                    {approval === ApprovalState.PENDING ? (\r\n                      <AutoRow gap=\"6px\" justify=\"center\">\r\n                        Approving <Loader stroke=\"white\" />\r\n                      </AutoRow>\r\n                    ) : approvalSubmitted && approval === ApprovalState.APPROVED ? (\r\n                      'Approved'\r\n                    ) : (\r\n                      `Approve ${currencies[Field.INPUT]?.symbol}`\r\n                    )}\r\n                  </Button>\r\n                  <Button\r\n                    onClick={() => {\r\n                      if (isExpertMode) {\r\n                        handleSwap()\r\n                      } else {\r\n                        setSwapState({\r\n                          tradeToConfirm: trade,\r\n                          attemptingTxn: false,\r\n                          swapErrorMessage: undefined,\r\n                          showConfirm: true,\r\n                          txHash: undefined,\r\n                        })\r\n                      }\r\n                    }}\r\n                    style={{ width: '48%' }}\r\n                    id=\"swap-button\"\r\n                    disabled={\r\n                      disableSwap ||\r\n                      !isValid ||\r\n                      approval !== ApprovalState.APPROVED ||\r\n                      (priceImpactSeverity > 3 && !isExpertMode)\r\n                    }\r\n                    variant={isValid && priceImpactSeverity > 2 ? 'danger' : 'primary'}\r\n                  >\r\n                    {priceImpactSeverity > 3 && !isExpertMode\r\n                      ? `Price Impact High`\r\n                      : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`}\r\n                  </Button>\r\n                </RowBetween>\r\n              ) : (\r\n                <Button\r\n                  onClick={() => {\r\n                    if (isExpertMode) {\r\n                      handleSwap()\r\n                    } else {\r\n                      setSwapState({\r\n                        tradeToConfirm: trade,\r\n                        attemptingTxn: false,\r\n                        swapErrorMessage: undefined,\r\n                        showConfirm: true,\r\n                        txHash: undefined,\r\n                      })\r\n                    }\r\n                  }}\r\n                  id=\"swap-button\"\r\n                  disabled={\r\n                    disableSwap || !isValid || (priceImpactSeverity > 3 && !isExpertMode) || !!swapCallbackError\r\n                  }\r\n                  variant={isValid && priceImpactSeverity > 2 && !swapCallbackError ? 'danger' : 'primary'}\r\n                  width=\"100%\"\r\n                >\r\n                  {swapInputError ||\r\n                    (priceImpactSeverity > 3 && !isExpertMode\r\n                      ? `Price Impact Too High`\r\n                      : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`)}\r\n                </Button>\r\n              )}\r\n              {showApproveFlow && <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />}\r\n              {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\r\n            </BottomGrouping>\r\n          </CardBody>\r\n        </Wrapper>\r\n      </AppBody>\r\n      <AdvancedSwapDetailsDropdown trade={trade} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Swap\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\RemoveLiquidity\\index.tsx",["815"],"import React, { useCallback, useContext, useMemo, useState } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\nimport { splitSignature } from '@ethersproject/bytes'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { TransactionResponse } from '@ethersproject/providers'\r\nimport { Currency, currencyEquals, ETHER, Percent, WETH } from '@appleswap/sdk'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { ArrowDown, Plus } from 'react-feather'\r\nimport { RouteComponentProps } from 'react-router'\r\n\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { AutoColumn, ColumnCenter } from '../../components/Column'\r\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\r\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\r\nimport DoubleCurrencyLogo from '../../components/DoubleLogo'\r\nimport { AddRemoveTabs } from '../../components/NavigationTabs'\r\nimport { MinimalPositionCard } from '../../components/PositionCard'\r\nimport { RowBetween, RowFixed } from '../../components/Row'\r\nimport Container from '../../components/Container'\r\n\r\nimport Slider from '../../components/Slider'\r\nimport CurrencyLogo from '../../components/CurrencyLogo'\r\nimport { ROUTER_ADDRESS } from '../../constants'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useCurrency } from '../../hooks/Tokens'\r\nimport { usePairContract } from '../../hooks/useContract'\r\n\r\nimport { useTransactionAdder } from '../../state/transactions/hooks'\r\nimport { StyledInternalLink } from '../../components/Shared'\r\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from '../../utils'\r\nimport { currencyId } from '../../utils/currencyId'\r\nimport useDebouncedChangeHandler from '../../utils/useDebouncedChangeHandler'\r\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\r\nimport AppBody from '../AppBody'\r\nimport { ClickableText, Wrapper } from '../Pool/styleds'\r\nimport { useApproveCallback, ApprovalState } from '../../hooks/useApproveCallback'\r\nimport { Dots } from '../../components/swap/styleds'\r\nimport { useBurnActionHandlers, useDerivedBurnInfo, useBurnState } from '../../state/burn/hooks'\r\n\r\nimport { Field } from '../../state/burn/actions'\r\nimport { useUserDeadline, useUserSlippageTolerance } from '../../state/user/hooks'\r\n\r\nconst OutlineCard = styled.div`\r\n  border: 1px solid ${({ theme }) => theme.colors.borderColor};\r\n  border-radius: 16px;\r\n  padding: 24px;\r\n`\r\n\r\nconst Body = styled.div`\r\n  padding-left: 24px;\r\n  padding-right: 24px;\r\n`\r\n\r\nexport default function RemoveLiquidity({\r\n  history,\r\n  match: {\r\n    params: { currencyIdA, currencyIdB },\r\n  },\r\n}: RouteComponentProps<{ currencyIdA: string; currencyIdB: string }>) {\r\n  const [currencyA, currencyB] = [useCurrency(currencyIdA) ?? undefined, useCurrency(currencyIdB) ?? undefined]\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n  const TranslateString = useI18n()\r\n  const [tokenA, tokenB] = useMemo(() => [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)], [\r\n    currencyA,\r\n    currencyB,\r\n    chainId,\r\n  ])\r\n\r\n  const theme = useContext(ThemeContext)\r\n\r\n  // burn state\r\n  const { independentField, typedValue } = useBurnState()\r\n  const { pair, parsedAmounts, error } = useDerivedBurnInfo(currencyA ?? undefined, currencyB ?? undefined)\r\n  const { onUserInput: _onUserInput } = useBurnActionHandlers()\r\n  const isValid = !error\r\n\r\n  // modal and loading\r\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\r\n  const [showDetailed, setShowDetailed] = useState<boolean>(false)\r\n  const [attemptingTxn, setAttemptingTxn] = useState(false) // clicked confirm\r\n\r\n  // txn values\r\n  const [txHash, setTxHash] = useState<string>('')\r\n  const [deadline] = useUserDeadline()\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  const formattedAmounts = {\r\n    [Field.LIQUIDITY_PERCENT]: parsedAmounts[Field.LIQUIDITY_PERCENT].equalTo('0')\r\n      ? '0'\r\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].lessThan(new Percent('1', '100'))\r\n      ? '<1'\r\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0),\r\n    [Field.LIQUIDITY]:\r\n      independentField === Field.LIQUIDITY ? typedValue : parsedAmounts[Field.LIQUIDITY]?.toSignificant(6) ?? '',\r\n    [Field.CURRENCY_A]:\r\n      independentField === Field.CURRENCY_A ? typedValue : parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\r\n    [Field.CURRENCY_B]:\r\n      independentField === Field.CURRENCY_B ? typedValue : parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  const atMaxAmount = parsedAmounts[Field.LIQUIDITY_PERCENT]?.equalTo(new Percent('1'))\r\n\r\n  // pair contract\r\n  const pairContract: Contract | null = usePairContract(pair?.liquidityToken?.address)\r\n\r\n  // allowance handling\r\n  const [signatureData, setSignatureData] = useState<{ v: number; r: string; s: string; deadline: number } | null>(null)\r\n  const [approval, approveCallback] = useApproveCallback(parsedAmounts[Field.LIQUIDITY], ROUTER_ADDRESS)\r\n  async function onAttemptToApprove() {\r\n    if (!pairContract || !pair || !library) throw new Error('missing dependencies')\r\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\r\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\r\n    // try to gather a signature for permission\r\n    const nonce = await pairContract.nonces(account)\r\n\r\n    const deadlineForSignature: number = Math.ceil(Date.now() / 1000) + deadline\r\n\r\n    const EIP712Domain = [\r\n      { name: 'name', type: 'string' },\r\n      { name: 'version', type: 'string' },\r\n      { name: 'chainId', type: 'uint256' },\r\n      { name: 'verifyingContract', type: 'address' },\r\n    ]\r\n    const domain = {\r\n      name: 'Pancake LPs',\r\n      version: '1',\r\n      chainId,\r\n      verifyingContract: pair.liquidityToken.address,\r\n    }\r\n    const Permit = [\r\n      { name: 'owner', type: 'address' },\r\n      { name: 'spender', type: 'address' },\r\n      { name: 'value', type: 'uint256' },\r\n      { name: 'nonce', type: 'uint256' },\r\n      { name: 'deadline', type: 'uint256' },\r\n    ]\r\n    const message = {\r\n      owner: account,\r\n      spender: ROUTER_ADDRESS,\r\n      value: liquidityAmount.raw.toString(),\r\n      nonce: nonce.toHexString(),\r\n      deadline: deadlineForSignature,\r\n    }\r\n    const data = JSON.stringify({\r\n      types: {\r\n        EIP712Domain,\r\n        Permit,\r\n      },\r\n      domain,\r\n      primaryType: 'Permit',\r\n      message,\r\n    })\r\n\r\n    library\r\n      .send('eth_signTypedData_v4', [account, data])\r\n      .then(splitSignature)\r\n      .then((signature) => {\r\n        setSignatureData({\r\n          v: signature.v,\r\n          r: signature.r,\r\n          s: signature.s,\r\n          deadline: deadlineForSignature,\r\n        })\r\n      })\r\n      .catch((e) => {\r\n        // for all errors other than 4001 (EIP-1193 user rejected request), fall back to manual approve\r\n        if (e?.code !== 4001) {\r\n          approveCallback()\r\n        }\r\n      })\r\n  }\r\n\r\n  // wrapped onUserInput to clear signatures\r\n  const onUserInput = useCallback(\r\n    (field: Field, val: string) => {\r\n      setSignatureData(null)\r\n      return _onUserInput(field, val)\r\n    },\r\n    [_onUserInput]\r\n  )\r\n\r\n  const onLiquidityInput = useCallback((val: string): void => onUserInput(Field.LIQUIDITY, val), [onUserInput])\r\n  const onCurrencyAInput = useCallback((val: string): void => onUserInput(Field.CURRENCY_A, val), [onUserInput])\r\n  const onCurrencyBInput = useCallback((val: string): void => onUserInput(Field.CURRENCY_B, val), [onUserInput])\r\n\r\n  // tx sending\r\n  const addTransaction = useTransactionAdder()\r\n  async function onRemove() {\r\n    if (!chainId || !library || !account) throw new Error('missing dependencies')\r\n    const { [Field.CURRENCY_A]: currencyAmountA, [Field.CURRENCY_B]: currencyAmountB } = parsedAmounts\r\n    if (!currencyAmountA || !currencyAmountB) {\r\n      throw new Error('missing currency amounts')\r\n    }\r\n    const router = getRouterContract(chainId, library, account)\r\n\r\n    const amountsMin = {\r\n      [Field.CURRENCY_A]: calculateSlippageAmount(currencyAmountA, allowedSlippage)[0],\r\n      [Field.CURRENCY_B]: calculateSlippageAmount(currencyAmountB, allowedSlippage)[0],\r\n    }\r\n\r\n    if (!currencyA || !currencyB) throw new Error('missing tokens')\r\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\r\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\r\n\r\n    const currencyBIsETH = currencyB === ETHER\r\n    const oneCurrencyIsETH = currencyA === ETHER || currencyBIsETH\r\n    const deadlineFromNow = Math.ceil(Date.now() / 1000) + deadline\r\n\r\n    if (!tokenA || !tokenB) throw new Error('could not wrap')\r\n\r\n    let methodNames: string[]\r\n    let args: Array<string | string[] | number | boolean>\r\n    // we have approval, use normal remove liquidity\r\n    if (approval === ApprovalState.APPROVED) {\r\n      // removeLiquidityETH\r\n      if (oneCurrencyIsETH) {\r\n        methodNames = ['removeLiquidityETH', 'removeLiquidityETHSupportingFeeOnTransferTokens']\r\n        args = [\r\n          currencyBIsETH ? tokenA.address : tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\r\n          account,\r\n          deadlineFromNow,\r\n        ]\r\n      }\r\n      // removeLiquidity\r\n      else {\r\n        methodNames = ['removeLiquidity']\r\n        args = [\r\n          tokenA.address,\r\n          tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[Field.CURRENCY_A].toString(),\r\n          amountsMin[Field.CURRENCY_B].toString(),\r\n          account,\r\n          deadlineFromNow,\r\n        ]\r\n      }\r\n    }\r\n    // we have a signataure, use permit versions of remove liquidity\r\n    else if (signatureData !== null) {\r\n      // removeLiquidityETHWithPermit\r\n      if (oneCurrencyIsETH) {\r\n        methodNames = ['removeLiquidityETHWithPermit', 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens']\r\n        args = [\r\n          currencyBIsETH ? tokenA.address : tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\r\n          account,\r\n          signatureData.deadline,\r\n          false,\r\n          signatureData.v,\r\n          signatureData.r,\r\n          signatureData.s,\r\n        ]\r\n      }\r\n      // removeLiquidityETHWithPermit\r\n      else {\r\n        methodNames = ['removeLiquidityWithPermit']\r\n        args = [\r\n          tokenA.address,\r\n          tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[Field.CURRENCY_A].toString(),\r\n          amountsMin[Field.CURRENCY_B].toString(),\r\n          account,\r\n          signatureData.deadline,\r\n          false,\r\n          signatureData.v,\r\n          signatureData.r,\r\n          signatureData.s,\r\n        ]\r\n      }\r\n    } else {\r\n      throw new Error('Attempting to confirm without approval or a signature. Please contact support.')\r\n    }\r\n    const safeGasEstimates: (BigNumber | undefined)[] = await Promise.all(\r\n      methodNames.map((methodName, index) =>\r\n        router.estimateGas[methodName](...args)\r\n          .then(calculateGasMargin)\r\n          .catch((e) => {\r\n            console.error(`estimateGas failed`, index, methodName, args, e)\r\n            return undefined\r\n          })\r\n      )\r\n    )\r\n\r\n    const indexOfSuccessfulEstimation = safeGasEstimates.findIndex((safeGasEstimate) =>\r\n      BigNumber.isBigNumber(safeGasEstimate)\r\n    )\r\n\r\n    // all estimations failed...\r\n    if (indexOfSuccessfulEstimation === -1) {\r\n      console.error('This transaction would fail. Please contact support.')\r\n    } else {\r\n      const methodName = methodNames[indexOfSuccessfulEstimation]\r\n      const safeGasEstimate = safeGasEstimates[indexOfSuccessfulEstimation]\r\n\r\n      setAttemptingTxn(true)\r\n      await router[methodName](...args, {\r\n        gasLimit: safeGasEstimate,\r\n      })\r\n        .then((response: TransactionResponse) => {\r\n          setAttemptingTxn(false)\r\n\r\n          addTransaction(response, {\r\n            summary: `Remove ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\r\n              currencyA?.symbol\r\n            } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencyB?.symbol}`,\r\n          })\r\n\r\n          setTxHash(response.hash)\r\n        })\r\n        .catch((e: Error) => {\r\n          setAttemptingTxn(false)\r\n          // we only care if the error is something _other_ than the user rejected the tx\r\n          console.error(e)\r\n        })\r\n    }\r\n  }\r\n\r\n  function modalHeader() {\r\n    return (\r\n      <AutoColumn gap=\"md\" style={{ marginTop: '20px' }}>\r\n        <RowBetween align=\"flex-end\">\r\n          <Text fontSize=\"24px\">{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</Text>\r\n          <RowFixed gap=\"4px\">\r\n            <CurrencyLogo currency={currencyA} size=\"24px\" />\r\n            <Text fontSize=\"24px\" style={{ marginLeft: '10px' }}>\r\n              {currencyA?.symbol}\r\n            </Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n        <RowFixed>\r\n          <Plus size=\"16\" color={theme.colors.textSubtle} />\r\n        </RowFixed>\r\n        <RowBetween align=\"flex-end\">\r\n          <Text fontSize=\"24px\">{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</Text>\r\n          <RowFixed gap=\"4px\">\r\n            <CurrencyLogo currency={currencyB} size=\"24px\" />\r\n            <Text fontSize=\"24px\" style={{ marginLeft: '10px' }}>\r\n              {currencyB?.symbol}\r\n            </Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n\r\n        <Text small color=\"textSubtle\" textAlign=\"left\" padding=\"12px 0 0 0\" style={{ fontStyle: 'italic' }}>\r\n          {`Output is estimated. If the price changes by more than ${\r\n            allowedSlippage / 100\r\n          }% your transaction will revert.`}\r\n        </Text>\r\n      </AutoColumn>\r\n    )\r\n  }\r\n\r\n  function modalBottom() {\r\n    return (\r\n      <>\r\n        <RowBetween>\r\n          <Text color=\"textSubtle\">{`LP ${currencyA?.symbol}/${currencyB?.symbol}`} Burned</Text>\r\n          <RowFixed>\r\n            <DoubleCurrencyLogo currency0={currencyA} currency1={currencyB} margin />\r\n            <Text>{parsedAmounts[Field.LIQUIDITY]?.toSignificant(6)}</Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n        {pair && (\r\n          <>\r\n            <RowBetween>\r\n              <Text color=\"textSubtle\">{TranslateString(1182, 'Price')}</Text>\r\n              <Text>\r\n                1 {currencyA?.symbol} = {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\r\n              </Text>\r\n            </RowBetween>\r\n            <RowBetween>\r\n              <div />\r\n              <Text>\r\n                1 {currencyB?.symbol} = {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\r\n              </Text>\r\n            </RowBetween>\r\n          </>\r\n        )}\r\n        <Button disabled={!(approval === ApprovalState.APPROVED || signatureData !== null)} onClick={onRemove}>\r\n          {TranslateString(1136, 'Confirm')}\r\n        </Button>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const pendingText = `Removing ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)} ${\r\n    currencyA?.symbol\r\n  } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)} ${currencyB?.symbol}`\r\n\r\n  const liquidityPercentChangeCallback = useCallback(\r\n    (value: number) => {\r\n      onUserInput(Field.LIQUIDITY_PERCENT, value.toString())\r\n    },\r\n    [onUserInput]\r\n  )\r\n\r\n  const oneCurrencyIsETH = currencyA === ETHER || currencyB === ETHER\r\n  const oneCurrencyIsWETH = Boolean(\r\n    chainId &&\r\n      ((currencyA && currencyEquals(WETH[chainId], currencyA)) ||\r\n        (currencyB && currencyEquals(WETH[chainId], currencyB)))\r\n  )\r\n\r\n  const handleSelectCurrencyA = useCallback(\r\n    (currency: Currency) => {\r\n      if (currencyIdB && currencyId(currency) === currencyIdB) {\r\n        history.push(`/remove/${currencyId(currency)}/${currencyIdA}`)\r\n      } else {\r\n        history.push(`/remove/${currencyId(currency)}/${currencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdA, currencyIdB, history]\r\n  )\r\n  const handleSelectCurrencyB = useCallback(\r\n    (currency: Currency) => {\r\n      if (currencyIdA && currencyId(currency) === currencyIdA) {\r\n        history.push(`/remove/${currencyIdB}/${currencyId(currency)}`)\r\n      } else {\r\n        history.push(`/remove/${currencyIdA}/${currencyId(currency)}`)\r\n      }\r\n    },\r\n    [currencyIdA, currencyIdB, history]\r\n  )\r\n\r\n  const handleDismissConfirmation = useCallback(() => {\r\n    setShowConfirm(false)\r\n    setSignatureData(null) // important that we clear signature data to avoid bad sigs\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onUserInput(Field.LIQUIDITY_PERCENT, '0')\r\n    }\r\n    setTxHash('')\r\n  }, [onUserInput, txHash])\r\n\r\n  const [innerLiquidityPercentage, setInnerLiquidityPercentage] = useDebouncedChangeHandler(\r\n    Number.parseInt(parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0)),\r\n    liquidityPercentChangeCallback\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <AppBody>\r\n        <AddRemoveTabs adding={false} />\r\n        <Wrapper>\r\n          <TransactionConfirmationModal\r\n            isOpen={showConfirm}\r\n            onDismiss={handleDismissConfirmation}\r\n            attemptingTxn={attemptingTxn}\r\n            hash={txHash || ''}\r\n            content={() => (\r\n              <ConfirmationModalContent\r\n                title={TranslateString(1156, 'You will receive')}\r\n                onDismiss={handleDismissConfirmation}\r\n                topContent={modalHeader}\r\n                bottomContent={modalBottom}\r\n              />\r\n            )}\r\n            pendingText={pendingText}\r\n          />\r\n          <AutoColumn gap=\"md\">\r\n            <Body>\r\n              <OutlineCard>\r\n                <AutoColumn>\r\n                  <RowBetween>\r\n                    <Text>Amount</Text>\r\n                    <ClickableText\r\n                      onClick={() => {\r\n                        setShowDetailed(!showDetailed)\r\n                      }}\r\n                    >\r\n                      {showDetailed ? TranslateString(1184, 'Simple') : TranslateString(1186, 'Detailed')}\r\n                    </ClickableText>\r\n                  </RowBetween>\r\n                  <Flex justifyContent=\"start\">\r\n                    <Text fontSize=\"64px\">{formattedAmounts[Field.LIQUIDITY_PERCENT]}%</Text>\r\n                  </Flex>\r\n                  {!showDetailed && (\r\n                    <>\r\n                      <Flex mb=\"8px\">\r\n                        <Slider value={innerLiquidityPercentage} onChange={setInnerLiquidityPercentage} />\r\n                      </Flex>\r\n                      <Flex justifyContent=\"space-around\">\r\n                        <Button\r\n                          variant=\"tertiary\"\r\n                          scale=\"sm\"\r\n                          onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '25')}\r\n                        >\r\n                          25%\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"tertiary\"\r\n                          scale=\"sm\"\r\n                          onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '50')}\r\n                        >\r\n                          50%\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"tertiary\"\r\n                          scale=\"sm\"\r\n                          onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '75')}\r\n                        >\r\n                          75%\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"tertiary\"\r\n                          scale=\"sm\"\r\n                          onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\r\n                        >\r\n                          {TranslateString(166, 'Max')}\r\n                        </Button>\r\n                      </Flex>\r\n                    </>\r\n                  )}\r\n                </AutoColumn>\r\n              </OutlineCard>\r\n            </Body>\r\n            {!showDetailed && (\r\n              <>\r\n                <ColumnCenter>\r\n                  <ArrowDown size=\"16\" color={theme.colors.textSubtle} />\r\n                </ColumnCenter>\r\n                <Body>\r\n                  <OutlineCard>\r\n                    <AutoColumn gap=\"10px\">\r\n                      <RowBetween>\r\n                        <Text fontSize=\"24px\">{formattedAmounts[Field.CURRENCY_A] || '-'}</Text>\r\n                        <RowFixed>\r\n                          <CurrencyLogo currency={currencyA} style={{ marginRight: '12px' }} />\r\n                          <Text fontSize=\"24px\" id=\"remove-liquidity-tokena-symbol\">\r\n                            {currencyA?.symbol}\r\n                          </Text>\r\n                        </RowFixed>\r\n                      </RowBetween>\r\n                      <RowBetween>\r\n                        <Text fontSize=\"24px\">{formattedAmounts[Field.CURRENCY_B] || '-'}</Text>\r\n                        <RowFixed>\r\n                          <CurrencyLogo currency={currencyB} style={{ marginRight: '12px' }} />\r\n                          <Text fontSize=\"24px\" id=\"remove-liquidity-tokenb-symbol\">\r\n                            {currencyB?.symbol}\r\n                          </Text>\r\n                        </RowFixed>\r\n                      </RowBetween>\r\n                      {chainId && (oneCurrencyIsWETH || oneCurrencyIsETH) ? (\r\n                        <RowBetween style={{ justifyContent: 'flex-end' }}>\r\n                          {oneCurrencyIsETH ? (\r\n                            <StyledInternalLink\r\n                              to={`/remove/${currencyA === ETHER ? WETH[chainId].address : currencyIdA}/${\r\n                                currencyB === ETHER ? WETH[chainId].address : currencyIdB\r\n                              }`}\r\n                            >\r\n                              {TranslateString(1188, 'Receive WBNB')}\r\n                            </StyledInternalLink>\r\n                          ) : oneCurrencyIsWETH ? (\r\n                            <StyledInternalLink\r\n                              to={`/remove/${\r\n                                currencyA && currencyEquals(currencyA, WETH[chainId]) ? 'BNB' : currencyIdA\r\n                              }/${currencyB && currencyEquals(currencyB, WETH[chainId]) ? 'BNB' : currencyIdB}`}\r\n                            >\r\n                              {TranslateString(1190, 'Receive BNB')}\r\n                            </StyledInternalLink>\r\n                          ) : null}\r\n                        </RowBetween>\r\n                      ) : null}\r\n                    </AutoColumn>\r\n                  </OutlineCard>\r\n                </Body>\r\n              </>\r\n            )}\r\n            <Body style={{ paddingBottom: '24px' }}>\r\n              {showDetailed && (\r\n                <>\r\n                  <CurrencyInputPanel\r\n                    value={formattedAmounts[Field.LIQUIDITY]}\r\n                    onUserInput={onLiquidityInput}\r\n                    onMax={() => {\r\n                      onUserInput(Field.LIQUIDITY_PERCENT, '100')\r\n                    }}\r\n                    showMaxButton={!atMaxAmount}\r\n                    disableCurrencySelect\r\n                    currency={pair?.liquidityToken}\r\n                    pair={pair}\r\n                    id=\"liquidity-amount\"\r\n                  />\r\n                  <ColumnCenter>\r\n                    <ArrowDown size=\"16\" color={theme.colors.textSubtle} />\r\n                  </ColumnCenter>\r\n                  <CurrencyInputPanel\r\n                    hideBalance\r\n                    value={formattedAmounts[Field.CURRENCY_A]}\r\n                    onUserInput={onCurrencyAInput}\r\n                    onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\r\n                    showMaxButton={!atMaxAmount}\r\n                    currency={currencyA}\r\n                    label=\"Output\"\r\n                    onCurrencySelect={handleSelectCurrencyA}\r\n                    id=\"remove-liquidity-tokena\"\r\n                  />\r\n                  <ColumnCenter>\r\n                    <Plus size=\"16\" color={theme.colors.textSubtle} />\r\n                  </ColumnCenter>\r\n                  <CurrencyInputPanel\r\n                    hideBalance\r\n                    value={formattedAmounts[Field.CURRENCY_B]}\r\n                    onUserInput={onCurrencyBInput}\r\n                    onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\r\n                    showMaxButton={!atMaxAmount}\r\n                    currency={currencyB}\r\n                    label=\"Output\"\r\n                    onCurrencySelect={handleSelectCurrencyB}\r\n                    id=\"remove-liquidity-tokenb\"\r\n                  />\r\n                </>\r\n              )}\r\n              {pair && (\r\n                <div style={{ padding: '24px' }}>\r\n                  <Flex justifyContent=\"space-between\" mb=\"8px\">\r\n                    Price:\r\n                    <div>\r\n                      1 {currencyA?.symbol} = {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\r\n                    </div>\r\n                  </Flex>\r\n                  <Flex justifyContent=\"space-between\">\r\n                    <div />\r\n                    <div>\r\n                      1 {currencyB?.symbol} = {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\r\n                    </div>\r\n                  </Flex>\r\n                </div>\r\n              )}\r\n              <div style={{ position: 'relative' }}>\r\n                {!account ? (\r\n                  <ConnectWalletButton width=\"100%\" />\r\n                ) : (\r\n                  <RowBetween>\r\n                    <Button\r\n                      onClick={onAttemptToApprove}\r\n                      variant={approval === ApprovalState.APPROVED || signatureData !== null ? 'success' : 'primary'}\r\n                      disabled={approval !== ApprovalState.NOT_APPROVED || signatureData !== null}\r\n                      mr=\"8px\"\r\n                    >\r\n                      {approval === ApprovalState.PENDING ? (\r\n                        <Dots>Approving</Dots>\r\n                      ) : approval === ApprovalState.APPROVED || signatureData !== null ? (\r\n                        'Approved'\r\n                      ) : (\r\n                        'Approve'\r\n                      )}\r\n                    </Button>\r\n                    <Button\r\n                      onClick={() => {\r\n                        setShowConfirm(true)\r\n                      }}\r\n                      disabled={!isValid || (signatureData === null && approval !== ApprovalState.APPROVED)}\r\n                      variant={\r\n                        !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\r\n                          ? 'danger'\r\n                          : 'primary'\r\n                      }\r\n                    >\r\n                      {error || 'Remove'}\r\n                    </Button>\r\n                  </RowBetween>\r\n                )}\r\n              </div>\r\n            </Body>\r\n          </AutoColumn>\r\n        </Wrapper>\r\n      </AppBody>\r\n\r\n      {pair ? (\r\n        <AutoColumn style={{ minWidth: '20rem', marginTop: '1rem' }}>\r\n          <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\r\n        </AutoColumn>\r\n      ) : null}\r\n    </Container>\r\n  )\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\constants\\abis\\erc20.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Popups\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\PoolFinder\\index.tsx",["816"],"import { Currency, ETHER, JSBI, TokenAmount } from '@appleswap/sdk'\r\nimport React, { useCallback, useEffect, useState } from 'react'\r\nimport { Button, ChevronDownIcon, AddIcon, CardBody, Text } from '@pancakeswap-libs/uikit'\r\nimport CardNav from 'components/CardNav'\r\nimport { LightCard } from 'components/Card'\r\nimport { AutoColumn, ColumnCenter } from 'components/Column'\r\nimport CurrencyLogo from 'components/CurrencyLogo'\r\nimport { FindPoolTabs } from 'components/NavigationTabs'\r\nimport { MinimalPositionCard } from 'components/PositionCard'\r\nimport CurrencySearchModal from 'components/SearchModal/CurrencySearchModal'\r\nimport { PairState, usePair } from 'data/Reserves'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { usePairAdder } from 'state/user/hooks'\r\nimport { useTokenBalance } from 'state/wallet/hooks'\r\nimport { StyledInternalLink } from 'components/Shared'\r\nimport Container from 'components/Container'\r\nimport { currencyId } from 'utils/currencyId'\r\nimport useI18n from 'hooks/useI18n'\r\nimport AppBody from '../AppBody'\r\nimport { Dots } from '../Pool/styleds'\r\n\r\nenum Fields {\r\n  TOKEN0 = 0,\r\n  TOKEN1 = 1,\r\n}\r\n\r\nexport default function PoolFinder() {\r\n  const { account } = useActiveWeb3React()\r\n\r\n  const [showSearch, setShowSearch] = useState<boolean>(false)\r\n  const [activeField, setActiveField] = useState<number>(Fields.TOKEN1)\r\n\r\n  const [currency0, setCurrency0] = useState<Currency | null>(ETHER)\r\n  const [currency1, setCurrency1] = useState<Currency | null>(null)\r\n\r\n  const [pairState, pair] = usePair(currency0 ?? undefined, currency1 ?? undefined)\r\n  const addPair = usePairAdder()\r\n\r\n  const TranslateString = useI18n()\r\n  useEffect(() => {\r\n    if (pair) {\r\n      addPair(pair)\r\n    }\r\n  }, [pair, addPair])\r\n\r\n  const validPairNoLiquidity: boolean =\r\n    pairState === PairState.NOT_EXISTS ||\r\n    Boolean(\r\n      pairState === PairState.EXISTS &&\r\n        pair &&\r\n        JSBI.equal(pair.reserve0.raw, JSBI.BigInt(0)) &&\r\n        JSBI.equal(pair.reserve1.raw, JSBI.BigInt(0))\r\n    )\r\n\r\n  const position: TokenAmount | undefined = useTokenBalance(account ?? undefined, pair?.liquidityToken)\r\n  const hasPosition = Boolean(position && JSBI.greaterThan(position.raw, JSBI.BigInt(0)))\r\n\r\n  const handleCurrencySelect = useCallback(\r\n    (currency: Currency) => {\r\n      if (activeField === Fields.TOKEN0) {\r\n        setCurrency0(currency)\r\n      } else {\r\n        setCurrency1(currency)\r\n      }\r\n    },\r\n    [activeField]\r\n  )\r\n\r\n  const handleSearchDismiss = useCallback(() => {\r\n    setShowSearch(false)\r\n  }, [setShowSearch])\r\n\r\n  const prerequisiteMessage = (\r\n    <LightCard padding=\"45px 10px\">\r\n      <Text style={{ textAlign: 'center' }}>\r\n        {!account\r\n          ? TranslateString(1174, 'Connect to a wallet to find pools')\r\n          : TranslateString(208, 'Select a token to find your liquidity.')}\r\n      </Text>\r\n    </LightCard>\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <CardNav activeIndex={1} />\r\n      <AppBody>\r\n        <FindPoolTabs />\r\n        <CardBody>\r\n          <AutoColumn gap=\"md\">\r\n            <Button\r\n              onClick={() => {\r\n                setShowSearch(true)\r\n                setActiveField(Fields.TOKEN0)\r\n              }}\r\n              startIcon={currency0 ? <CurrencyLogo currency={currency0} style={{ marginRight: '.5rem' }} /> : null}\r\n              endIcon={<ChevronDownIcon width=\"24px\" color=\"white\" />}\r\n              width=\"100%\"\r\n            >\r\n              {currency0 ? currency0.symbol : TranslateString(82, 'Select a Token')}\r\n            </Button>\r\n\r\n            <ColumnCenter>\r\n              <AddIcon color=\"textSubtle\" />\r\n            </ColumnCenter>\r\n\r\n            <Button\r\n              onClick={() => {\r\n                setShowSearch(true)\r\n                setActiveField(Fields.TOKEN1)\r\n              }}\r\n              startIcon={currency1 ? <CurrencyLogo currency={currency1} style={{ marginRight: '.5rem' }} /> : null}\r\n              endIcon={<ChevronDownIcon width=\"24px\" color=\"white\" />}\r\n              width=\"100%\"\r\n            >\r\n              {currency1 ? currency1.symbol : TranslateString(82, 'Select a Token')}\r\n            </Button>\r\n\r\n            {hasPosition && (\r\n              <ColumnCenter\r\n                style={{ justifyItems: 'center', backgroundColor: '', padding: '12px 0px', borderRadius: '12px' }}\r\n              >\r\n                <Text style={{ textAlign: 'center' }}>{TranslateString(210, 'Pool found!')}</Text>\r\n              </ColumnCenter>\r\n            )}\r\n\r\n            {currency0 && currency1 ? (\r\n              pairState === PairState.EXISTS ? (\r\n                hasPosition && pair ? (\r\n                  <MinimalPositionCard pair={pair} />\r\n                ) : (\r\n                  <LightCard padding=\"45px 10px\">\r\n                    <AutoColumn gap=\"sm\" justify=\"center\">\r\n                      <Text style={{ textAlign: 'center' }}>\r\n                        {TranslateString(212, 'You don’t have liquidity in this pool yet.')}\r\n                      </Text>\r\n                      <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\r\n                        <Text style={{ textAlign: 'center' }}>{TranslateString(168, 'Add Liquidity')}</Text>\r\n                      </StyledInternalLink>\r\n                    </AutoColumn>\r\n                  </LightCard>\r\n                )\r\n              ) : validPairNoLiquidity ? (\r\n                <LightCard padding=\"45px 10px\">\r\n                  <AutoColumn gap=\"sm\" justify=\"center\">\r\n                    <Text style={{ textAlign: 'center' }}>{TranslateString(214, 'No pool found.')}</Text>\r\n                    <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\r\n                      Create pool.\r\n                    </StyledInternalLink>\r\n                  </AutoColumn>\r\n                </LightCard>\r\n              ) : pairState === PairState.INVALID ? (\r\n                <LightCard padding=\"45px 10px\">\r\n                  <AutoColumn gap=\"sm\" justify=\"center\">\r\n                    <Text style={{ textAlign: 'center' }}>{TranslateString(136, 'Invalid pair.')}</Text>\r\n                  </AutoColumn>\r\n                </LightCard>\r\n              ) : pairState === PairState.LOADING ? (\r\n                <LightCard padding=\"45px 10px\">\r\n                  <AutoColumn gap=\"sm\" justify=\"center\">\r\n                    <Text style={{ textAlign: 'center' }}>\r\n                      Loading\r\n                      <Dots />\r\n                    </Text>\r\n                  </AutoColumn>\r\n                </LightCard>\r\n              ) : null\r\n            ) : (\r\n              prerequisiteMessage\r\n            )}\r\n          </AutoColumn>\r\n\r\n          <CurrencySearchModal\r\n            isOpen={showSearch}\r\n            onCurrencySelect={handleCurrencySelect}\r\n            onDismiss={handleSearchDismiss}\r\n            showCommonBases\r\n            selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\r\n          />\r\n        </CardBody>\r\n      </AppBody>\r\n    </Container>\r\n  )\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Web3ReactManager\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\Pool\\index.tsx",["817"],"import React, { useContext, useMemo } from 'react'\r\nimport { ThemeContext } from 'styled-components'\r\nimport { Pair } from '@appleswap/sdk'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, CardBody, Text } from '@pancakeswap-libs/uikit'\r\nimport CardNav from 'components/CardNav'\r\nimport Question from 'components/QuestionHelper'\r\nimport FullPositionCard from 'components/PositionCard'\r\nimport { useTokenBalancesWithLoadingIndicator } from 'state/wallet/hooks'\r\nimport { StyledInternalLink } from 'components/Shared'\r\nimport { LightCard } from 'components/Card'\r\nimport { RowBetween } from 'components/Row'\r\nimport { AutoColumn } from 'components/Column'\r\nimport Container from 'components/Container'\r\n\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { usePairs } from 'data/Reserves'\r\nimport { toV2LiquidityToken, useTrackedTokenPairs } from 'state/user/hooks'\r\nimport { Dots } from 'components/swap/styleds'\r\nimport useI18n from 'hooks/useI18n'\r\nimport PageHeader from 'components/PageHeader'\r\nimport AppBody from '../AppBody'\r\n\r\nexport default function Pool() {\r\n  const theme = useContext(ThemeContext)\r\n  const { account } = useActiveWeb3React()\r\n  const TranslateString = useI18n()\r\n\r\n  // fetch the user's balances of all tracked V2 LP tokens\r\n  const trackedTokenPairs = useTrackedTokenPairs()\r\n  const tokenPairsWithLiquidityTokens = useMemo(\r\n    () => trackedTokenPairs.map((tokens) => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\r\n    [trackedTokenPairs]\r\n  )\r\n  const liquidityTokens = useMemo(() => tokenPairsWithLiquidityTokens.map((tpwlt) => tpwlt.liquidityToken), [\r\n    tokenPairsWithLiquidityTokens,\r\n  ])\r\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\r\n    account ?? undefined,\r\n    liquidityTokens\r\n  )\r\n\r\n  // fetch the reserves for all V2 pools in which the user has a balance\r\n  const liquidityTokensWithBalances = useMemo(\r\n    () =>\r\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\r\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0')\r\n      ),\r\n    [tokenPairsWithLiquidityTokens, v2PairsBalances]\r\n  )\r\n\r\n  const v2Pairs = usePairs(liquidityTokensWithBalances.map(({ tokens }) => tokens))\r\n  const v2IsLoading =\r\n    fetchingV2PairBalances || v2Pairs?.length < liquidityTokensWithBalances.length || v2Pairs?.some((V2Pair) => !V2Pair)\r\n\r\n  const allV2PairsWithLiquidity = v2Pairs.map(([, pair]) => pair).filter((v2Pair): v2Pair is Pair => Boolean(v2Pair))\r\n\r\n  return (\r\n    <Container>\r\n      <CardNav activeIndex={1} />\r\n      <AppBody>\r\n        <PageHeader\r\n          title={TranslateString(262, 'Liquidity')}\r\n          description={TranslateString(1168, 'Add liquidity to receive LP tokens')}\r\n        >\r\n           <Button id=\"join-pool-button\" as={Link} to=\"/add/BNB\" mb=\"16px\">\r\n            {TranslateString(168, 'Add Liquidity')}\r\n          </Button>\r\n        </PageHeader>\r\n        <AutoColumn gap=\"lg\" justify=\"center\">\r\n          <CardBody>\r\n            <AutoColumn gap=\"12px\" style={{ width: '100%' }}>\r\n              <RowBetween padding=\"0 8px\">\r\n                <Text color={theme.colors.text}>{TranslateString(107, 'Your Liquidity')}</Text>\r\n                <Question\r\n                  text={TranslateString(\r\n                    1170,\r\n                    'When you add liquidity, you are given pool tokens that represent your share. If you don’t see a pool you joined in this list, try importing a pool below.'\r\n                  )}\r\n                />\r\n              </RowBetween>\r\n\r\n              {!account ? (\r\n                <LightCard padding=\"40px\">\r\n                  <Text color=\"textDisabled\" textAlign=\"center\">\r\n                    {TranslateString(156, 'Connect to a wallet to view your liquidity.')}\r\n                  </Text>\r\n                </LightCard>\r\n              ) : v2IsLoading ? (\r\n                <LightCard padding=\"40px\">\r\n                  <Text color=\"textDisabled\" textAlign=\"center\">\r\n                    <Dots>Loading</Dots>\r\n                  </Text>\r\n                </LightCard>\r\n              ) : allV2PairsWithLiquidity?.length > 0 ? (\r\n                <>\r\n                  {allV2PairsWithLiquidity.map((v2Pair) => (\r\n                    <FullPositionCard key={v2Pair.liquidityToken.address} pair={v2Pair} />\r\n                  ))}\r\n                </>\r\n              ) : (\r\n                <LightCard padding=\"40px\">\r\n                  <Text color=\"textDisabled\" textAlign=\"center\">\r\n                    {TranslateString(104, 'No liquidity found.')}\r\n                  </Text>\r\n                </LightCard>\r\n              )}\r\n\r\n              <div>\r\n                <Text fontSize=\"14px\" style={{ padding: '.5rem 0 .5rem 0' }}>\r\n                  {TranslateString(106, \"Don't see a pool you joined?\")}{' '}\r\n                  <StyledInternalLink id=\"import-pool-link\" to=\"/find\">\r\n                    {TranslateString(108, 'Import it.')}\r\n                  </StyledInternalLink>\r\n                </Text>\r\n                <Text fontSize=\"14px\" style={{ padding: '.5rem 0 .5rem 0' }}>\r\n                  {TranslateString(1172, 'Or, if you staked your LP tokens in a farm, unstake them to see them here.')}\r\n                </Text>\r\n              </div>\r\n            </AutoColumn>\r\n          </CardBody>\r\n        </AutoColumn>\r\n      </AppBody>\r\n    </Container>\r\n  )\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Menu\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\Migration\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\UseV2ExchangeModal\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\application\\reducer.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\transactions\\reducer.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\lists\\reducer.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\multicall\\reducer.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\theme.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\global\\actions.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\user\\reducer.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\swap\\reducer.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\mint\\reducer.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\burn\\reducer.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\index.ts",["818"],"import { Contract } from '@ethersproject/contracts'\r\nimport { getAddress } from '@ethersproject/address'\r\nimport { AddressZero } from '@ethersproject/constants'\r\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { abi as IUniswapV2Router02ABI } from '@uniswap/v2-periphery/build/IUniswapV2Router02.json'\r\nimport { ChainId, JSBI, Percent, Token, CurrencyAmount, Currency, ETHER } from '@appleswap/sdk'\r\nimport { ROUTER_ADDRESS } from '../constants'\r\nimport { TokenAddressMap } from '../state/lists/hooks'\r\n\r\n// returns the checksummed address if the address is valid, otherwise returns false\r\nexport function isAddress(value: any): string | false {\r\n  try {\r\n    return getAddress(value)\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\nconst BSCSCAN_PREFIXES: { [chainId in ChainId]: string } = {\r\n  56: '',\r\n  97: 'testnet.'\r\n}\r\n\r\nexport function getBscScanLink(chainId: ChainId, data: string, type: 'transaction' | 'token' | 'address'): string {\r\n  const prefix = `https://${BSCSCAN_PREFIXES[chainId] || BSCSCAN_PREFIXES[ChainId.MAINNET]}bscscan.com`\r\n\r\n  switch (type) {\r\n    case 'transaction': {\r\n      return `${prefix}/tx/${data}`\r\n    }\r\n    case 'token': {\r\n      return `${prefix}/token/${data}`\r\n    }\r\n    case 'address':\r\n    default: {\r\n      return `${prefix}/address/${data}`\r\n    }\r\n  }\r\n}\r\n\r\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\r\nexport function shortenAddress(address: string, chars = 4): string {\r\n  const parsed = isAddress(address)\r\n  if (!parsed) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`)\r\n  }\r\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\r\n}\r\n\r\n// add 10%\r\nexport function calculateGasMargin(value: BigNumber): BigNumber {\r\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\r\n}\r\n\r\n// converts a basis points value to a sdk percent\r\nexport function basisPointsToPercent(num: number): Percent {\r\n  return new Percent(JSBI.BigInt(Math.floor(num)), JSBI.BigInt(10000))\r\n}\r\n\r\nexport function calculateSlippageAmount(value: CurrencyAmount, slippage: number): [JSBI, JSBI] {\r\n  if (slippage < 0 || slippage > 10000) {\r\n    throw Error(`Unexpected slippage value: ${slippage}`)\r\n  }\r\n  return [\r\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)),\r\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000))\r\n  ]\r\n}\r\n\r\n// account is not optional\r\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\r\n  return library.getSigner(account).connectUnchecked()\r\n}\r\n\r\n// account is optional\r\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\r\n  return account ? getSigner(library, account) : library\r\n}\r\n\r\n// account is optional\r\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\r\n  if (!isAddress(address) || address === AddressZero) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`)\r\n  }\r\n\r\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\r\n}\r\n\r\n// account is optional\r\nexport function getRouterContract(_: number, library: Web3Provider, account?: string): Contract {\r\n  return getContract(ROUTER_ADDRESS, IUniswapV2Router02ABI, library, account)\r\n}\r\n\r\nexport function escapeRegExp(string: string): string {\r\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\r\n}\r\n\r\nexport function isTokenOnList(defaultTokens: TokenAddressMap, currency?: Currency): boolean {\r\n  if (currency === ETHER) return true\r\n  return Boolean(currency instanceof Token && defaultTokens[currency.chainId]?.[currency.address])\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\constants\\lists.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\connectors\\index.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\constants\\multicall\\index.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useToast.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\burn\\actions.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Menu\\config.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\VersionBar\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\AddLiquidity\\PoolPriceBar.tsx",["819"],"import React from 'react'\r\nimport { Currency, Percent, Price } from '@appleswap/sdk'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { AutoColumn } from '../../components/Column'\r\nimport { AutoRow } from '../../components/Row'\r\nimport { ONE_BIPS } from '../../constants'\r\nimport { Field } from '../../state/mint/actions'\r\n\r\nexport function PoolPriceBar({\r\n  currencies,\r\n  noLiquidity,\r\n  poolTokenPercentage,\r\n  price,\r\n}: {\r\n  currencies: { [field in Field]?: Currency }\r\n  noLiquidity?: boolean\r\n  poolTokenPercentage?: Percent\r\n  price?: Price\r\n}) {\r\n  return (\r\n    <AutoColumn gap=\"md\">\r\n      <AutoRow justify=\"space-around\" gap=\"4px\">\r\n        <AutoColumn justify=\"center\">\r\n          <Text>{price?.toSignificant(6) ?? '-'}</Text>\r\n          <Text fontSize=\"14px\" color=\"textSubtle\" pt={1}>\r\n            {currencies[Field.CURRENCY_B]?.symbol} per {currencies[Field.CURRENCY_A]?.symbol}\r\n          </Text>\r\n        </AutoColumn>\r\n        <AutoColumn justify=\"center\">\r\n          <Text>{price?.invert()?.toSignificant(6) ?? '-'}</Text>\r\n          <Text fontSize=\"14px\" color=\"textSubtle\" pt={1}>\r\n            {currencies[Field.CURRENCY_A]?.symbol} per {currencies[Field.CURRENCY_B]?.symbol}\r\n          </Text>\r\n        </AutoColumn>\r\n        <AutoColumn justify=\"center\">\r\n          <Text>\r\n            {noLiquidity && price\r\n              ? '100'\r\n              : (poolTokenPercentage?.lessThan(ONE_BIPS) ? '<0.01' : poolTokenPercentage?.toFixed(2)) ?? '0'}\r\n            %\r\n          </Text>\r\n          <Text fontSize=\"14px\" color=\"textSubtle\" pt={1}>\r\n            Share of Pool\r\n          </Text>\r\n        </AutoColumn>\r\n      </AutoRow>\r\n    </AutoColumn>\r\n  )\r\n}\r\n\r\nexport default PoolPriceBar\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\AppBody.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\user\\hooks.tsx",["820"],"import { ChainId, Pair, Token } from '@appleswap/sdk'\r\nimport flatMap from 'lodash.flatmap'\r\nimport { useCallback, useMemo } from 'react'\r\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux'\r\nimport { BASES_TO_TRACK_LIQUIDITY_FOR, PINNED_PAIRS } from '../../constants'\r\n\r\nimport { useActiveWeb3React } from '../../hooks'\r\n// eslint-disable-next-line import/no-cycle\r\nimport { useAllTokens } from '../../hooks/Tokens'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport {\r\n  addSerializedPair,\r\n  addSerializedToken,\r\n  removeSerializedToken,\r\n  SerializedPair,\r\n  SerializedToken,\r\n  updateUserDarkMode,\r\n  updateUserDeadline,\r\n  updateUserExpertMode,\r\n  updateUserSlippageTolerance,\r\n  muteAudio,\r\n  unmuteAudio,\r\n} from './actions'\r\nimport { setThemeCache } from '../../utils/theme'\r\n\r\nfunction serializeToken(token: Token): SerializedToken {\r\n  return {\r\n    chainId: token.chainId,\r\n    address: token.address,\r\n    decimals: token.decimals,\r\n    symbol: token.symbol,\r\n    name: token.name,\r\n  }\r\n}\r\n\r\nfunction deserializeToken(serializedToken: SerializedToken): Token {\r\n  return new Token(\r\n    serializedToken.chainId,\r\n    serializedToken.address,\r\n    serializedToken.decimals,\r\n    serializedToken.symbol,\r\n    serializedToken.name\r\n  )\r\n}\r\n\r\nexport function useIsDarkMode(): boolean {\r\n  const { userDarkMode, matchesDarkMode } = useSelector<\r\n    AppState,\r\n    { userDarkMode: boolean | null; matchesDarkMode: boolean }\r\n  >(\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow\r\n    ({ user: { matchesDarkMode, userDarkMode } }) => ({\r\n      userDarkMode,\r\n      matchesDarkMode,\r\n    }),\r\n    shallowEqual\r\n  )\r\n  return userDarkMode === null ? matchesDarkMode : userDarkMode\r\n}\r\n\r\nexport function useDarkModeManager(): [boolean, () => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const { userDarkMode } = useSelector<AppState, { userDarkMode: boolean | null }>(\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow\r\n    ({ user: { userDarkMode } }) => ({\r\n      userDarkMode,\r\n    }),\r\n    shallowEqual\r\n  )\r\n  const darkMode = useIsDarkMode()\r\n\r\n  const toggleSetDarkMode = useCallback(() => {\r\n    setThemeCache(!userDarkMode)\r\n    dispatch(updateUserDarkMode({ userDarkMode: !userDarkMode }))\r\n  }, [userDarkMode, dispatch])\r\n\r\n  return [darkMode, toggleSetDarkMode]\r\n}\r\n\r\nexport function useAudioModeManager(): [boolean, () => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const audioPlay = useSelector<AppState, AppState['user']['audioPlay']>((state) => state.user.audioPlay)\r\n  const toggleSetAudioMode = useCallback(() => {\r\n    if (audioPlay) {\r\n      dispatch(muteAudio())\r\n    } else {\r\n      dispatch(unmuteAudio())\r\n    }\r\n  }, [audioPlay, dispatch])\r\n\r\n  return [audioPlay, toggleSetAudioMode]\r\n}\r\n\r\nexport function useIsExpertMode(): boolean {\r\n  return useSelector<AppState, AppState['user']['userExpertMode']>((state) => state.user.userExpertMode)\r\n}\r\n\r\nexport function useExpertModeManager(): [boolean, () => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const expertMode = useIsExpertMode()\r\n\r\n  const toggleSetExpertMode = useCallback(() => {\r\n    dispatch(updateUserExpertMode({ userExpertMode: !expertMode }))\r\n  }, [expertMode, dispatch])\r\n\r\n  return [expertMode, toggleSetExpertMode]\r\n}\r\n\r\nexport function useUserSlippageTolerance(): [number, (slippage: number) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userSlippageTolerance = useSelector<AppState, AppState['user']['userSlippageTolerance']>((state) => {\r\n    return state.user.userSlippageTolerance\r\n  })\r\n\r\n  const setUserSlippageTolerance = useCallback(\r\n    (slippageTolerance: number) => {\r\n      dispatch(updateUserSlippageTolerance({ userSlippageTolerance: slippageTolerance }))\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  return [userSlippageTolerance, setUserSlippageTolerance]\r\n}\r\n\r\nexport function useUserDeadline(): [number, (slippage: number) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userDeadline = useSelector<AppState, AppState['user']['userDeadline']>((state) => {\r\n    return state.user.userDeadline\r\n  })\r\n\r\n  const setUserDeadline = useCallback(\r\n    (deadline: number) => {\r\n      dispatch(updateUserDeadline({ userDeadline: deadline }))\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  return [userDeadline, setUserDeadline]\r\n}\r\n\r\nexport function useAddUserToken(): (token: Token) => void {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  return useCallback(\r\n    (token: Token) => {\r\n      dispatch(addSerializedToken({ serializedToken: serializeToken(token) }))\r\n    },\r\n    [dispatch]\r\n  )\r\n}\r\n\r\nexport function useRemoveUserAddedToken(): (chainId: number, address: string) => void {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  return useCallback(\r\n    (chainId: number, address: string) => {\r\n      dispatch(removeSerializedToken({ chainId, address }))\r\n    },\r\n    [dispatch]\r\n  )\r\n}\r\n\r\nexport function useUserAddedTokens(): Token[] {\r\n  const { chainId } = useActiveWeb3React()\r\n  const serializedTokensMap = useSelector<AppState, AppState['user']['tokens']>(({ user: { tokens } }) => tokens)\r\n\r\n  return useMemo(() => {\r\n    if (!chainId) return []\r\n    return Object.values(serializedTokensMap[chainId as ChainId] ?? {}).map(deserializeToken)\r\n  }, [serializedTokensMap, chainId])\r\n}\r\n\r\nfunction serializePair(pair: Pair): SerializedPair {\r\n  return {\r\n    token0: serializeToken(pair.token0),\r\n    token1: serializeToken(pair.token1),\r\n  }\r\n}\r\n\r\nexport function usePairAdder(): (pair: Pair) => void {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  return useCallback(\r\n    (pair: Pair) => {\r\n      dispatch(addSerializedPair({ serializedPair: serializePair(pair) }))\r\n    },\r\n    [dispatch]\r\n  )\r\n}\r\n\r\n/**\r\n * Given two tokens return the liquidity token that represents its liquidity shares\r\n * @param tokenA one of the two tokens\r\n * @param tokenB the other token\r\n */\r\nexport function toV2LiquidityToken([tokenA, tokenB]: [Token, Token]): Token {\r\n  return new Token(tokenA.chainId, Pair.getAddress(tokenA, tokenB), 18, 'APPLE LP', 'APPLE LPs')\r\n}\r\n\r\n/**\r\n * Returns all the pairs of tokens that are tracked by the user for the current chain ID.\r\n */\r\nexport function useTrackedTokenPairs(): [Token, Token][] {\r\n  const { chainId } = useActiveWeb3React()\r\n  const tokens = useAllTokens()\r\n\r\n  // pinned pairs\r\n  const pinnedPairs = useMemo(() => (chainId ? PINNED_PAIRS[chainId] ?? [] : []), [chainId])\r\n\r\n  // pairs for every token against every base\r\n  const generatedPairs: [Token, Token][] = useMemo(\r\n    () =>\r\n      chainId\r\n        ? flatMap(Object.keys(tokens), (tokenAddress) => {\r\n            const token = tokens[tokenAddress]\r\n            // for each token on the current chain,\r\n            return (\r\n              // loop though all bases on the current chain\r\n              (BASES_TO_TRACK_LIQUIDITY_FOR[chainId] ?? [])\r\n                // to construct pairs of the given token with each base\r\n                .map((base) => {\r\n                  if (base.address === token.address) {\r\n                    return null\r\n                  }\r\n                  return [base, token]\r\n                })\r\n                .filter((p): p is [Token, Token] => p !== null)\r\n            )\r\n          })\r\n        : [],\r\n    [tokens, chainId]\r\n  )\r\n\r\n  // pairs saved by users\r\n  const savedSerializedPairs = useSelector<AppState, AppState['user']['pairs']>(({ user: { pairs } }) => pairs)\r\n\r\n  const userPairs: [Token, Token][] = useMemo(() => {\r\n    if (!chainId || !savedSerializedPairs) return []\r\n    const forChain = savedSerializedPairs[chainId]\r\n    if (!forChain) return []\r\n\r\n    return Object.keys(forChain).map((pairId) => {\r\n      return [deserializeToken(forChain[pairId].token0), deserializeToken(forChain[pairId].token1)]\r\n    })\r\n  }, [savedSerializedPairs, chainId])\r\n\r\n  const combinedList = useMemo(() => userPairs.concat(generatedPairs).concat(pinnedPairs), [\r\n    generatedPairs,\r\n    pinnedPairs,\r\n    userPairs,\r\n  ])\r\n\r\n  return useMemo(() => {\r\n    // dedupes pairs of tokens in the combined list\r\n    const keyed = combinedList.reduce<{ [key: string]: [Token, Token] }>((memo, [tokenA, tokenB]) => {\r\n      const sorted = tokenA.sortsBefore(tokenB)\r\n      const key = sorted ? `${tokenA.address}:${tokenB.address}` : `${tokenB.address}:${tokenA.address}`\r\n      if (memo[key]) return memo\r\n      memo[key] = sorted ? [tokenA, tokenB] : [tokenB, tokenA]\r\n      return memo\r\n    }, {})\r\n\r\n    return Object.keys(keyed).map((key) => keyed[key])\r\n  }, [combinedList])\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\Migration\\SecondCard.tsx",["821"],"import React, { useMemo } from 'react'\r\nimport { Card, CardHeader, CardBody, Text, Box, Button, Flex, ArrowDownIcon, Link } from '@pancakeswap-libs/uikit'\r\nimport { Pair } from '@appleswap/sdk'\r\nimport { useTokenBalancesWithLoadingIndicator } from 'state/wallet/hooks'\r\nimport { toV2LiquidityToken, useTrackedTokenPairs } from 'state/user/hooks'\r\nimport { StyledInternalLink } from 'components/Shared'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { usePairs } from 'data/Reserves'\r\nimport FullPositionCard from 'components/PositionCard'\r\n\r\nconst ArrowSeparator = () => (\r\n  <Flex justifyContent=\"center\" my=\"24px\">\r\n    <ArrowDownIcon color=\"textSubtle\" width=\"24px\" />\r\n  </Flex>\r\n)\r\n\r\nconst SecondCard = () => {\r\n  const { account } = useActiveWeb3React()\r\n\r\n  // fetch the user's balances of all tracked V2 LP tokens\r\n  const trackedTokenPairs = useTrackedTokenPairs()\r\n  const tokenPairsWithLiquidityTokens = useMemo(\r\n    () => trackedTokenPairs.map((tokens) => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\r\n    [trackedTokenPairs]\r\n  )\r\n  const liquidityTokens = useMemo(() => tokenPairsWithLiquidityTokens.map((tpwlt) => tpwlt.liquidityToken), [\r\n    tokenPairsWithLiquidityTokens,\r\n  ])\r\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\r\n    account ?? undefined,\r\n    liquidityTokens\r\n  )\r\n\r\n  // fetch the reserves for all V2 pools in which the user has a balance\r\n  const liquidityTokensWithBalances = useMemo(\r\n    () =>\r\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\r\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0')\r\n      ),\r\n    [tokenPairsWithLiquidityTokens, v2PairsBalances]\r\n  )\r\n\r\n  const v2Pairs = usePairs(liquidityTokensWithBalances.map(({ tokens }) => tokens))\r\n  const v2IsLoading =\r\n    fetchingV2PairBalances || v2Pairs?.length < liquidityTokensWithBalances.length || v2Pairs?.some((V2Pair) => !V2Pair)\r\n\r\n  const allV2PairsWithLiquidity = v2Pairs.map(([, pair]) => pair).filter((v2Pair): v2Pair is Pair => Boolean(v2Pair))\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <Text bold>Remove Liquidity</Text>\r\n        <Text small color=\"textSubtle\">\r\n          Unstake your old LP tokens from the old liquidity pools\r\n        </Text>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <Text bold>V1 LP Tokens in wallet</Text>\r\n        <Card>\r\n          {v2IsLoading ? (\r\n            <CardBody>Loading</CardBody>\r\n          ) : (\r\n            <CardBody>\r\n              {allV2PairsWithLiquidity?.length > 0 ? (\r\n                <>\r\n                  {allV2PairsWithLiquidity.map((v2Pair, index) => (\r\n                    <Box mb={index < allV2PairsWithLiquidity.length - 1 ? '16px' : 0}>\r\n                      <FullPositionCard key={v2Pair.liquidityToken.address} pair={v2Pair} />\r\n                    </Box>\r\n                  ))}\r\n                </>\r\n              ) : (\r\n                <Text color=\"textDisabled\" textAlign=\"center\">\r\n                  No liquidity found.\r\n                </Text>\r\n              )}\r\n              <Text mt=\"16px\" textAlign=\"center\">\r\n                Don&apos;t see a pool you joined?{' '}\r\n                <StyledInternalLink id=\"import-pool-link\" to=\"/find\">\r\n                  Import it\r\n                </StyledInternalLink>\r\n              </Text>\r\n            </CardBody>\r\n          )}\r\n        </Card>\r\n        <ArrowSeparator />\r\n        <Text bold>Discontinued V2 LP</Text>\r\n        <Card>\r\n          <CardBody>\r\n            <Text textAlign=\"center\" mb=\"16px\">\r\n              If you added liquidity to V2 LPs during the migration attempt on April 23, you need to unstake and remove\r\n              liquidity.\r\n            </Text>\r\n            <Button as={Link} external href=\"https://hiccup.pancakeswap.finance/#/pool\" style={{ width: '100%' }}>\r\n              Remove\r\n            </Button>\r\n          </CardBody>\r\n        </Card>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SecondCard\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\Migration\\FirstCard.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\Migration\\FAQ.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\toasts\\index.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\user\\actions.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\mint\\actions.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\swap\\actions.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\connectors\\NetworkConnector.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useAuth.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useGetLocalProfile.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useTheme.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\Tokens.ts",["822"],"import { parseBytes32String } from '@ethersproject/strings'\r\nimport { Currency, ETHER, Token, currencyEquals } from '@appleswap/sdk'\r\nimport { useMemo } from 'react'\r\nimport { useSelectedTokenList } from '../state/lists/hooks'\r\nimport { NEVER_RELOAD, useSingleCallResult } from '../state/multicall/hooks'\r\n// eslint-disable-next-line import/no-cycle\r\nimport { useUserAddedTokens } from '../state/user/hooks'\r\nimport { isAddress } from '../utils'\r\n\r\nimport { useActiveWeb3React } from './index'\r\nimport { useBytes32TokenContract, useTokenContract } from './useContract'\r\n\r\nexport function useAllTokens(): { [address: string]: Token } {\r\n  const { chainId } = useActiveWeb3React()\r\n  const userAddedTokens = useUserAddedTokens()\r\n  const allTokens = useSelectedTokenList()\r\n\r\n  return useMemo(() => {\r\n    if (!chainId) return {}\r\n    return (\r\n      userAddedTokens\r\n        // reduce into all ALL_TOKENS filtered by the current chain\r\n        .reduce<{ [address: string]: Token }>(\r\n          (tokenMap, token) => {\r\n            tokenMap[token.address] = token\r\n            return tokenMap\r\n          },\r\n          // must make a copy because reduce modifies the map, and we do not\r\n          // want to make a copy in every iteration\r\n          { ...allTokens[chainId] }\r\n        )\r\n    )\r\n  }, [chainId, userAddedTokens, allTokens])\r\n}\r\n\r\n// Check if currency is included in custom list from user storage\r\nexport function useIsUserAddedToken(currency: Currency): boolean {\r\n  const userAddedTokens = useUserAddedTokens()\r\n  return !!userAddedTokens.find((token) => currencyEquals(currency, token))\r\n}\r\n\r\n// parse a name or symbol from a token response\r\nconst BYTES32_REGEX = /^0x[a-fA-F0-9]{64}$/\r\nfunction parseStringOrBytes32(str: string | undefined, bytes32: string | undefined, defaultValue: string): string {\r\n  return str && str.length > 0\r\n    ? str\r\n    : bytes32 && BYTES32_REGEX.test(bytes32)\r\n    ? parseBytes32String(bytes32)\r\n    : defaultValue\r\n}\r\n\r\n// undefined if invalid or does not exist\r\n// null if loading\r\n// otherwise returns the token\r\nexport function useToken(tokenAddress?: string): Token | undefined | null {\r\n  const { chainId } = useActiveWeb3React()\r\n  const tokens = useAllTokens()\r\n\r\n  const address = isAddress(tokenAddress)\r\n\r\n  const tokenContract = useTokenContract(address || undefined, false)\r\n  const tokenContractBytes32 = useBytes32TokenContract(address || undefined, false)\r\n  const token: Token | undefined = address ? tokens[address] : undefined\r\n\r\n  const tokenName = useSingleCallResult(token ? undefined : tokenContract, 'name', undefined, NEVER_RELOAD)\r\n  const tokenNameBytes32 = useSingleCallResult(\r\n    token ? undefined : tokenContractBytes32,\r\n    'name',\r\n    undefined,\r\n    NEVER_RELOAD\r\n  )\r\n  const symbol = useSingleCallResult(token ? undefined : tokenContract, 'symbol', undefined, NEVER_RELOAD)\r\n  const symbolBytes32 = useSingleCallResult(token ? undefined : tokenContractBytes32, 'symbol', undefined, NEVER_RELOAD)\r\n  const decimals = useSingleCallResult(token ? undefined : tokenContract, 'decimals', undefined, NEVER_RELOAD)\r\n\r\n  return useMemo(() => {\r\n    if (token) return token\r\n    if (!chainId || !address) return undefined\r\n    if (decimals.loading || symbol.loading || tokenName.loading) return null\r\n    if (decimals.result) {\r\n      return new Token(\r\n        chainId,\r\n        address,\r\n        decimals.result[0],\r\n        parseStringOrBytes32(symbol.result?.[0], symbolBytes32.result?.[0], 'UNKNOWN'),\r\n        parseStringOrBytes32(tokenName.result?.[0], tokenNameBytes32.result?.[0], 'Unknown Token')\r\n      )\r\n    }\r\n    return undefined\r\n  }, [\r\n    address,\r\n    chainId,\r\n    decimals.loading,\r\n    decimals.result,\r\n    symbol.loading,\r\n    symbol.result,\r\n    symbolBytes32.result,\r\n    token,\r\n    tokenName.loading,\r\n    tokenName.result,\r\n    tokenNameBytes32.result,\r\n  ])\r\n}\r\n\r\nexport function useCurrency(currencyId: string | undefined): Currency | null | undefined {\r\n  const isBNB = currencyId?.toUpperCase() === 'BNB'\r\n  const token = useToken(isBNB ? undefined : currencyId)\r\n  return isBNB ? ETHER : token\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\Migration\\config.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Container.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\actions.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\multicall\\hooks.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\lists\\hooks.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useI18n.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\data\\Reserves.ts",["823","824"],"import { TokenAmount, Pair, Currency } from '@appleswap/sdk'\r\nimport { useMemo } from 'react'\r\nimport { abi as IUniswapV2PairABI } from '@uniswap/v2-core/build/IUniswapV2Pair.json'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { useActiveWeb3React } from '../hooks'\r\n\r\nimport { useMultipleContractSingleData } from '../state/multicall/hooks'\r\nimport { wrappedCurrency } from '../utils/wrappedCurrency'\r\n\r\nconst PAIR_INTERFACE = new Interface(IUniswapV2PairABI)\r\n\r\nexport enum PairState {\r\n  LOADING,\r\n  NOT_EXISTS,\r\n  EXISTS,\r\n  INVALID\r\n}\r\n\r\nexport function usePairs(currencies: [Currency | undefined, Currency | undefined][]): [PairState, Pair | null][] {\r\n  const { chainId } = useActiveWeb3React()\r\n\r\n  const tokens = useMemo(\r\n    () =>\r\n      currencies.map(([currencyA, currencyB]) => [\r\n        wrappedCurrency(currencyA, chainId),\r\n        wrappedCurrency(currencyB, chainId)\r\n      ]),\r\n    [chainId, currencies]\r\n  )\r\n\r\n  const pairAddresses = useMemo(\r\n    () =>\r\n      tokens.map(([tokenA, tokenB]) => {\r\n        return tokenA && tokenB && !tokenA.equals(tokenB) ? Pair.getAddress(tokenA, tokenB) : undefined\r\n      }),\r\n    [tokens]\r\n  )\r\n\r\n  const results = useMultipleContractSingleData(pairAddresses, PAIR_INTERFACE, 'getReserves')\r\n\r\n  return useMemo(() => {\r\n    return results.map((result, i) => {\r\n      const { result: reserves, loading } = result\r\n      const tokenA = tokens[i][0]\r\n      const tokenB = tokens[i][1]\r\n\r\n      if (loading) return [PairState.LOADING, null]\r\n      if (!tokenA || !tokenB || tokenA.equals(tokenB)) return [PairState.INVALID, null]\r\n      if (!reserves) return [PairState.NOT_EXISTS, null]\r\n      const { reserve0, reserve1 } = reserves\r\n      const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\r\n      return [\r\n        PairState.EXISTS,\r\n        new Pair(new TokenAmount(token0, reserve0.toString()), new TokenAmount(token1, reserve1.toString()))\r\n      ]\r\n    })\r\n  }, [results, tokens])\r\n}\r\n\r\nexport function usePair(tokenA?: Currency, tokenB?: Currency): [PairState, Pair | null] {\r\n  return usePairs([[tokenA, tokenB]])[0]\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Row\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Column\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\wallet\\hooks.ts",["825"],"import { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount } from '@appleswap/sdk'\r\nimport { useMemo } from 'react'\r\nimport ERC20_INTERFACE from '../../constants/abis/erc20'\r\nimport { useAllTokens } from '../../hooks/Tokens'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useMulticallContract } from '../../hooks/useContract'\r\nimport { isAddress } from '../../utils'\r\nimport { useSingleContractMultipleData, useMultipleContractSingleData } from '../multicall/hooks'\r\n\r\n/**\r\n * Returns a map of the given addresses to their eventually consistent ETH balances.\r\n */\r\nexport function useETHBalances(\r\n  uncheckedAddresses?: (string | undefined)[]\r\n): { [address: string]: CurrencyAmount | undefined } {\r\n  const multicallContract = useMulticallContract()\r\n\r\n  const addresses: string[] = useMemo(\r\n    () =>\r\n      uncheckedAddresses\r\n        ? uncheckedAddresses\r\n            .map(isAddress)\r\n            .filter((a): a is string => a !== false)\r\n            .sort()\r\n        : [],\r\n    [uncheckedAddresses]\r\n  )\r\n\r\n  const results = useSingleContractMultipleData(\r\n    multicallContract,\r\n    'getEthBalance',\r\n    addresses.map(address => [address])\r\n  )\r\n\r\n  return useMemo(\r\n    () =>\r\n      addresses.reduce<{ [address: string]: CurrencyAmount }>((memo, address, i) => {\r\n        const value = results?.[i]?.result?.[0]\r\n        if (value) memo[address] = CurrencyAmount.ether(JSBI.BigInt(value.toString()))\r\n        return memo\r\n      }, {}),\r\n    [addresses, results]\r\n  )\r\n}\r\n\r\n/**\r\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\r\n */\r\nexport function useTokenBalancesWithLoadingIndicator(\r\n  address?: string,\r\n  tokens?: (Token | undefined)[]\r\n): [{ [tokenAddress: string]: TokenAmount | undefined }, boolean] {\r\n  const validatedTokens: Token[] = useMemo(\r\n    () => tokens?.filter((t?: Token): t is Token => isAddress(t?.address) !== false) ?? [],\r\n    [tokens]\r\n  )\r\n\r\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map(vt => vt.address), [validatedTokens])\r\n\r\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', [address])\r\n\r\n  const anyLoading: boolean = useMemo(() => balances.some(callState => callState.loading), [balances])\r\n\r\n  return [\r\n    useMemo(\r\n      () =>\r\n        address && validatedTokens.length > 0\r\n          ? validatedTokens.reduce<{ [tokenAddress: string]: TokenAmount | undefined }>((memo, token, i) => {\r\n              const value = balances?.[i]?.result?.[0]\r\n              const amount = value ? JSBI.BigInt(value.toString()) : undefined\r\n              if (amount) {\r\n                memo[token.address] = new TokenAmount(token, amount)\r\n              }\r\n              return memo\r\n            }, {})\r\n          : {},\r\n      [address, validatedTokens, balances]\r\n    ),\r\n    anyLoading\r\n  ]\r\n}\r\n\r\nexport function useTokenBalances(\r\n  address?: string,\r\n  tokens?: (Token | undefined)[]\r\n): { [tokenAddress: string]: TokenAmount | undefined } {\r\n  return useTokenBalancesWithLoadingIndicator(address, tokens)[0]\r\n}\r\n\r\n// get the balance for a single token/account combo\r\nexport function useTokenBalance(account?: string, token?: Token): TokenAmount | undefined {\r\n  const tokenBalances = useTokenBalances(account, [token])\r\n  if (!token) return undefined\r\n  return tokenBalances[token.address]\r\n}\r\n\r\nexport function useCurrencyBalances(\r\n  account?: string,\r\n  currencies?: (Currency | undefined)[]\r\n): (CurrencyAmount | undefined)[] {\r\n  const tokens = useMemo(() => currencies?.filter((currency): currency is Token => currency instanceof Token) ?? [], [\r\n    currencies\r\n  ])\r\n\r\n  const tokenBalances = useTokenBalances(account, tokens)\r\n  const containsETH: boolean = useMemo(() => currencies?.some(currency => currency === ETHER) ?? false, [currencies])\r\n  const ethBalance = useETHBalances(containsETH ? [account] : [])\r\n\r\n  return useMemo(\r\n    () =>\r\n      currencies?.map(currency => {\r\n        if (!account || !currency) return undefined\r\n        if (currency instanceof Token) return tokenBalances[currency.address]\r\n        if (currency === ETHER) return ethBalance[account]\r\n        return undefined\r\n      }) ?? [],\r\n    [account, currencies, ethBalance, tokenBalances]\r\n  )\r\n}\r\n\r\nexport function useCurrencyBalance(account?: string, currency?: Currency): CurrencyAmount | undefined {\r\n  return useCurrencyBalances(account, [currency])[0]\r\n}\r\n\r\n// mimics useAllBalances\r\nexport function useAllTokenBalances(): { [tokenAddress: string]: TokenAmount | undefined } {\r\n  const { account } = useActiveWeb3React()\r\n  const allTokens = useAllTokens()\r\n  const allTokensArray = useMemo(() => Object.values(allTokens ?? {}), [allTokens])\r\n  const balances = useTokenBalances(account ?? undefined, allTokensArray)\r\n  return balances ?? {}\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\wrappedCurrency.ts",["826"],"import { ChainId, Currency, CurrencyAmount, ETHER, Token, TokenAmount, WETH } from '@appleswap/sdk'\r\n\r\nexport function wrappedCurrency(currency: Currency | undefined, chainId: ChainId | undefined): Token | undefined {\r\n  // eslint-disable-next-line no-nested-ternary\r\n  return chainId && currency === ETHER ? WETH[chainId] : currency instanceof Token ? currency : undefined\r\n}\r\n\r\nexport function wrappedCurrencyAmount(\r\n  currencyAmount: CurrencyAmount | undefined,\r\n  chainId: ChainId | undefined\r\n): TokenAmount | undefined {\r\n  const token = currencyAmount && chainId ? wrappedCurrency(currencyAmount.currency, chainId) : undefined\r\n  return token && currencyAmount ? new TokenAmount(token, currencyAmount.raw) : undefined\r\n}\r\n\r\nexport function unwrappedToken(token: Token): Currency {\r\n  if (token.equals(WETH[token.chainId])) return ETHER\r\n  return token\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\PositionCard\\index.tsx",["827"],"import React, { useState } from 'react'\r\nimport { JSBI, Pair, Percent } from '@appleswap/sdk'\r\nimport { Button, Card as UIKitCard, CardBody, Text } from '@pancakeswap-libs/uikit'\r\nimport { darken } from 'polished'\r\nimport { ChevronDown, ChevronUp } from 'react-feather'\r\nimport { Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { useTotalSupply } from '../../data/TotalSupply'\r\n\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useTokenBalance } from '../../state/wallet/hooks'\r\nimport { currencyId } from '../../utils/currencyId'\r\nimport { unwrappedToken } from '../../utils/wrappedCurrency'\r\nimport Card from '../Card'\r\nimport { AutoColumn } from '../Column'\r\nimport CurrencyLogo from '../CurrencyLogo'\r\nimport DoubleCurrencyLogo from '../DoubleLogo'\r\nimport { RowBetween, RowFixed } from '../Row'\r\nimport { Dots } from '../swap/styleds'\r\n\r\nexport const FixedHeightRow = styled(RowBetween)`\r\n  height: 24px;\r\n`\r\n\r\nexport const HoverCard = styled(Card)`\r\n  border: 1px solid ${({ theme }) => theme.colors.invertedContrast};\r\n  :hover {\r\n    border: 1px solid ${({ theme }) => darken(0.06, theme.colors.invertedContrast)};\r\n  }\r\n`\r\n\r\ninterface PositionCardProps {\r\n  pair: Pair\r\n  // eslint-disable-next-line react/no-unused-prop-types\r\n  showUnwrapped?: boolean\r\n  // eslint-disable-next-line react/no-unused-prop-types\r\n  removeOnly?: boolean\r\n}\r\n\r\nexport function MinimalPositionCard({ pair, showUnwrapped = false }: PositionCardProps) {\r\n  const { account } = useActiveWeb3React()\r\n\r\n  const currency0 = showUnwrapped ? pair.token0 : unwrappedToken(pair.token0)\r\n  const currency1 = showUnwrapped ? pair.token1 : unwrappedToken(pair.token1)\r\n\r\n  const [showMore, setShowMore] = useState(false)\r\n\r\n  const userPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\r\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\r\n\r\n  const [token0Deposited, token1Deposited] =\r\n    !!pair &&\r\n    !!totalPoolTokens &&\r\n    !!userPoolBalance &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\r\n      ? [\r\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\r\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\r\n        ]\r\n      : [undefined, undefined]\r\n\r\n  return (\r\n    <>\r\n      {userPoolBalance && (\r\n        <UIKitCard>\r\n          <CardBody>\r\n            <AutoColumn gap=\"12px\">\r\n              <FixedHeightRow>\r\n                <RowFixed>\r\n                  <Text style={{ textTransform: 'uppercase', fontWeight: 600 }} fontSize=\"14px\" color=\"textSubtle\">\r\n                    LP Tokens in your Wallet\r\n                  </Text>\r\n                </RowFixed>\r\n              </FixedHeightRow>\r\n              <FixedHeightRow onClick={() => setShowMore(!showMore)}>\r\n                <RowFixed>\r\n                  <DoubleCurrencyLogo currency0={currency0} currency1={currency1} margin size={20} />\r\n                  <Text fontSize=\"14px\">\r\n                    {currency0.symbol}/{currency1.symbol}\r\n                  </Text>\r\n                </RowFixed>\r\n                <RowFixed>\r\n                  <Text fontSize=\"14px\">{userPoolBalance ? userPoolBalance.toSignificant(4) : '-'}</Text>\r\n                </RowFixed>\r\n              </FixedHeightRow>\r\n              <AutoColumn gap=\"4px\">\r\n                <FixedHeightRow>\r\n                  <Text fontSize=\"14px\">{currency0.symbol}:</Text>\r\n                  {token0Deposited ? (\r\n                    <RowFixed>\r\n                      <Text ml=\"6px\" fontSize=\"14px\">\r\n                        {token0Deposited?.toSignificant(6)}\r\n                      </Text>\r\n                    </RowFixed>\r\n                  ) : (\r\n                    '-'\r\n                  )}\r\n                </FixedHeightRow>\r\n                <FixedHeightRow>\r\n                  <Text fontSize=\"14px\">{currency1.symbol}:</Text>\r\n                  {token1Deposited ? (\r\n                    <RowFixed>\r\n                      <Text ml=\"6px\" fontSize=\"14px\">\r\n                        {token1Deposited?.toSignificant(6)}\r\n                      </Text>\r\n                    </RowFixed>\r\n                  ) : (\r\n                    '-'\r\n                  )}\r\n                </FixedHeightRow>\r\n              </AutoColumn>\r\n            </AutoColumn>\r\n          </CardBody>\r\n        </UIKitCard>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default function FullPositionCard({ pair, removeOnly }: PositionCardProps) {\r\n  const { account } = useActiveWeb3React()\r\n\r\n  const currency0 = unwrappedToken(pair.token0)\r\n  const currency1 = unwrappedToken(pair.token1)\r\n\r\n  const [showMore, setShowMore] = useState(false)\r\n\r\n  const userPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\r\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\r\n\r\n  const poolTokenPercentage =\r\n    !!userPoolBalance && !!totalPoolTokens && JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\r\n      ? new Percent(userPoolBalance.raw, totalPoolTokens.raw)\r\n      : undefined\r\n\r\n  const [token0Deposited, token1Deposited] =\r\n    !!pair &&\r\n    !!totalPoolTokens &&\r\n    !!userPoolBalance &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\r\n      ? [\r\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\r\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\r\n        ]\r\n      : [undefined, undefined]\r\n\r\n  return (\r\n    <HoverCard>\r\n      <AutoColumn gap=\"12px\">\r\n        <FixedHeightRow onClick={() => setShowMore(!showMore)} style={{ cursor: 'pointer' }}>\r\n          <RowFixed>\r\n            <DoubleCurrencyLogo currency0={currency0} currency1={currency1} margin size={20} />\r\n            <Text>{!currency0 || !currency1 ? <Dots>Loading</Dots> : `${currency0.symbol}/${currency1.symbol}`}</Text>\r\n          </RowFixed>\r\n          <RowFixed>\r\n            {showMore ? (\r\n              <ChevronUp size=\"20\" style={{ marginLeft: '10px' }} />\r\n            ) : (\r\n              <ChevronDown size=\"20\" style={{ marginLeft: '10px' }} />\r\n            )}\r\n          </RowFixed>\r\n        </FixedHeightRow>\r\n        {showMore && (\r\n          <AutoColumn gap=\"8px\">\r\n            <FixedHeightRow>\r\n              <RowFixed>\r\n                <Text>Pooled {currency0.symbol}:</Text>\r\n              </RowFixed>\r\n              {token0Deposited ? (\r\n                <RowFixed>\r\n                  <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\r\n                  <CurrencyLogo size=\"20px\" style={{ marginLeft: '8px' }} currency={currency0} />\r\n                </RowFixed>\r\n              ) : (\r\n                '-'\r\n              )}\r\n            </FixedHeightRow>\r\n\r\n            <FixedHeightRow>\r\n              <RowFixed>\r\n                <Text>Pooled {currency1.symbol}:</Text>\r\n              </RowFixed>\r\n              {token1Deposited ? (\r\n                <RowFixed>\r\n                  <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\r\n                  <CurrencyLogo size=\"20px\" style={{ marginLeft: '8px' }} currency={currency1} />\r\n                </RowFixed>\r\n              ) : (\r\n                '-'\r\n              )}\r\n            </FixedHeightRow>\r\n            <FixedHeightRow>\r\n              <Text>Your pool tokens:</Text>\r\n              <Text>{userPoolBalance ? userPoolBalance.toSignificant(4) : '-'}</Text>\r\n            </FixedHeightRow>\r\n            <FixedHeightRow>\r\n              <Text>Your pool share:</Text>\r\n              <Text>{poolTokenPercentage ? `${poolTokenPercentage.toFixed(2)}%` : '-'}</Text>\r\n            </FixedHeightRow>\r\n\r\n            <RowBetween marginTop=\"10px\">\r\n              {removeOnly && (\r\n                <Button\r\n                  as={Link}\r\n                  to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}\r\n                  style={{ width: '48%' }}\r\n                >\r\n                  Add\r\n                </Button>\r\n              )}\r\n              <Button\r\n                as={Link}\r\n                style={{ width: '48%' }}\r\n                to={`/remove/${currencyId(currency0)}/${currencyId(currency1)}`}\r\n              >\r\n                Remove\r\n              </Button>\r\n            </RowBetween>\r\n          </AutoColumn>\r\n        )}\r\n      </AutoColumn>\r\n    </HoverCard>\r\n  )\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\FoldableText\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Shared\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\Pool\\styleds.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\burn\\hooks.ts",["828"],"import { Currency, CurrencyAmount, JSBI, Pair, Percent, TokenAmount } from '@appleswap/sdk'\r\nimport { useCallback } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { usePair } from '../../data/Reserves'\r\nimport { useTotalSupply } from '../../data/TotalSupply'\r\n\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { tryParseAmount } from '../swap/hooks'\r\nimport { useTokenBalances } from '../wallet/hooks'\r\nimport { Field, typeInput } from './actions'\r\n\r\nexport function useBurnState(): AppState['burn'] {\r\n  return useSelector<AppState, AppState['burn']>(state => state.burn)\r\n}\r\n\r\nexport function useDerivedBurnInfo(\r\n  currencyA: Currency | undefined,\r\n  currencyB: Currency | undefined\r\n): {\r\n  pair?: Pair | null\r\n  parsedAmounts: {\r\n    [Field.LIQUIDITY_PERCENT]: Percent\r\n    [Field.LIQUIDITY]?: TokenAmount\r\n    [Field.CURRENCY_A]?: CurrencyAmount\r\n    [Field.CURRENCY_B]?: CurrencyAmount\r\n  }\r\n  error?: string\r\n} {\r\n  const { account, chainId } = useActiveWeb3React()\r\n\r\n  const { independentField, typedValue } = useBurnState()\r\n\r\n  // pair + totalsupply\r\n  const [, pair] = usePair(currencyA, currencyB)\r\n\r\n  // balances\r\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [pair?.liquidityToken])\r\n  const userLiquidity: undefined | TokenAmount = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\r\n\r\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\r\n  const tokens = {\r\n    [Field.CURRENCY_A]: tokenA,\r\n    [Field.CURRENCY_B]: tokenB,\r\n    [Field.LIQUIDITY]: pair?.liquidityToken\r\n  }\r\n\r\n  // liquidity values\r\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\r\n  const liquidityValueA =\r\n    pair &&\r\n    totalSupply &&\r\n    userLiquidity &&\r\n    tokenA &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\r\n      ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw)\r\n      : undefined\r\n  const liquidityValueB =\r\n    pair &&\r\n    totalSupply &&\r\n    userLiquidity &&\r\n    tokenB &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\r\n      ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw)\r\n      : undefined\r\n  const liquidityValues: { [Field.CURRENCY_A]?: TokenAmount; [Field.CURRENCY_B]?: TokenAmount } = {\r\n    [Field.CURRENCY_A]: liquidityValueA,\r\n    [Field.CURRENCY_B]: liquidityValueB\r\n  }\r\n\r\n  let percentToRemove: Percent = new Percent('0', '100')\r\n  // user specified a %\r\n  if (independentField === Field.LIQUIDITY_PERCENT) {\r\n    percentToRemove = new Percent(typedValue, '100')\r\n  }\r\n  // user specified a specific amount of liquidity tokens\r\n  else if (independentField === Field.LIQUIDITY) {\r\n    if (pair?.liquidityToken) {\r\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken)\r\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\r\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw)\r\n      }\r\n    }\r\n  }\r\n  // user specified a specific amount of token a or b\r\n  else if (tokens[independentField]) {\r\n      const independentAmount = tryParseAmount(typedValue, tokens[independentField])\r\n      const liquidityValue = liquidityValues[independentField]\r\n      if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\r\n        percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw)\r\n      }\r\n    }\r\n\r\n  const parsedAmounts: {\r\n    [Field.LIQUIDITY_PERCENT]: Percent\r\n    [Field.LIQUIDITY]?: TokenAmount\r\n    [Field.CURRENCY_A]?: TokenAmount\r\n    [Field.CURRENCY_B]?: TokenAmount\r\n  } = {\r\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\r\n    [Field.LIQUIDITY]:\r\n      userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\r\n        ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient)\r\n        : undefined,\r\n    [Field.CURRENCY_A]:\r\n      tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA\r\n        ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient)\r\n        : undefined,\r\n    [Field.CURRENCY_B]:\r\n      tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB\r\n        ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient)\r\n        : undefined\r\n  }\r\n\r\n  let error: string | undefined\r\n  if (!account) {\r\n    error = 'Connect Wallet'\r\n  }\r\n\r\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\r\n    error = error ?? 'Enter an amount'\r\n  }\r\n\r\n  return { pair, parsedAmounts, error }\r\n}\r\n\r\nexport function useBurnActionHandlers(): {\r\n  onUserInput: (field: Field, typedValue: string) => void\r\n} {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const onUserInput = useCallback(\r\n    (field: Field, typedValue: string) => {\r\n      dispatch(typeInput({ field, typedValue }))\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  return {\r\n    onUserInput\r\n  }\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useApproveCallback.ts",["829"],"import { MaxUint256 } from '@ethersproject/constants'\r\nimport { TransactionResponse } from '@ethersproject/providers'\r\nimport { Trade, TokenAmount, CurrencyAmount, ETHER } from '@appleswap/sdk'\r\nimport { useCallback, useMemo } from 'react'\r\nimport { ROUTER_ADDRESS } from '../constants'\r\nimport { useTokenAllowance } from '../data/Allowances'\r\nimport { Field } from '../state/swap/actions'\r\nimport { useTransactionAdder, useHasPendingApproval } from '../state/transactions/hooks'\r\nimport { computeSlippageAdjustedAmounts } from '../utils/prices'\r\nimport { calculateGasMargin } from '../utils'\r\nimport { useTokenContract } from './useContract'\r\nimport { useActiveWeb3React } from './index'\r\n\r\nexport enum ApprovalState {\r\n  UNKNOWN,\r\n  NOT_APPROVED,\r\n  PENDING,\r\n  APPROVED,\r\n}\r\n\r\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\r\nexport function useApproveCallback(\r\n  amountToApprove?: CurrencyAmount,\r\n  spender?: string\r\n): [ApprovalState, () => Promise<void>] {\r\n  const { account } = useActiveWeb3React()\r\n  const token = amountToApprove instanceof TokenAmount ? amountToApprove.token : undefined\r\n  const currentAllowance = useTokenAllowance(token, account ?? undefined, spender)\r\n  const pendingApproval = useHasPendingApproval(token?.address, spender)\r\n\r\n  // check the current approval status\r\n  const approvalState: ApprovalState = useMemo(() => {\r\n    if (!amountToApprove || !spender) return ApprovalState.UNKNOWN\r\n    if (amountToApprove.currency === ETHER) return ApprovalState.APPROVED\r\n    // we might not have enough data to know whether or not we need to approve\r\n    if (!currentAllowance) return ApprovalState.UNKNOWN\r\n\r\n    // amountToApprove will be defined if currentAllowance is\r\n    return currentAllowance.lessThan(amountToApprove)\r\n      ? pendingApproval\r\n        ? ApprovalState.PENDING\r\n        : ApprovalState.NOT_APPROVED\r\n      : ApprovalState.APPROVED\r\n  }, [amountToApprove, currentAllowance, pendingApproval, spender])\r\n\r\n  const tokenContract = useTokenContract(token?.address)\r\n  const addTransaction = useTransactionAdder()\r\n\r\n  const approve = useCallback(async (): Promise<void> => {\r\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\r\n      console.error('approve was called unnecessarily')\r\n      return\r\n    }\r\n    if (!token) {\r\n      console.error('no token')\r\n      return\r\n    }\r\n\r\n    if (!tokenContract) {\r\n      console.error('tokenContract is null')\r\n      return\r\n    }\r\n\r\n    if (!amountToApprove) {\r\n      console.error('missing amount to approve')\r\n      return\r\n    }\r\n\r\n    if (!spender) {\r\n      console.error('no spender')\r\n      return\r\n    }\r\n\r\n    let useExact = false\r\n    const estimatedGas = await tokenContract.estimateGas.approve(spender, MaxUint256).catch(() => {\r\n      // general fallback for tokens who restrict approval amounts\r\n      useExact = true\r\n      return tokenContract.estimateGas.approve(spender, amountToApprove.raw.toString())\r\n    })\r\n\r\n    // eslint-disable-next-line consistent-return\r\n    return tokenContract\r\n      .approve(spender, useExact ? amountToApprove.raw.toString() : MaxUint256, {\r\n        gasLimit: calculateGasMargin(estimatedGas),\r\n      })\r\n      .then((response: TransactionResponse) => {\r\n        addTransaction(response, {\r\n          summary: `Approve ${amountToApprove.currency.symbol}`,\r\n          approval: { tokenAddress: token.address, spender },\r\n        })\r\n      })\r\n      .catch((error: Error) => {\r\n        console.error('Failed to approve token', error)\r\n        throw error\r\n      })\r\n  }, [approvalState, token, tokenContract, amountToApprove, spender, addTransaction])\r\n\r\n  return [approvalState, approve]\r\n}\r\n\r\n// wraps useApproveCallback in the context of a swap\r\nexport function useApproveCallbackFromTrade(trade?: Trade, allowedSlippage = 0) {\r\n  const amountToApprove = useMemo(\r\n    () => (trade ? computeSlippageAdjustedAmounts(trade, allowedSlippage)[Field.INPUT] : undefined),\r\n    [trade, allowedSlippage]\r\n  )\r\n  return useApproveCallback(amountToApprove, ROUTER_ADDRESS)\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\useDebouncedChangeHandler.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\currencyId.ts",["830"],"import { Currency, ETHER, Token } from '@appleswap/sdk'\r\n\r\nexport function currencyId(currency: Currency): string {\r\n  if (currency === ETHER) return 'BNB'\r\n  if (currency instanceof Token) return currency.address\r\n  throw new Error('invalid currency')\r\n}\r\n\r\nexport default currencyId\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Popups\\PopupItem.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\translateTextHelpers.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\styleds.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\transactions\\hooks.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\data\\TotalSupply.ts",["831"],"import { BigNumber } from '@ethersproject/bignumber'\r\nimport { Token, TokenAmount } from '@appleswap/sdk'\r\nimport { useTokenContract } from '../hooks/useContract'\r\nimport { useSingleCallResult } from '../state/multicall/hooks'\r\n\r\n// returns undefined if input token is undefined, or fails to get token contract,\r\n// or contract total supply cannot be fetched\r\nexport function useTotalSupply(token?: Token): TokenAmount | undefined {\r\n  const contract = useTokenContract(token?.address, false)\r\n\r\n  const totalSupply: BigNumber = useSingleCallResult(contract, 'totalSupply')?.result?.[0]\r\n\r\n  return token && totalSupply ? new TokenAmount(token, totalSupply.toString()) : undefined\r\n}\r\n\r\nexport default useTotalSupply\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Shared\\Common.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Loader\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\swap\\hooks.ts",["832"],"import { parseUnits } from '@ethersproject/units'\r\nimport { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount, Trade } from '@appleswap/sdk'\r\nimport { ParsedQs } from 'qs'\r\nimport { useCallback, useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useENS from '../../hooks/useENS'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useCurrency } from '../../hooks/Tokens'\r\nimport { useTradeExactIn, useTradeExactOut } from '../../hooks/Trades'\r\nimport useParsedQueryString from '../../hooks/useParsedQueryString'\r\nimport { isAddress } from '../../utils'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { useCurrencyBalances } from '../wallet/hooks'\r\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\r\nimport { SwapState } from './reducer'\r\n\r\nimport { useUserSlippageTolerance } from '../user/hooks'\r\nimport { computeSlippageAdjustedAmounts } from '../../utils/prices'\r\n\r\nexport function useSwapState(): AppState['swap'] {\r\n  return useSelector<AppState, AppState['swap']>((state) => state.swap)\r\n}\r\n\r\nexport function useSwapActionHandlers(): {\r\n  onCurrencySelection: (field: Field, currency: Currency) => void\r\n  onSwitchTokens: () => void\r\n  onUserInput: (field: Field, typedValue: string) => void\r\n  onChangeRecipient: (recipient: string | null) => void\r\n} {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const onCurrencySelection = useCallback(\r\n    (field: Field, currency: Currency) => {\r\n      dispatch(\r\n        selectCurrency({\r\n          field,\r\n          currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'BNB' : '',\r\n        })\r\n      )\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const onSwitchTokens = useCallback(() => {\r\n    dispatch(switchCurrencies())\r\n  }, [dispatch])\r\n\r\n  const onUserInput = useCallback(\r\n    (field: Field, typedValue: string) => {\r\n      dispatch(typeInput({ field, typedValue }))\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const onChangeRecipient = useCallback(\r\n    (recipient: string | null) => {\r\n      dispatch(setRecipient({ recipient }))\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  return {\r\n    onSwitchTokens,\r\n    onCurrencySelection,\r\n    onUserInput,\r\n    onChangeRecipient,\r\n  }\r\n}\r\n\r\n// try to parse a user entered amount for a given token\r\nexport function tryParseAmount(value?: string, currency?: Currency): CurrencyAmount | undefined {\r\n  if (!value || !currency) {\r\n    return undefined\r\n  }\r\n  try {\r\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\r\n    if (typedValueParsed !== '0') {\r\n      return currency instanceof Token\r\n        ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed))\r\n        : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed))\r\n    }\r\n  } catch (error) {\r\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\r\n    console.info(`Failed to parse input amount: \"${value}\"`, error)\r\n  }\r\n  // necessary for all paths to return a value\r\n  return undefined\r\n}\r\n\r\nconst BAD_RECIPIENT_ADDRESSES: string[] = [\r\n  '0xBCfCcbde45cE874adCB698cC183deBcF17952812', // v2 factory\r\n  '0xf164fC0Ec4E93095b804a4795bBe1e041497b92a', // v2 router 01\r\n  '0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F', // v2 router 02\r\n]\r\n\r\n/**\r\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\r\n * @param trade to check for the given address\r\n * @param checksummedAddress address to check in the pairs and tokens\r\n */\r\nfunction involvesAddress(trade: Trade, checksummedAddress: string): boolean {\r\n  return (\r\n    trade.route.path.some((token) => token.address === checksummedAddress) ||\r\n    trade.route.pairs.some((pair) => pair.liquidityToken.address === checksummedAddress)\r\n  )\r\n}\r\n\r\n// from the current swap inputs, compute the best trade and return it.\r\nexport function useDerivedSwapInfo(): {\r\n  currencies: { [field in Field]?: Currency }\r\n  currencyBalances: { [field in Field]?: CurrencyAmount }\r\n  parsedAmount: CurrencyAmount | undefined\r\n  v2Trade: Trade | undefined\r\n  inputError?: string\r\n} {\r\n  const { account } = useActiveWeb3React()\r\n\r\n  const {\r\n    independentField,\r\n    typedValue,\r\n    [Field.INPUT]: { currencyId: inputCurrencyId },\r\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\r\n    recipient,\r\n  } = useSwapState()\r\n\r\n  const inputCurrency = useCurrency(inputCurrencyId)\r\n  const outputCurrency = useCurrency(outputCurrencyId)\r\n  const recipientLookup = useENS(recipient ?? undefined)\r\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\r\n\r\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\r\n    inputCurrency ?? undefined,\r\n    outputCurrency ?? undefined,\r\n  ])\r\n\r\n  const isExactIn: boolean = independentField === Field.INPUT\r\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\r\n\r\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\r\n  const bestTradeExactOut = useTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined)\r\n\r\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\r\n\r\n  const currencyBalances = {\r\n    [Field.INPUT]: relevantTokenBalances[0],\r\n    [Field.OUTPUT]: relevantTokenBalances[1],\r\n  }\r\n\r\n  const currencies: { [field in Field]?: Currency } = {\r\n    [Field.INPUT]: inputCurrency ?? undefined,\r\n    [Field.OUTPUT]: outputCurrency ?? undefined,\r\n  }\r\n\r\n  let inputError: string | undefined\r\n  if (!account) {\r\n    inputError = 'Connect Wallet'\r\n  }\r\n\r\n  if (!parsedAmount) {\r\n    inputError = inputError ?? 'Enter an amount'\r\n  }\r\n\r\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\r\n    inputError = inputError ?? 'Select a token'\r\n  }\r\n\r\n  const formattedTo = isAddress(to)\r\n  if (!to || !formattedTo) {\r\n    inputError = inputError ?? 'Enter a recipient'\r\n  } else if (\r\n    BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 ||\r\n    (bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo)) ||\r\n    (bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo))\r\n  ) {\r\n    inputError = inputError ?? 'Invalid recipient'\r\n  }\r\n\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage)\r\n\r\n  // compare input balance to max input based on version\r\n  const [balanceIn, amountIn] = [\r\n    currencyBalances[Field.INPUT],\r\n    slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null,\r\n  ]\r\n\r\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\r\n    inputError = `Insufficient ${amountIn.currency.symbol} balance`\r\n  }\r\n\r\n  return {\r\n    currencies,\r\n    currencyBalances,\r\n    parsedAmount,\r\n    v2Trade: v2Trade ?? undefined,\r\n    inputError,\r\n  }\r\n}\r\n\r\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\r\n  if (typeof urlParam === 'string') {\r\n    const valid = isAddress(urlParam)\r\n    if (valid) return valid\r\n    if (urlParam.toUpperCase() === 'BNB') return 'BNB'\r\n    if (valid === false) return 'BNB'\r\n  }\r\n  return ''\r\n}\r\n\r\nfunction parseTokenAmountURLParameter(urlParam: any): string {\r\n  // eslint-disable-next-line no-restricted-globals\r\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\r\n}\r\n\r\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\r\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\r\n}\r\n\r\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\r\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\r\nfunction validatedRecipient(recipient: any): string | null {\r\n  if (typeof recipient !== 'string') return null\r\n  const address = isAddress(recipient)\r\n  if (address) return address\r\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\r\n  if (ADDRESS_REGEX.test(recipient)) return recipient\r\n  return null\r\n}\r\n\r\nexport function queryParametersToSwapState(parsedQs: ParsedQs): SwapState {\r\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency)\r\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency)\r\n  if (inputCurrency === outputCurrency) {\r\n    if (typeof parsedQs.outputCurrency === 'string') {\r\n      inputCurrency = ''\r\n    } else {\r\n      outputCurrency = ''\r\n    }\r\n  }\r\n\r\n  const recipient = validatedRecipient(parsedQs.recipient)\r\n\r\n  return {\r\n    [Field.INPUT]: {\r\n      currencyId: inputCurrency,\r\n    },\r\n    [Field.OUTPUT]: {\r\n      currencyId: outputCurrency,\r\n    },\r\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\r\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\r\n    recipient,\r\n  }\r\n}\r\n\r\n// updates the swap state to use the defaults for a given network\r\nexport function useDefaultsFromURLSearch():\r\n  | { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined }\r\n  | undefined {\r\n  const { chainId } = useActiveWeb3React()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const parsedQs = useParsedQueryString()\r\n  const [result, setResult] = useState<\r\n    { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined } | undefined\r\n  >()\r\n\r\n  useEffect(() => {\r\n    if (!chainId) return\r\n    const parsed = queryParametersToSwapState(parsedQs)\r\n\r\n    dispatch(\r\n      replaceSwapState({\r\n        typedValue: parsed.typedValue,\r\n        field: parsed.independentField,\r\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\r\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\r\n        recipient: parsed.recipient,\r\n      })\r\n    )\r\n\r\n    setResult({ inputCurrencyId: parsed[Field.INPUT].currencyId, outputCurrencyId: parsed[Field.OUTPUT].currencyId })\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [dispatch, chainId])\r\n\r\n  return result\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\prices.ts",["833"],"import { CurrencyAmount, Fraction, JSBI, Percent, TokenAmount, Trade } from '@appleswap/sdk'\r\nimport {\r\n  BLOCKED_PRICE_IMPACT_NON_EXPERT,\r\n  ALLOWED_PRICE_IMPACT_HIGH,\r\n  ALLOWED_PRICE_IMPACT_LOW,\r\n  ALLOWED_PRICE_IMPACT_MEDIUM,\r\n} from '../constants'\r\n\r\nimport { Field } from '../state/swap/actions'\r\nimport { basisPointsToPercent } from './index'\r\n\r\nconst BASE_FEE = new Percent(JSBI.BigInt(20), JSBI.BigInt(10000))\r\nconst ONE_HUNDRED_PERCENT = new Percent(JSBI.BigInt(10000), JSBI.BigInt(10000))\r\nconst INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(BASE_FEE)\r\n\r\n// computes price breakdown for the trade\r\nexport function computeTradePriceBreakdown(\r\n  trade?: Trade\r\n): { priceImpactWithoutFee?: Percent; realizedLPFee?: CurrencyAmount } {\r\n  // for each hop in our trade, take away the x*y=k price impact from 0.2% fees\r\n  // e.g. for 3 tokens/2 hops: 1 - ((1 - .02) * (1-.02))\r\n  const realizedLPFee = !trade\r\n    ? undefined\r\n    : ONE_HUNDRED_PERCENT.subtract(\r\n        trade.route.pairs.reduce<Fraction>(\r\n          (currentFee: Fraction): Fraction => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),\r\n          ONE_HUNDRED_PERCENT\r\n        )\r\n      )\r\n\r\n  // remove lp fees from price impact\r\n  const priceImpactWithoutFeeFraction = trade && realizedLPFee ? trade.priceImpact.subtract(realizedLPFee) : undefined\r\n\r\n  // the x*y=k impact\r\n  const priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction\r\n    ? new Percent(priceImpactWithoutFeeFraction?.numerator, priceImpactWithoutFeeFraction?.denominator)\r\n    : undefined\r\n\r\n  // the amount of the input that accrues to LPs\r\n  const realizedLPFeeAmount =\r\n    realizedLPFee &&\r\n    trade &&\r\n    (trade.inputAmount instanceof TokenAmount\r\n      ? new TokenAmount(trade.inputAmount.token, realizedLPFee.multiply(trade.inputAmount.raw).quotient)\r\n      : CurrencyAmount.ether(realizedLPFee.multiply(trade.inputAmount.raw).quotient))\r\n\r\n  return { priceImpactWithoutFee: priceImpactWithoutFeePercent, realizedLPFee: realizedLPFeeAmount }\r\n}\r\n\r\n// computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips\r\nexport function computeSlippageAdjustedAmounts(\r\n  trade: Trade | undefined,\r\n  allowedSlippage: number\r\n): { [field in Field]?: CurrencyAmount } {\r\n  const pct = basisPointsToPercent(allowedSlippage)\r\n  return {\r\n    [Field.INPUT]: trade?.maximumAmountIn(pct),\r\n    [Field.OUTPUT]: trade?.minimumAmountOut(pct),\r\n  }\r\n}\r\n\r\nexport function warningSeverity(priceImpact: Percent | undefined): 0 | 1 | 2 | 3 | 4 {\r\n  if (!priceImpact?.lessThan(BLOCKED_PRICE_IMPACT_NON_EXPERT)) return 4\r\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_HIGH)) return 3\r\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_MEDIUM)) return 2\r\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_LOW)) return 1\r\n  return 0\r\n}\r\n\r\nexport function formatExecutionPrice(trade?: Trade, inverted?: boolean): string {\r\n  if (!trade) {\r\n    return ''\r\n  }\r\n  return inverted\r\n    ? `${trade.executionPrice.invert().toSignificant(6)} ${trade.inputAmount.currency.symbol} / ${\r\n        trade.outputAmount.currency.symbol\r\n      }`\r\n    : `${trade.executionPrice.toSignificant(6)} ${trade.outputAmount.currency.symbol} / ${\r\n        trade.inputAmount.currency.symbol\r\n      }`\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\data\\Allowances.ts",["834"],"import { Token, TokenAmount } from '@appleswap/sdk'\r\nimport { useMemo } from 'react'\r\n\r\nimport { useTokenContract } from '../hooks/useContract'\r\nimport { useSingleCallResult } from '../state/multicall/hooks'\r\n\r\nexport function useTokenAllowance(token?: Token, owner?: string, spender?: string): TokenAmount | undefined {\r\n  const contract = useTokenContract(token?.address, false)\r\n\r\n  const inputs = useMemo(() => [owner, spender], [owner, spender])\r\n  const allowance = useSingleCallResult(contract, 'allowance', inputs).result\r\n\r\n  return useMemo(() => (token && allowance ? new TokenAmount(token, allowance.toString()) : undefined), [\r\n    token,\r\n    allowance,\r\n  ])\r\n}\r\n\r\nexport default useTokenAllowance\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SearchModal\\CurrencySearchModal.tsx",["835"],"import { Currency } from '@appleswap/sdk'\r\nimport React, { useCallback, useEffect, useState } from 'react'\r\nimport useLast from '../../hooks/useLast'\r\nimport { useSelectedListUrl } from '../../state/lists/hooks'\r\nimport Modal from '../Modal'\r\nimport { CurrencySearch } from './CurrencySearch'\r\nimport { ListSelect } from './ListSelect'\r\n\r\ninterface CurrencySearchModalProps {\r\n  isOpen: boolean\r\n  onDismiss: () => void\r\n  selectedCurrency?: Currency | null\r\n  onCurrencySelect: (currency: Currency) => void\r\n  otherSelectedCurrency?: Currency | null\r\n  // eslint-disable-next-line react/no-unused-prop-types\r\n  showCommonBases?: boolean\r\n}\r\n\r\nexport default function CurrencySearchModal({\r\n  isOpen,\r\n  onDismiss,\r\n  onCurrencySelect,\r\n  selectedCurrency,\r\n  otherSelectedCurrency,\r\n}: CurrencySearchModalProps) {\r\n  const [listView, setListView] = useState<boolean>(false)\r\n  const lastOpen = useLast(isOpen)\r\n\r\n  useEffect(() => {\r\n    if (isOpen && !lastOpen) {\r\n      setListView(false)\r\n    }\r\n  }, [isOpen, lastOpen])\r\n\r\n  const handleCurrencySelect = useCallback(\r\n    (currency: Currency) => {\r\n      onCurrencySelect(currency)\r\n      onDismiss()\r\n    },\r\n    [onDismiss, onCurrencySelect]\r\n  )\r\n\r\n  const handleClickChangeList = useCallback(() => {\r\n    setListView(true)\r\n  }, [])\r\n  const handleClickBack = useCallback(() => {\r\n    setListView(false)\r\n  }, [])\r\n\r\n  const selectedListUrl = useSelectedListUrl()\r\n  const noListSelected = !selectedListUrl\r\n\r\n  return (\r\n    <Modal isOpen={isOpen} onDismiss={onDismiss} maxHeight={90} minHeight={listView ? 40 : noListSelected ? 0 : 80}>\r\n      {listView ? (\r\n        <ListSelect onDismiss={onDismiss} onBack={handleClickBack} />\r\n      ) : noListSelected ? (\r\n        <CurrencySearch\r\n          isOpen={isOpen}\r\n          onDismiss={onDismiss}\r\n          onCurrencySelect={handleCurrencySelect}\r\n          onChangeList={handleClickChangeList}\r\n          selectedCurrency={selectedCurrency}\r\n          otherSelectedCurrency={otherSelectedCurrency}\r\n          showCommonBases={false}\r\n        />\r\n      ) : (\r\n        <CurrencySearch\r\n          isOpen={isOpen}\r\n          onDismiss={onDismiss}\r\n          onCurrencySelect={handleCurrencySelect}\r\n          onChangeList={handleClickChangeList}\r\n          selectedCurrency={selectedCurrency}\r\n          otherSelectedCurrency={otherSelectedCurrency}\r\n          showCommonBases={false}\r\n        />\r\n      )}\r\n    </Modal>\r\n  )\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Popups\\TransactionPopup.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Popups\\ListUpdatePopup.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\CurrencyLogo\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Slider\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\NavigationTabs\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\DoubleLogo\\index.tsx",["836"],"import { Currency } from '@appleswap/sdk'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport CurrencyLogo from '../CurrencyLogo'\r\n\r\nconst Wrapper = styled.div<{ margin: boolean; sizeraw: number }>`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin-right: ${({ sizeraw, margin }) => margin && `${(sizeraw / 3 + 8).toString()  }px`};\r\n`\r\n\r\ninterface DoubleCurrencyLogoProps {\r\n  margin?: boolean\r\n  size?: number\r\n  currency0?: Currency\r\n  currency1?: Currency\r\n}\r\n\r\nconst HigherLogo = styled(CurrencyLogo)`\r\n  z-index: 2;\r\n`\r\nconst CoveredLogo = styled(CurrencyLogo)<{ sizeraw: number }>`\r\n  position: absolute;\r\n  left: ${({ sizeraw }) => `${(sizeraw / 2).toString()  }px`};\r\n`\r\n\r\nexport default function DoubleCurrencyLogo({\r\n  currency0,\r\n  currency1,\r\n  size = 16,\r\n  margin = false\r\n}: DoubleCurrencyLogoProps) {\r\n  return (\r\n    <Wrapper sizeraw={size} margin={margin}>\r\n      {currency0 && <HigherLogo currency={currency0} size={`${size.toString()  }px`} />}\r\n      {currency1 && <CoveredLogo currency={currency1} size={`${size.toString()  }px`} sizeraw={size} />}\r\n    </Wrapper>\r\n  )\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Card\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\PageHeader\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\QuestionHelper\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\CardNav\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\maxAmountSpend.ts",["837"],"import { CurrencyAmount, ETHER, JSBI } from '@appleswap/sdk'\r\nimport { MIN_ETH } from '../constants'\r\n\r\n/**\r\n * Given some token amount, return the max that can be spent of it\r\n * @param currencyAmount to return max of\r\n */\r\nexport function maxAmountSpend(currencyAmount?: CurrencyAmount): CurrencyAmount | undefined {\r\n  if (!currencyAmount) return undefined\r\n  if (currencyAmount.currency === ETHER) {\r\n    if (JSBI.greaterThan(currencyAmount.raw, MIN_ETH)) {\r\n      return CurrencyAmount.ether(JSBI.subtract(currencyAmount.raw, MIN_ETH))\r\n    }\r\n    return CurrencyAmount.ether(JSBI.BigInt(0))\r\n  }\r\n  return currencyAmount\r\n}\r\n\r\nexport default maxAmountSpend\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useWrapCallback.ts",["838"],"import { Currency, currencyEquals, ETHER, WETH } from '@appleswap/sdk'\r\nimport { useMemo } from 'react'\r\nimport { tryParseAmount } from '../state/swap/hooks'\r\nimport { useTransactionAdder } from '../state/transactions/hooks'\r\nimport { useCurrencyBalance } from '../state/wallet/hooks'\r\nimport { useActiveWeb3React } from './index'\r\nimport { useWETHContract } from './useContract'\r\n\r\nexport enum WrapType {\r\n  NOT_APPLICABLE,\r\n  WRAP,\r\n  UNWRAP\r\n}\r\n\r\nconst NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE }\r\n/**\r\n * Given the selected input and output currency, return a wrap callback\r\n * @param inputCurrency the selected input currency\r\n * @param outputCurrency the selected output currency\r\n * @param typedValue the user input value\r\n */\r\nexport default function useWrapCallback(\r\n  inputCurrency: Currency | undefined,\r\n  outputCurrency: Currency | undefined,\r\n  typedValue: string | undefined\r\n): { wrapType: WrapType; execute?: undefined | (() => Promise<void>); inputError?: string } {\r\n  const { chainId, account } = useActiveWeb3React()\r\n  const wethContract = useWETHContract()\r\n  const balance = useCurrencyBalance(account ?? undefined, inputCurrency)\r\n  // we can always parse the amount typed as the input currency, since wrapping is 1:1\r\n  const inputAmount = useMemo(() => tryParseAmount(typedValue, inputCurrency), [inputCurrency, typedValue])\r\n  const addTransaction = useTransactionAdder()\r\n\r\n  return useMemo(() => {\r\n    if (!wethContract || !chainId || !inputCurrency || !outputCurrency) return NOT_APPLICABLE\r\n\r\n    const sufficientBalance = inputAmount && balance && !balance.lessThan(inputAmount)\r\n\r\n    if (inputCurrency === ETHER && currencyEquals(WETH[chainId], outputCurrency)) {\r\n      return {\r\n        wrapType: WrapType.WRAP,\r\n        execute:\r\n          sufficientBalance && inputAmount\r\n            ? async () => {\r\n                try {\r\n                  const txReceipt = await wethContract.deposit({ value: `0x${inputAmount.raw.toString(16)}` })\r\n                  addTransaction(txReceipt, { summary: `Wrap ${inputAmount.toSignificant(6)} BNB to WBNB` })\r\n                } catch (error) {\r\n                  console.error('Could not deposit', error)\r\n                }\r\n              }\r\n            : undefined,\r\n        inputError: sufficientBalance ? undefined : 'Insufficient BNB balance'\r\n      }\r\n    } if (currencyEquals(WETH[chainId], inputCurrency) && outputCurrency === ETHER) {\r\n      return {\r\n        wrapType: WrapType.UNWRAP,\r\n        execute:\r\n          sufficientBalance && inputAmount\r\n            ? async () => {\r\n                try {\r\n                  const txReceipt = await wethContract.withdraw(`0x${inputAmount.raw.toString(16)}`)\r\n                  addTransaction(txReceipt, { summary: `Unwrap ${inputAmount.toSignificant(6)} WBNB to BNB` })\r\n                } catch (error) {\r\n                  console.error('Could not withdraw', error)\r\n                }\r\n              }\r\n            : undefined,\r\n        inputError: sufficientBalance ? undefined : 'Insufficient WBNB balance'\r\n      }\r\n    } \r\n      return NOT_APPLICABLE\r\n    \r\n  }, [wethContract, chainId, inputCurrency, outputCurrency, inputAmount, balance, addTransaction])\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useParsedQueryString.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\Trades.ts",["839"],"import { Currency, CurrencyAmount, Pair, Token, Trade } from '@appleswap/sdk'\r\nimport flatMap from 'lodash.flatmap'\r\nimport { useMemo } from 'react'\r\n\r\nimport { BASES_TO_CHECK_TRADES_AGAINST, CUSTOM_BASES } from '../constants'\r\nimport { PairState, usePairs } from '../data/Reserves'\r\nimport { wrappedCurrency } from '../utils/wrappedCurrency'\r\n\r\nimport { useActiveWeb3React } from './index'\r\n\r\nfunction useAllCommonPairs(currencyA?: Currency, currencyB?: Currency): Pair[] {\r\n  const { chainId } = useActiveWeb3React()\r\n\r\n  // Base tokens for building intermediary trading routes\r\n  const bases: Token[] = useMemo(() => (chainId ? BASES_TO_CHECK_TRADES_AGAINST[chainId] : []), [chainId])\r\n\r\n  // All pairs from base tokens\r\n  const basePairs: [Token, Token][] = useMemo(\r\n    () =>\r\n      flatMap(bases, (base): [Token, Token][] => bases.map((otherBase) => [base, otherBase])).filter(\r\n        ([t0, t1]) => t0.address !== t1.address\r\n      ),\r\n    [bases]\r\n  )\r\n\r\n  const [tokenA, tokenB] = chainId\r\n    ? [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\r\n    : [undefined, undefined]\r\n\r\n  const allPairCombinations: [Token, Token][] = useMemo(\r\n    () =>\r\n      tokenA && tokenB\r\n        ? [\r\n            // the direct pair\r\n            [tokenA, tokenB],\r\n            // token A against all bases\r\n            ...bases.map((base): [Token, Token] => [tokenA, base]),\r\n            // token B against all bases\r\n            ...bases.map((base): [Token, Token] => [tokenB, base]),\r\n            // each base against all bases\r\n            ...basePairs,\r\n          ]\r\n            .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\r\n            .filter(([t0, t1]) => t0.address !== t1.address)\r\n            // This filter will remove all the pairs that are not supported by the CUSTOM_BASES settings\r\n            // This option is currently not used on Pancake swap\r\n            .filter(([t0, t1]) => {\r\n              if (!chainId) return true\r\n              const customBases = CUSTOM_BASES[chainId]\r\n              if (!customBases) return true\r\n\r\n              const customBasesA: Token[] | undefined = customBases[t0.address]\r\n              const customBasesB: Token[] | undefined = customBases[t1.address]\r\n\r\n              if (!customBasesA && !customBasesB) return true\r\n              if (customBasesA && !customBasesA.find((base) => t1.equals(base))) return false\r\n              if (customBasesB && !customBasesB.find((base) => t0.equals(base))) return false\r\n\r\n              return true\r\n            })\r\n        : [],\r\n    [tokenA, tokenB, bases, basePairs, chainId]\r\n  )\r\n\r\n  const allPairs = usePairs(allPairCombinations)\r\n\r\n  // only pass along valid pairs, non-duplicated pairs\r\n  return useMemo(\r\n    () =>\r\n      Object.values(\r\n        allPairs\r\n          // filter out invalid pairs\r\n          .filter((result): result is [PairState.EXISTS, Pair] => Boolean(result[0] === PairState.EXISTS && result[1]))\r\n          // filter out duplicated pairs\r\n          .reduce<{ [pairAddress: string]: Pair }>((memo, [, curr]) => {\r\n            memo[curr.liquidityToken.address] = memo[curr.liquidityToken.address] ?? curr\r\n            return memo\r\n          }, {})\r\n      ),\r\n    [allPairs]\r\n  )\r\n}\r\n\r\n/**\r\n * Returns the best trade for the exact amount of tokens in to the given token out\r\n */\r\nexport function useTradeExactIn(currencyAmountIn?: CurrencyAmount, currencyOut?: Currency): Trade | null {\r\n  const allowedPairs = useAllCommonPairs(currencyAmountIn?.currency, currencyOut)\r\n\r\n  return useMemo(() => {\r\n    if (currencyAmountIn && currencyOut && allowedPairs.length > 0) {\r\n      return (\r\n        Trade.bestTradeExactIn(allowedPairs, currencyAmountIn, currencyOut, { maxHops: 3, maxNumResults: 1 })[0] ?? null\r\n      )\r\n    }\r\n    return null\r\n  }, [allowedPairs, currencyAmountIn, currencyOut])\r\n}\r\n\r\n/**\r\n * Returns the best trade for the token in to the exact amount of token out\r\n */\r\nexport function useTradeExactOut(currencyIn?: Currency, currencyAmountOut?: CurrencyAmount): Trade | null {\r\n  const allowedPairs = useAllCommonPairs(currencyIn, currencyAmountOut?.currency)\r\n\r\n  return useMemo(() => {\r\n    if (currencyIn && currencyAmountOut && allowedPairs.length > 0) {\r\n      return (\r\n        Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, { maxHops: 3, maxNumResults: 1 })[0] ??\r\n        null\r\n      )\r\n    }\r\n    return null\r\n  }, [allowedPairs, currencyIn, currencyAmountOut])\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useENS.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\CurrencyInputPanel\\index.tsx",["840"],"import React, { useState, useCallback } from 'react'\r\nimport { Currency, Pair } from '@appleswap/sdk'\r\nimport { Button, ChevronDownIcon, Text } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport { darken } from 'polished'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useCurrencyBalance } from '../../state/wallet/hooks'\r\nimport CurrencySearchModal from '../SearchModal/CurrencySearchModal'\r\nimport CurrencyLogo from '../CurrencyLogo'\r\nimport DoubleCurrencyLogo from '../DoubleLogo'\r\nimport { RowBetween } from '../Row'\r\nimport { Input as NumericalInput } from '../NumericalInput'\r\nimport { useActiveWeb3React } from '../../hooks'\r\n\r\nconst InputRow = styled.div<{ selected: boolean }>`\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  align-items: center;\r\n  padding: ${({ selected }) => (selected ? '0.75rem 0.5rem 0.75rem 1rem' : '0.75rem 0.75rem 0.75rem 1rem')};\r\n`\r\nconst CurrencySelect = styled.button<{ selected: boolean }>`\r\n  align-items: center;\r\n  height: 34px;\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  background-color: transparent;\r\n  color: ${({ selected, theme }) => (selected ? theme.colors.text : '#FFFFFF')};\r\n  border-radius: 12px;\r\n  outline: none;\r\n  cursor: pointer;\r\n  user-select: none;\r\n  border: none;\r\n  padding: 0 0.5rem;\r\n  :focus,\r\n  :hover {\r\n    background-color: ${({ theme }) => darken(0.05, theme.colors.input)};\r\n  }\r\n`\r\nconst LabelRow = styled.div`\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  font-size: 0.75rem;\r\n  line-height: 1rem;\r\n  padding: 0.75rem 1rem 0 1rem;\r\n  span:hover {\r\n    cursor: pointer;\r\n    color: ${({ theme }) => darken(0.2, theme.colors.textSubtle)};\r\n  }\r\n`\r\nconst Aligner = styled.span`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`\r\nconst InputPanel = styled.div<{ hideInput?: boolean }>`\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  position: relative;\r\n  border-radius: ${({ hideInput }) => (hideInput ? '8px' : '20px')};\r\n  background-color: ${({ theme }) => theme.colors.background};\r\n  z-index: 1;\r\n`\r\nconst Container = styled.div<{ hideInput: boolean }>`\r\n  border-radius: 16px;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n`\r\ninterface CurrencyInputPanelProps {\r\n  value: string\r\n  onUserInput: (value: string) => void\r\n  onMax?: () => void\r\n  showMaxButton: boolean\r\n  label?: string\r\n  onCurrencySelect?: (currency: Currency) => void\r\n  currency?: Currency | null\r\n  disableCurrencySelect?: boolean\r\n  hideBalance?: boolean\r\n  pair?: Pair | null\r\n  hideInput?: boolean\r\n  otherCurrency?: Currency | null\r\n  id: string\r\n  showCommonBases?: boolean\r\n}\r\nexport default function CurrencyInputPanel({\r\n  value,\r\n  onUserInput,\r\n  onMax,\r\n  showMaxButton,\r\n  label,\r\n  onCurrencySelect,\r\n  currency,\r\n  disableCurrencySelect = false,\r\n  hideBalance = false,\r\n  pair = null, // used for double token logo\r\n  hideInput = false,\r\n  otherCurrency,\r\n  id,\r\n  showCommonBases,\r\n}: CurrencyInputPanelProps) {\r\n  const [modalOpen, setModalOpen] = useState(false)\r\n  const { account } = useActiveWeb3React()\r\n  const selectedCurrencyBalance = useCurrencyBalance(account ?? undefined, currency ?? undefined)\r\n  const TranslateString = useI18n()\r\n  const translatedLabel = label || TranslateString(132, 'Input')\r\n  const handleDismissSearch = useCallback(() => {\r\n    setModalOpen(false)\r\n  }, [setModalOpen])\r\n  return (\r\n    <InputPanel id={id}>\r\n      <Container hideInput={hideInput}>\r\n        {!hideInput && (\r\n          <LabelRow>\r\n            <RowBetween>\r\n              <Text fontSize=\"14px\">{translatedLabel}</Text>\r\n              {account && (\r\n                <Text onClick={onMax} fontSize=\"14px\" style={{ display: 'inline', cursor: 'pointer' }}>\r\n                  {!hideBalance && !!currency && selectedCurrencyBalance\r\n                    ? `Balance: ${selectedCurrencyBalance?.toSignificant(6)}`\r\n                    : ' -'}\r\n                </Text>\r\n              )}\r\n            </RowBetween>\r\n          </LabelRow>\r\n        )}\r\n        <InputRow style={hideInput ? { padding: '0', borderRadius: '8px' } : {}} selected={disableCurrencySelect}>\r\n          {!hideInput && (\r\n            <>\r\n              <NumericalInput\r\n                className=\"token-amount-input\"\r\n                value={value}\r\n                onUserInput={(val) => {\r\n                  onUserInput(val)\r\n                }}\r\n              />\r\n              {account && currency && showMaxButton && label !== 'To' && (\r\n                <Button onClick={onMax} scale=\"sm\" variant=\"text\">\r\n                  MAX\r\n                </Button>\r\n              )}\r\n            </>\r\n          )}\r\n          <CurrencySelect\r\n            selected={!!currency}\r\n            className=\"open-currency-select-button\"\r\n            onClick={() => {\r\n              if (!disableCurrencySelect) {\r\n                setModalOpen(true)\r\n              }\r\n            }}\r\n          >\r\n            <Aligner>\r\n              {pair ? (\r\n                <DoubleCurrencyLogo currency0={pair.token0} currency1={pair.token1} size={16} margin />\r\n              ) : currency ? (\r\n                <CurrencyLogo currency={currency} size=\"24px\" style={{ marginRight: '8px' }} />\r\n              ) : null}\r\n              {pair ? (\r\n                <Text id=\"pair\">\r\n                  {pair?.token0.symbol}:{pair?.token1.symbol}\r\n                </Text>\r\n              ) : (\r\n                <Text id=\"pair\">\r\n                  {(currency && currency.symbol && currency.symbol.length > 20\r\n                    ? `${currency.symbol.slice(0, 4)}...${currency.symbol.slice(\r\n                        currency.symbol.length - 5,\r\n                        currency.symbol.length\r\n                      )}`\r\n                    : currency?.symbol) || TranslateString(1196, 'Select a currency')}\r\n                </Text>\r\n              )}\r\n              {!disableCurrencySelect && <ChevronDownIcon />}\r\n            </Aligner>\r\n          </CurrencySelect>\r\n        </InputRow>\r\n      </Container>\r\n      {!disableCurrencySelect && onCurrencySelect && (\r\n        <CurrencySearchModal\r\n          isOpen={modalOpen}\r\n          onDismiss={handleDismissSearch}\r\n          onCurrencySelect={onCurrencySelect}\r\n          selectedCurrency={currency}\r\n          otherSelectedCurrency={otherCurrency}\r\n          showCommonBases={showCommonBases}\r\n        />\r\n      )}\r\n    </InputPanel>\r\n  )\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\TransactionConfirmationModal\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useLast.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\listVersionLabel.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useHttpLocations.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useSwapCallback.ts",["841"],"import { BigNumber } from '@ethersproject/bignumber'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { JSBI, Percent, Router, SwapParameters, Trade, TradeType } from '@appleswap/sdk'\r\nimport { useMemo } from 'react'\r\nimport { BIPS_BASE, DEFAULT_DEADLINE_FROM_NOW, INITIAL_ALLOWED_SLIPPAGE } from '../constants'\r\nimport { useTransactionAdder } from '../state/transactions/hooks'\r\nimport { calculateGasMargin, getRouterContract, isAddress, shortenAddress } from '../utils'\r\nimport isZero from '../utils/isZero'\r\nimport { useActiveWeb3React } from './index'\r\nimport useENS from './useENS'\r\n\r\n enum SwapCallbackState {\r\n  INVALID,\r\n  LOADING,\r\n  VALID,\r\n}\r\n\r\ninterface SwapCall {\r\n  contract: Contract\r\n  parameters: SwapParameters\r\n}\r\n\r\ninterface SuccessfulCall {\r\n  call: SwapCall\r\n  gasEstimate: BigNumber\r\n}\r\n\r\ninterface FailedCall {\r\n  call: SwapCall\r\n  error: Error\r\n}\r\n\r\ntype EstimatedSwapCall = SuccessfulCall | FailedCall\r\n\r\n/**\r\n * Returns the swap calls that can be used to make the trade\r\n * @param trade trade to execute\r\n * @param allowedSlippage user allowed slippage\r\n * @param deadline the deadline for the trade\r\n * @param recipientAddressOrName\r\n */\r\nfunction useSwapCallArguments(\r\n  trade: Trade | undefined, // trade to execute, required\r\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\r\n  deadline: number = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\r\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\r\n): SwapCall[] {\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n\r\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\r\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\r\n\r\n  return useMemo(() => {\r\n    if (!trade || !recipient || !library || !account || !chainId) return []\r\n\r\n    const contract: Contract | null = getRouterContract(chainId, library, account)\r\n    if (!contract) {\r\n      return []\r\n    }\r\n\r\n    const swapMethods = []\r\n\r\n    swapMethods.push(\r\n      // @ts-ignore\r\n      Router.swapCallParameters(trade, {\r\n        feeOnTransfer: false,\r\n        allowedSlippage: new Percent(JSBI.BigInt(Math.floor(allowedSlippage)), BIPS_BASE),\r\n        recipient,\r\n        ttl: deadline,\r\n      })\r\n    )\r\n\r\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\r\n      swapMethods.push(\r\n        // @ts-ignore\r\n        Router.swapCallParameters(trade, {\r\n          feeOnTransfer: true,\r\n          allowedSlippage: new Percent(JSBI.BigInt(Math.floor(allowedSlippage)), BIPS_BASE),\r\n          recipient,\r\n          ttl: deadline,\r\n        })\r\n      )\r\n    }\r\n\r\n    return swapMethods.map((parameters) => ({ parameters, contract }))\r\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade])\r\n}\r\n\r\n// returns a function that will execute a swap, if the parameters are all valid\r\n// and the user has approved the slippage adjusted input amount for the trade\r\nexport function useSwapCallback(\r\n  trade: Trade | undefined, // trade to execute, required\r\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\r\n  deadline: number = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\r\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\r\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } {\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n\r\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, deadline, recipientAddressOrName)\r\n\r\n  const addTransaction = useTransactionAdder()\r\n\r\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\r\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\r\n\r\n  return useMemo(() => {\r\n    if (!trade || !library || !account || !chainId) {\r\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\r\n    }\r\n    if (!recipient) {\r\n      if (recipientAddressOrName !== null) {\r\n        return { state: SwapCallbackState.INVALID, callback: null, error: 'Invalid recipient' }\r\n      }\r\n      return { state: SwapCallbackState.LOADING, callback: null, error: null }\r\n    }\r\n\r\n    return {\r\n      state: SwapCallbackState.VALID,\r\n      callback: async function onSwap(): Promise<string> {\r\n        const estimatedCalls: EstimatedSwapCall[] = await Promise.all(\r\n          swapCalls.map((call) => {\r\n            const {\r\n              parameters: { methodName, args, value },\r\n              contract,\r\n            } = call\r\n            const options = !value || isZero(value) ? {} : { value }\r\n\r\n            return contract.estimateGas[methodName](...args, options)\r\n              .then((gasEstimate) => {\r\n                return {\r\n                  call,\r\n                  gasEstimate,\r\n                }\r\n              })\r\n              .catch((gasError) => {\r\n                console.info('Gas estimate failed, trying eth_call to extract error', call)\r\n\r\n                return contract.callStatic[methodName](...args, options)\r\n                  .then((result) => {\r\n                    console.info('Unexpected successful call after failed estimate gas', call, gasError, result)\r\n                    return { call, error: new Error('Unexpected issue with estimating the gas. Please try again.') }\r\n                  })\r\n                  .catch((callError) => {\r\n                    console.info('Call threw error', call, callError)\r\n                    let errorMessage: string\r\n                    switch (callError.reason) {\r\n                      case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\r\n                      case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\r\n                        errorMessage =\r\n                          'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.'\r\n                        break\r\n                      default:\r\n                        errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`\r\n                    }\r\n                    return { call, error: new Error(errorMessage) }\r\n                  })\r\n              })\r\n          })\r\n        )\r\n\r\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\r\n        const successfulEstimation = estimatedCalls.find(\r\n          (el, ix, list): el is SuccessfulCall =>\r\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1])\r\n        )\r\n\r\n        if (!successfulEstimation) {\r\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\r\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error\r\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error')\r\n        }\r\n\r\n        const {\r\n          call: {\r\n            contract,\r\n            parameters: { methodName, args, value },\r\n          },\r\n          gasEstimate,\r\n        } = successfulEstimation\r\n\r\n        return contract[methodName](...args, {\r\n          gasLimit: calculateGasMargin(gasEstimate),\r\n          ...(value && !isZero(value) ? { value, from: account } : { from: account }),\r\n        })\r\n          .then((response: any) => {\r\n            const inputSymbol = trade.inputAmount.currency.symbol\r\n            const outputSymbol = trade.outputAmount.currency.symbol\r\n            const inputAmount = trade.inputAmount.toSignificant(3)\r\n            const outputAmount = trade.outputAmount.toSignificant(3)\r\n\r\n            const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`\r\n            const withRecipient =\r\n              recipient === account\r\n                ? base\r\n                : `${base} to ${\r\n                    recipientAddressOrName && isAddress(recipientAddressOrName)\r\n                      ? shortenAddress(recipientAddressOrName)\r\n                      : recipientAddressOrName\r\n                  }`\r\n\r\n            addTransaction(response, {\r\n              summary: withRecipient,\r\n            })\r\n\r\n            return response.hash\r\n          })\r\n          .catch((error: any) => {\r\n            // if the user rejected the tx, pass this along\r\n            if (error?.code === 4001) {\r\n              throw new Error('Transaction rejected.')\r\n            } else {\r\n              // otherwise, the error was unexpected and we need to convey that\r\n              console.error(`Swap failed`, error, methodName, args, value)\r\n              throw new Error(`Swap failed: ${error.message}`)\r\n            }\r\n          })\r\n      },\r\n      error: null,\r\n    }\r\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction])\r\n}\r\n\r\nexport default useSwapCallback","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SearchModal\\CurrencySearch.tsx",["842"],"import { Currency, ETHER, Token } from '@appleswap/sdk'\r\nimport React, { KeyboardEvent, RefObject, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\r\nimport { Text, CloseIcon } from '@pancakeswap-libs/uikit'\r\nimport { useSelector } from 'react-redux'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { FixedSizeList } from 'react-window'\r\nimport { ThemeContext } from 'styled-components'\r\nimport AutoSizer from 'react-virtualized-auto-sizer'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { AppState } from '../../state'\r\nimport { useAllTokens, useToken } from '../../hooks/Tokens'\r\nimport { useSelectedListInfo } from '../../state/lists/hooks'\r\nimport { LinkStyledButton } from '../Shared'\r\nimport { isAddress } from '../../utils'\r\nimport Card from '../Card'\r\nimport Column from '../Column'\r\nimport ListLogo from '../ListLogo'\r\nimport QuestionHelper from '../QuestionHelper'\r\nimport Row, { RowBetween } from '../Row'\r\nimport CommonBases from './CommonBases'\r\nimport CurrencyList from './CurrencyList'\r\nimport { filterTokens } from './filtering'\r\nimport SortButton from './SortButton'\r\nimport { useTokenComparator } from './sorting'\r\nimport { PaddedColumn, SearchInput, Separator } from './styleds'\r\n\r\ninterface CurrencySearchProps {\r\n  isOpen: boolean\r\n  onDismiss: () => void\r\n  selectedCurrency?: Currency | null\r\n  onCurrencySelect: (currency: Currency) => void\r\n  otherSelectedCurrency?: Currency | null\r\n  showCommonBases?: boolean\r\n  onChangeList: () => void\r\n}\r\n\r\nexport function CurrencySearch({\r\n  selectedCurrency,\r\n  onCurrencySelect,\r\n  otherSelectedCurrency,\r\n  showCommonBases,\r\n  onDismiss,\r\n  isOpen,\r\n  onChangeList,\r\n}: CurrencySearchProps) {\r\n  const { t } = useTranslation()\r\n  const { chainId } = useActiveWeb3React()\r\n  const theme = useContext(ThemeContext)\r\n\r\n  const fixedList = useRef<FixedSizeList>()\r\n  const [searchQuery, setSearchQuery] = useState<string>('')\r\n  const [invertSearchOrder, setInvertSearchOrder] = useState<boolean>(false)\r\n  const allTokens = useAllTokens()\r\n\r\n  // if they input an address, use it\r\n  const isAddressSearch = isAddress(searchQuery)\r\n  const searchToken = useToken(searchQuery)\r\n\r\n  const showETH: boolean = useMemo(() => {\r\n    const s = searchQuery.toLowerCase().trim()\r\n    return s === '' || s === 'b' || s === 'bn' || s === 'bnb'\r\n  }, [searchQuery])\r\n\r\n  const tokenComparator = useTokenComparator(invertSearchOrder)\r\n\r\n  const audioPlay = useSelector<AppState, AppState['user']['audioPlay']>((state) => state.user.audioPlay)\r\n\r\n  const filteredTokens: Token[] = useMemo(() => {\r\n    if (isAddressSearch) return searchToken ? [searchToken] : []\r\n    return filterTokens(Object.values(allTokens), searchQuery)\r\n  }, [isAddressSearch, searchToken, allTokens, searchQuery])\r\n\r\n  const filteredSortedTokens: Token[] = useMemo(() => {\r\n    if (searchToken) return [searchToken]\r\n    const sorted = filteredTokens.sort(tokenComparator)\r\n    const symbolMatch = searchQuery\r\n      .toLowerCase()\r\n      .split(/\\s+/)\r\n      .filter((s) => s.length > 0)\r\n    if (symbolMatch.length > 1) return sorted\r\n\r\n    return [\r\n      ...(searchToken ? [searchToken] : []),\r\n      // sort any exact symbol matches first\r\n      ...sorted.filter((token) => token.symbol?.toLowerCase() === symbolMatch[0]),\r\n      ...sorted.filter((token) => token.symbol?.toLowerCase() !== symbolMatch[0]),\r\n    ]\r\n  }, [filteredTokens, searchQuery, searchToken, tokenComparator])\r\n\r\n  const handleCurrencySelect = useCallback(\r\n    (currency: Currency) => {\r\n      onCurrencySelect(currency)\r\n      onDismiss()\r\n      if (audioPlay) {\r\n        const audio = document.getElementById('bgMusic') as HTMLAudioElement\r\n        if (audio) {\r\n          audio.play()\r\n        }\r\n      }\r\n    },\r\n    [onDismiss, onCurrencySelect, audioPlay]\r\n  )\r\n\r\n  // clear the input on open\r\n  useEffect(() => {\r\n    if (isOpen) setSearchQuery('')\r\n  }, [isOpen])\r\n\r\n  // manage focus on modal show\r\n  const inputRef = useRef<HTMLInputElement>()\r\n  const handleInput = useCallback((event) => {\r\n    const input = event.target.value\r\n    const checksummedInput = isAddress(input)\r\n    setSearchQuery(checksummedInput || input)\r\n    fixedList.current?.scrollTo(0)\r\n  }, [])\r\n\r\n  const handleEnter = useCallback(\r\n    (e: KeyboardEvent<HTMLInputElement>) => {\r\n      if (e.key === 'Enter') {\r\n        const s = searchQuery.toLowerCase().trim()\r\n        if (s === 'bnb') {\r\n          handleCurrencySelect(ETHER)\r\n        } else if (filteredSortedTokens.length > 0) {\r\n          if (\r\n            filteredSortedTokens[0].symbol?.toLowerCase() === searchQuery.trim().toLowerCase() ||\r\n            filteredSortedTokens.length === 1\r\n          ) {\r\n            handleCurrencySelect(filteredSortedTokens[0])\r\n          }\r\n        }\r\n      }\r\n    },\r\n    [filteredSortedTokens, handleCurrencySelect, searchQuery]\r\n  )\r\n\r\n  const selectedListInfo = useSelectedListInfo()\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <Column style={{ width: '100%', flex: '1 1' }}>\r\n      <PaddedColumn gap=\"14px\">\r\n        <RowBetween>\r\n          <Text>\r\n            {TranslateString(82, 'Select a token')}\r\n            <QuestionHelper\r\n              text={TranslateString(\r\n                128,\r\n                'Find a token by searching for its name or symbol or by pasting its address below.'\r\n              )}\r\n            />\r\n          </Text>\r\n          <CloseIcon onClick={onDismiss} />\r\n        </RowBetween>\r\n        <SearchInput\r\n          type=\"text\"\r\n          id=\"token-search-input\"\r\n          placeholder={t('tokenSearchPlaceholder')}\r\n          value={searchQuery}\r\n          ref={inputRef as RefObject<HTMLInputElement>}\r\n          onChange={handleInput}\r\n          onKeyDown={handleEnter}\r\n        />\r\n        {showCommonBases && (\r\n          <CommonBases chainId={chainId} onSelect={handleCurrencySelect} selectedCurrency={selectedCurrency} />\r\n        )}\r\n        <RowBetween>\r\n          <Text fontSize=\"14px\">{TranslateString(126, 'Token name')}</Text>\r\n          <SortButton ascending={invertSearchOrder} toggleSortOrder={() => setInvertSearchOrder((iso) => !iso)} />\r\n        </RowBetween>\r\n      </PaddedColumn>\r\n\r\n      <Separator />\r\n\r\n      <div style={{ flex: '1' }}>\r\n        <AutoSizer disableWidth>\r\n          {({ height }) => (\r\n            <CurrencyList\r\n              height={height}\r\n              showETH={showETH}\r\n              currencies={filteredSortedTokens}\r\n              onCurrencySelect={handleCurrencySelect}\r\n              otherCurrency={otherSelectedCurrency}\r\n              selectedCurrency={selectedCurrency}\r\n              fixedListRef={fixedList}\r\n            />\r\n          )}\r\n        </AutoSizer>\r\n      </div>\r\n\r\n      {null && (\r\n        <>\r\n          <Separator />\r\n          <Card>\r\n            <RowBetween>\r\n              {selectedListInfo.current ? (\r\n                <Row>\r\n                  {selectedListInfo.current.logoURI ? (\r\n                    <ListLogo\r\n                      style={{ marginRight: 12 }}\r\n                      logoURI={selectedListInfo.current.logoURI}\r\n                      alt={`${selectedListInfo.current.name} list logo`}\r\n                    />\r\n                  ) : null}\r\n                  <Text id=\"currency-search-selected-list-name\">{selectedListInfo.current.name}</Text>\r\n                </Row>\r\n              ) : null}\r\n              <LinkStyledButton\r\n                style={{ fontWeight: 500, color: theme.colors.textSubtle, fontSize: 16 }}\r\n                onClick={onChangeList}\r\n                id=\"currency-search-change-list-button\"\r\n              >\r\n                {selectedListInfo.current ? TranslateString(180, 'Change') : TranslateString(1152, 'Select a list')}\r\n              </LinkStyledButton>\r\n            </RowBetween>\r\n          </Card>\r\n        </>\r\n      )}\r\n    </Column>\r\n  )\r\n}\r\n\r\nexport default CurrencySearch\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SearchModal\\ListSelect.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\pancake\\CoinLogo.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\pages\\AddLiquidity\\ConfirmAddModalBottom.tsx",["843"],"import { Currency, CurrencyAmount, Fraction, Percent } from '@appleswap/sdk'\r\nimport React from 'react'\r\nimport { Button, Text } from '@pancakeswap-libs/uikit'\r\nimport { TranslateString } from 'utils/translateTextHelpers'\r\nimport { RowBetween, RowFixed } from '../../components/Row'\r\nimport CurrencyLogo from '../../components/CurrencyLogo'\r\nimport { Field } from '../../state/mint/actions'\r\n\r\nexport function ConfirmAddModalBottom({\r\n  noLiquidity,\r\n  price,\r\n  currencies,\r\n  parsedAmounts,\r\n  poolTokenPercentage,\r\n  onAdd,\r\n}: {\r\n  noLiquidity?: boolean\r\n  price?: Fraction\r\n  currencies: { [field in Field]?: Currency }\r\n  parsedAmounts: { [field in Field]?: CurrencyAmount }\r\n  poolTokenPercentage?: Percent\r\n  onAdd: () => void\r\n}) {\r\n  return (\r\n    <>\r\n      <RowBetween>\r\n        <Text>{currencies[Field.CURRENCY_A]?.symbol} Deposited</Text>\r\n        <RowFixed>\r\n          <CurrencyLogo currency={currencies[Field.CURRENCY_A]} style={{ marginRight: '8px' }} />\r\n          <Text>{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</Text>\r\n        </RowFixed>\r\n      </RowBetween>\r\n      <RowBetween>\r\n        <Text>{currencies[Field.CURRENCY_B]?.symbol} Deposited</Text>\r\n        <RowFixed>\r\n          <CurrencyLogo currency={currencies[Field.CURRENCY_B]} style={{ marginRight: '8px' }} />\r\n          <Text>{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</Text>\r\n        </RowFixed>\r\n      </RowBetween>\r\n      <RowBetween>\r\n        <Text>Rates</Text>\r\n        <Text>\r\n          {`1 ${currencies[Field.CURRENCY_A]?.symbol} = ${price?.toSignificant(4)} ${\r\n            currencies[Field.CURRENCY_B]?.symbol\r\n          }`}\r\n        </Text>\r\n      </RowBetween>\r\n      <RowBetween style={{ justifyContent: 'flex-end' }}>\r\n        <Text>\r\n          {`1 ${currencies[Field.CURRENCY_B]?.symbol} = ${price?.invert().toSignificant(4)} ${\r\n            currencies[Field.CURRENCY_A]?.symbol\r\n          }`}\r\n        </Text>\r\n      </RowBetween>\r\n      <RowBetween>\r\n        <Text>Share of Pool:</Text>\r\n        <Text>{noLiquidity ? '100' : poolTokenPercentage?.toSignificant(4)}%</Text>\r\n      </RowBetween>\r\n      <Button mt=\"20px\" onClick={onAdd}>\r\n        {noLiquidity ? TranslateString(250, 'Create Pool & Supply') : TranslateString(252, 'Confirm Supply')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ConfirmAddModalBottom\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\confirmPriceImpactWithoutFee.ts",["844"],"import { Percent } from '@appleswap/sdk'\r\nimport { ALLOWED_PRICE_IMPACT_HIGH, PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN } from '../../constants'\r\n\r\n/**\r\n * Given the price impact, get user confirmation.\r\n *\r\n * @param priceImpactWithoutFee price impact of the trade without the fee.\r\n */\r\nexport default function confirmPriceImpactWithoutFee(priceImpactWithoutFee: Percent): boolean {\r\n  if (!priceImpactWithoutFee.lessThan(PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN)) {\r\n    return (\r\n      window.prompt(\r\n        `This swap has a price impact of at least ${PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN.toFixed(\r\n          0\r\n        )}%. Please type the word \"confirm\" to continue with this swap.`\r\n      ) === 'confirm'\r\n    )\r\n  } if (!priceImpactWithoutFee.lessThan(ALLOWED_PRICE_IMPACT_HIGH)) {\r\n    return window.confirm(\r\n      `This swap has a price impact of at least ${ALLOWED_PRICE_IMPACT_HIGH.toFixed(\r\n        0\r\n      )}%. Please confirm that you would like to continue with this swap.`\r\n    )\r\n  }\r\n  return true\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\TradePrice.tsx",["845"],"import React from 'react'\r\nimport { Price } from '@appleswap/sdk'\r\nimport { SyncAltIcon, Text } from '@pancakeswap-libs/uikit'\r\nimport { StyledBalanceMaxMini } from './styleds'\r\n\r\ninterface TradePriceProps {\r\n  price?: Price\r\n  showInverted: boolean\r\n  setShowInverted: (showInverted: boolean) => void\r\n}\r\n\r\nexport default function TradePrice({ price, showInverted, setShowInverted }: TradePriceProps) {\r\n  const formattedPrice = showInverted ? price?.toSignificant(6) : price?.invert()?.toSignificant(6)\r\n\r\n  const show = Boolean(price?.baseCurrency && price?.quoteCurrency)\r\n  const label = showInverted\r\n    ? `${price?.quoteCurrency?.symbol} per ${price?.baseCurrency?.symbol}`\r\n    : `${price?.baseCurrency?.symbol} per ${price?.quoteCurrency?.symbol}`\r\n\r\n  return (\r\n    <Text fontSize=\"14px\" style={{ justifyContent: 'center', alignItems: 'center', display: 'flex' }}>\r\n      {show ? (\r\n        <>\r\n          {formattedPrice ?? '-'} {label}\r\n          <StyledBalanceMaxMini onClick={() => setShowInverted(!showInverted)}>\r\n            <SyncAltIcon width=\"20px\" color=\"primary\" />\r\n          </StyledBalanceMaxMini>\r\n        </>\r\n      ) : (\r\n        '-'\r\n      )}\r\n    </Text>\r\n  )\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\PageHeader\\RecentTransactionsModal.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\PageHeader\\SettingsModal.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useENSName.ts",["846"],"import { namehash } from 'ethers/lib/utils'\r\nimport { useMemo } from 'react'\r\nimport { useSingleCallResult } from '../state/multicall/hooks'\r\nimport { isAddress } from '../utils'\r\nimport isZero from '../utils/isZero'\r\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract'\r\nimport useDebounce from './useDebounce'\r\n\r\n/**\r\n * Does a reverse lookup for an address to find its ENS name.\r\n * Note this is not the same as looking up an ENS name to find an address.\r\n */\r\nexport default function useENSName(address?: string): { ENSName: string | null; loading: boolean } {\r\n  const debouncedAddress = useDebounce(address, 200)\r\n  const ensNodeArgument = useMemo(() => {\r\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined]\r\n    try {\r\n      return debouncedAddress ? [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)] : [undefined]\r\n    } catch (error) {\r\n      return [undefined]\r\n    }\r\n  }, [debouncedAddress])\r\n  const registrarContract = useENSRegistrarContract(false)\r\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\r\n  const resolverAddressResult = resolverAddress.result?.[0]\r\n  const resolverContract = useENSResolverContract(\r\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\r\n    false\r\n  )\r\n  const name = useSingleCallResult(resolverContract, 'name', ensNodeArgument)\r\n\r\n  const changed = debouncedAddress !== address\r\n  return {\r\n    ENSName: changed ? null : name.result?.[0] ?? null,\r\n    loading: changed || resolverAddress.loading || name.loading\r\n  }\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useENSAddress.ts",["847"],"import { namehash } from 'ethers/lib/utils'\r\nimport { useMemo } from 'react'\r\nimport { useSingleCallResult } from '../state/multicall/hooks'\r\nimport isZero from '../utils/isZero'\r\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract'\r\nimport useDebounce from './useDebounce'\r\n\r\n/**\r\n * Does a lookup for an ENS name to find its address.\r\n */\r\nexport default function useENSAddress(ensName?: string | null): { loading: boolean; address: string | null } {\r\n  const debouncedName = useDebounce(ensName, 200)\r\n  const ensNodeArgument = useMemo(() => {\r\n    if (!debouncedName) return [undefined]\r\n    try {\r\n      return debouncedName ? [namehash(debouncedName)] : [undefined]\r\n    } catch (error) {\r\n      return [undefined]\r\n    }\r\n  }, [debouncedName])\r\n  const registrarContract = useENSRegistrarContract(false)\r\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\r\n  const resolverAddressResult = resolverAddress.result?.[0]\r\n  const resolverContract = useENSResolverContract(\r\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\r\n    false\r\n  )\r\n  const addr = useSingleCallResult(resolverContract, 'addr', ensNodeArgument)\r\n\r\n  const changed = debouncedName !== ensName\r\n  return {\r\n    address: changed ? null : addr.result?.[0] ?? null,\r\n    loading: changed || resolverAddress.loading || addr.loading\r\n  }\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\ConnectWalletButton\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\V2ExchangeRedirectModal\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\TransactionConfirmationModal\\TransactionSubmittedContent.tsx",["848"],"import { ChainId } from '@appleswap/sdk'\r\nimport React, { useContext } from 'react'\r\nimport { ThemeContext } from 'styled-components'\r\nimport { Button, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport { ArrowUpCircle } from 'react-feather'\r\nimport { AutoColumn } from '../Column'\r\nimport { getBscScanLink } from '../../utils'\r\nimport { Wrapper, Section, ConfirmedIcon, ContentHeader } from './helpers'\r\n\r\ntype TransactionSubmittedContentProps = {\r\n  onDismiss: () => void\r\n  hash: string | undefined\r\n  chainId: ChainId\r\n}\r\n\r\nconst TransactionSubmittedContent = ({ onDismiss, chainId, hash }: TransactionSubmittedContentProps) => {\r\n  const theme = useContext(ThemeContext)\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Section>\r\n        <ContentHeader onDismiss={onDismiss}>Transaction submitted</ContentHeader>\r\n        <ConfirmedIcon>\r\n          <ArrowUpCircle strokeWidth={0.5} size={97} color={theme.colors.primary} />\r\n        </ConfirmedIcon>\r\n        <AutoColumn gap=\"8px\" justify=\"center\">\r\n          {chainId && hash && (\r\n            <LinkExternal href={getBscScanLink(chainId, hash, 'transaction')}>View on BscScan</LinkExternal>\r\n          )}\r\n          <Button onClick={onDismiss} mt=\"20px\">\r\n            Close\r\n          </Button>\r\n        </AutoColumn>\r\n      </Section>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default TransactionSubmittedContent\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\TransactionConfirmationModal\\TransactionErrorContent.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\TransactionConfirmationModal\\ConfirmationPendingContent.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\TransactionConfirmationModal\\ConfirmationModalContent.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\TransactionConfirmationModal\\TransactionConfirmationModal.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useENSContentHash.ts",["849"],"import { namehash } from 'ethers/lib/utils'\r\nimport { useMemo } from 'react'\r\nimport { useSingleCallResult } from '../state/multicall/hooks'\r\nimport isZero from '../utils/isZero'\r\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract'\r\n\r\n/**\r\n * Does a lookup for an ENS name to find its contenthash.\r\n */\r\nexport default function useENSContentHash(ensName?: string | null): { loading: boolean; contenthash: string | null } {\r\n  const ensNodeArgument = useMemo(() => {\r\n    if (!ensName) return [undefined]\r\n    try {\r\n      return ensName ? [namehash(ensName)] : [undefined]\r\n    } catch (error) {\r\n      return [undefined]\r\n    }\r\n  }, [ensName])\r\n  const registrarContract = useENSRegistrarContract(false)\r\n  const resolverAddressResult = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\r\n  const resolverAddress = resolverAddressResult.result?.[0]\r\n  const resolverContract = useENSResolverContract(\r\n    resolverAddress && isZero(resolverAddress) ? undefined : resolverAddress,\r\n    false\r\n  )\r\n  const contenthash = useSingleCallResult(resolverContract, 'contenthash', ensNodeArgument)\r\n\r\n  return {\r\n    contenthash: contenthash.result?.[0] ?? null,\r\n    loading: resolverAddressResult.loading || contenthash.loading\r\n  }\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\isZero.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\uriToHttp.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\AdvancedSwapDetailsDropdown.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Modal\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\ConfirmSwapModal.tsx",["850"],"import { currencyEquals, Trade } from '@appleswap/sdk'\r\nimport React, { useCallback, useMemo } from 'react'\r\nimport TransactionConfirmationModal, {\r\n  ConfirmationModalContent,\r\n  TransactionErrorContent\r\n} from '../TransactionConfirmationModal'\r\nimport SwapModalFooter from './SwapModalFooter'\r\nimport SwapModalHeader from './SwapModalHeader'\r\n\r\n/**\r\n * Returns true if the trade requires a confirmation of details before we can submit it\r\n * @param tradeA trade A\r\n * @param tradeB trade B\r\n */\r\nfunction tradeMeaningfullyDiffers(tradeA: Trade, tradeB: Trade): boolean {\r\n  return (\r\n    tradeA.tradeType !== tradeB.tradeType ||\r\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\r\n    !tradeA.inputAmount.equalTo(tradeB.inputAmount) ||\r\n    !currencyEquals(tradeA.outputAmount.currency, tradeB.outputAmount.currency) ||\r\n    !tradeA.outputAmount.equalTo(tradeB.outputAmount)\r\n  )\r\n}\r\n\r\nexport default function ConfirmSwapModal({\r\n  trade,\r\n  originalTrade,\r\n  onAcceptChanges,\r\n  allowedSlippage,\r\n  onConfirm,\r\n  onDismiss,\r\n  recipient,\r\n  swapErrorMessage,\r\n  isOpen,\r\n  attemptingTxn,\r\n  txHash\r\n}: {\r\n  isOpen: boolean\r\n  trade: Trade | undefined\r\n  originalTrade: Trade | undefined\r\n  attemptingTxn: boolean\r\n  txHash: string | undefined\r\n  recipient: string | null\r\n  allowedSlippage: number\r\n  onAcceptChanges: () => void\r\n  onConfirm: () => void\r\n  swapErrorMessage: string | undefined\r\n  onDismiss: () => void\r\n}) {\r\n  const showAcceptChanges = useMemo(\r\n    () => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)),\r\n    [originalTrade, trade]\r\n  )\r\n\r\n  const modalHeader = useCallback(() => {\r\n    return trade ? (\r\n      <SwapModalHeader\r\n        trade={trade}\r\n        allowedSlippage={allowedSlippage}\r\n        recipient={recipient}\r\n        showAcceptChanges={showAcceptChanges}\r\n        onAcceptChanges={onAcceptChanges}\r\n      />\r\n    ) : null\r\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade])\r\n\r\n  const modalBottom = useCallback(() => {\r\n    return trade ? (\r\n      <SwapModalFooter\r\n        onConfirm={onConfirm}\r\n        trade={trade}\r\n        disabledConfirm={showAcceptChanges}\r\n        swapErrorMessage={swapErrorMessage}\r\n        allowedSlippage={allowedSlippage}\r\n      />\r\n    ) : null\r\n  }, [allowedSlippage, onConfirm, showAcceptChanges, swapErrorMessage, trade])\r\n\r\n  // text to show while loading\r\n  const pendingText = `Swapping ${trade?.inputAmount?.toSignificant(6)} ${\r\n    trade?.inputAmount?.currency?.symbol\r\n  } for ${trade?.outputAmount?.toSignificant(6)} ${trade?.outputAmount?.currency?.symbol}`\r\n\r\n  const confirmationContent = useCallback(\r\n    () =>\r\n      swapErrorMessage ? (\r\n        <TransactionErrorContent onDismiss={onDismiss} message={swapErrorMessage} />\r\n      ) : (\r\n        <ConfirmationModalContent\r\n          title=\"Confirm Swap\"\r\n          onDismiss={onDismiss}\r\n          topContent={modalHeader}\r\n          bottomContent={modalBottom}\r\n        />\r\n      ),\r\n    [onDismiss, modalBottom, modalHeader, swapErrorMessage]\r\n  )\r\n\r\n  return (\r\n    <TransactionConfirmationModal\r\n      isOpen={isOpen}\r\n      onDismiss={onDismiss}\r\n      attemptingTxn={attemptingTxn}\r\n      hash={txHash}\r\n      content={confirmationContent}\r\n      pendingText={pendingText}\r\n    />\r\n  )\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\state\\mint\\hooks.ts",["851"],"import { Currency, CurrencyAmount, ETHER, JSBI, Pair, Percent, Price, TokenAmount } from '@appleswap/sdk'\r\nimport { useCallback, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { PairState, usePair } from '../../data/Reserves'\r\nimport { useTotalSupply } from '../../data/TotalSupply'\r\n\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { TranslateString } from '../../utils/translateTextHelpers'\r\nimport { wrappedCurrency, wrappedCurrencyAmount } from '../../utils/wrappedCurrency'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { tryParseAmount } from '../swap/hooks'\r\nimport { useCurrencyBalances } from '../wallet/hooks'\r\nimport { Field, typeInput } from './actions'\r\n\r\nconst ZERO = JSBI.BigInt(0)\r\n\r\nexport function useMintState(): AppState['mint'] {\r\n  return useSelector<AppState, AppState['mint']>((state) => state.mint)\r\n}\r\n\r\nexport function useDerivedMintInfo(\r\n  currencyA: Currency | undefined,\r\n  currencyB: Currency | undefined\r\n): {\r\n  dependentField: Field\r\n  currencies: { [field in Field]?: Currency }\r\n  pair?: Pair | null\r\n  pairState: PairState\r\n  currencyBalances: { [field in Field]?: CurrencyAmount }\r\n  parsedAmounts: { [field in Field]?: CurrencyAmount }\r\n  price?: Price\r\n  noLiquidity?: boolean\r\n  liquidityMinted?: TokenAmount\r\n  poolTokenPercentage?: Percent\r\n  error?: string\r\n} {\r\n  const { account, chainId } = useActiveWeb3React()\r\n\r\n  const { independentField, typedValue, otherTypedValue } = useMintState()\r\n\r\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\r\n\r\n  // tokens\r\n  const currencies: { [field in Field]?: Currency } = useMemo(\r\n    () => ({\r\n      [Field.CURRENCY_A]: currencyA ?? undefined,\r\n      [Field.CURRENCY_B]: currencyB ?? undefined,\r\n    }),\r\n    [currencyA, currencyB]\r\n  )\r\n\r\n  // pair\r\n  const [pairState, pair] = usePair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B])\r\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\r\n\r\n  const noLiquidity: boolean =\r\n    pairState === PairState.NOT_EXISTS || Boolean(totalSupply && JSBI.equal(totalSupply.raw, ZERO))\r\n\r\n  // balances\r\n  const balances = useCurrencyBalances(account ?? undefined, [\r\n    currencies[Field.CURRENCY_A],\r\n    currencies[Field.CURRENCY_B],\r\n  ])\r\n  const currencyBalances: { [field in Field]?: CurrencyAmount } = {\r\n    [Field.CURRENCY_A]: balances[0],\r\n    [Field.CURRENCY_B]: balances[1],\r\n  }\r\n\r\n  // amounts\r\n  const independentAmount: CurrencyAmount | undefined = tryParseAmount(typedValue, currencies[independentField])\r\n  const dependentAmount: CurrencyAmount | undefined = useMemo(() => {\r\n    if (noLiquidity) {\r\n      if (otherTypedValue && currencies[dependentField]) {\r\n        return tryParseAmount(otherTypedValue, currencies[dependentField])\r\n      }\r\n      return undefined\r\n    }\r\n    if (independentAmount) {\r\n      // we wrap the currencies just to get the price in terms of the other token\r\n      const wrappedIndependentAmount = wrappedCurrencyAmount(independentAmount, chainId)\r\n      const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\r\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\r\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\r\n        const dependentTokenAmount =\r\n          dependentField === Field.CURRENCY_B\r\n            ? pair.priceOf(tokenA).quote(wrappedIndependentAmount)\r\n            : pair.priceOf(tokenB).quote(wrappedIndependentAmount)\r\n        return dependentCurrency === ETHER ? CurrencyAmount.ether(dependentTokenAmount.raw) : dependentTokenAmount\r\n      }\r\n      return undefined\r\n    }\r\n    return undefined\r\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, chainId, currencyB, pair])\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const parsedAmounts: { [field in Field]: CurrencyAmount | undefined } = {\r\n    [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\r\n    [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount,\r\n  }\r\n\r\n  const price = useMemo(() => {\r\n    if (noLiquidity) {\r\n      const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\r\n      if (currencyAAmount && currencyBAmount) {\r\n        return new Price(currencyAAmount.currency, currencyBAmount.currency, currencyAAmount.raw, currencyBAmount.raw)\r\n      }\r\n      return undefined\r\n    }\r\n    const wrappedCurrencyA = wrappedCurrency(currencyA, chainId)\r\n    return pair && wrappedCurrencyA ? pair.priceOf(wrappedCurrencyA) : undefined\r\n  }, [chainId, currencyA, noLiquidity, pair, parsedAmounts])\r\n\r\n  // liquidity minted\r\n  const liquidityMinted = useMemo(() => {\r\n    const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\r\n    const [tokenAmountA, tokenAmountB] = [\r\n      wrappedCurrencyAmount(currencyAAmount, chainId),\r\n      wrappedCurrencyAmount(currencyBAmount, chainId),\r\n    ]\r\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\r\n      return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB)\r\n    }\r\n    return undefined\r\n  }, [parsedAmounts, chainId, pair, totalSupply])\r\n\r\n  const poolTokenPercentage = useMemo(() => {\r\n    if (liquidityMinted && totalSupply) {\r\n      return new Percent(liquidityMinted.raw, totalSupply.add(liquidityMinted).raw)\r\n    }\r\n    return undefined\r\n  }, [liquidityMinted, totalSupply])\r\n\r\n  let error: string | undefined\r\n  if (!account) {\r\n    error = 'Connect Wallet'\r\n  }\r\n\r\n  if (pairState === PairState.INVALID) {\r\n    error = error ?? TranslateString(136, 'Invalid pair')\r\n  }\r\n\r\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\r\n    error = error ?? TranslateString(84, 'Enter an amount')\r\n  }\r\n\r\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\r\n\r\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\r\n    error = `Insufficient ${currencies[Field.CURRENCY_A]?.symbol} balance`\r\n  }\r\n\r\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\r\n    error = `Insufficient ${currencies[Field.CURRENCY_B]?.symbol} balance`\r\n  }\r\n\r\n  return {\r\n    dependentField,\r\n    currencies,\r\n    pair,\r\n    pairState,\r\n    currencyBalances,\r\n    parsedAmounts,\r\n    price,\r\n    noLiquidity,\r\n    liquidityMinted,\r\n    poolTokenPercentage,\r\n    error,\r\n  }\r\n}\r\n\r\nexport function useMintActionHandlers(\r\n  noLiquidity: boolean | undefined\r\n): {\r\n  onFieldAInput: (typedValue: string) => void\r\n  onFieldBInput: (typedValue: string) => void\r\n} {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const onFieldAInput = useCallback(\r\n    (typedValue: string) => {\r\n      dispatch(typeInput({ field: Field.CURRENCY_A, typedValue, noLiquidity: noLiquidity === true }))\r\n    },\r\n    [dispatch, noLiquidity]\r\n  )\r\n  const onFieldBInput = useCallback(\r\n    (typedValue: string) => {\r\n      dispatch(typeInput({ field: Field.CURRENCY_B, typedValue, noLiquidity: noLiquidity === true }))\r\n    },\r\n    [dispatch, noLiquidity]\r\n  )\r\n\r\n  return {\r\n    onFieldAInput,\r\n    onFieldBInput,\r\n  }\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SearchModal\\styleds.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Logo\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\ProgressSteps\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SafeMoonWarningModal\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SyrupWarningModal\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\TokenWarningModal\\index.tsx",["852"],"import { Token } from '@appleswap/sdk'\r\nimport { transparentize } from 'polished'\r\nimport { Button, Text } from '@pancakeswap-libs/uikit'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { AlertTriangle } from 'react-feather'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useAllTokens } from '../../hooks/Tokens'\r\nimport { getBscScanLink, shortenAddress } from '../../utils'\r\nimport { ExternalLink } from '../Shared'\r\nimport CurrencyLogo from '../CurrencyLogo'\r\nimport Modal from '../Modal'\r\nimport { AutoRow, RowBetween } from '../Row'\r\nimport { AutoColumn } from '../Column'\r\n\r\nconst Wrapper = styled.div<{ error: boolean }>`\r\n  background: ${({ theme }) => transparentize(0.6, theme.colors.tertiary)};\r\n  padding: 0.75rem;\r\n  border-radius: 20px;\r\n`\r\n\r\nconst WarningContainer = styled.div`\r\n  max-width: 420px;\r\n  width: 100%;\r\n  padding: 1rem;\r\n  background: rgba(242, 150, 2, 0.05);\r\n  border: 1px solid #f3841e;\r\n  border-radius: 20px;\r\n  overflow: auto;\r\n`\r\n\r\nconst StyledWarningIcon = styled(AlertTriangle)`\r\n  stroke: ${({ theme }) => theme.colors.failure};\r\n`\r\n\r\ninterface TokenWarningCardProps {\r\n  token?: Token\r\n}\r\n\r\nfunction TokenWarningCard({ token }: TokenWarningCardProps) {\r\n  const { chainId } = useActiveWeb3React()\r\n  const TranslateString = useI18n()\r\n  const tokenSymbol = token?.symbol?.toLowerCase() ?? ''\r\n  const tokenName = token?.name?.toLowerCase() ?? ''\r\n\r\n  const allTokens = useAllTokens()\r\n\r\n  const duplicateNameOrSymbol = useMemo(() => {\r\n    if (!token || !chainId) return false\r\n\r\n    return Object.keys(allTokens).some((tokenAddress) => {\r\n      const userToken = allTokens[tokenAddress]\r\n      if (userToken.equals(token)) {\r\n        return false\r\n      }\r\n      return userToken.symbol?.toLowerCase() === tokenSymbol || userToken.name?.toLowerCase() === tokenName\r\n    })\r\n  }, [token, chainId, allTokens, tokenSymbol, tokenName])\r\n\r\n  if (!token) return null\r\n\r\n  return (\r\n    <Wrapper error={duplicateNameOrSymbol}>\r\n      <AutoRow gap=\"6px\">\r\n        <AutoColumn gap=\"24px\">\r\n          <CurrencyLogo currency={token} size=\"16px\" />\r\n          <div> </div>\r\n        </AutoColumn>\r\n        <AutoColumn gap=\"10px\" justify=\"flex-start\">\r\n          <Text>\r\n            {token && token.name && token.symbol && token.name !== token.symbol\r\n              ? `${token.name} (${token.symbol})`\r\n              : token.name || token.symbol}{' '}\r\n          </Text>\r\n          {chainId && (\r\n            <ExternalLink style={{ fontWeight: 400 }} href={getBscScanLink(chainId, token.address, 'token')}>\r\n              <Text title={token.address}>\r\n                {shortenAddress(token.address)} {TranslateString(116, '(View on BscScan)')}\r\n              </Text>\r\n            </ExternalLink>\r\n          )}\r\n        </AutoColumn>\r\n      </AutoRow>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default function TokenWarningModal({\r\n  isOpen,\r\n  tokens,\r\n  onConfirm,\r\n}: {\r\n  isOpen: boolean\r\n  tokens: Token[]\r\n  onConfirm: () => void\r\n}) {\r\n  const [understandChecked, setUnderstandChecked] = useState(false)\r\n  const toggleUnderstand = useCallback(() => setUnderstandChecked((uc) => !uc), [])\r\n  const TranslateString = useI18n()\r\n\r\n  const handleDismiss = useCallback(() => null, [])\r\n  return (\r\n    <Modal isOpen={isOpen} onDismiss={handleDismiss} maxHeight={90}>\r\n      <WarningContainer className=\"token-warning-container\">\r\n        <AutoColumn gap=\"lg\">\r\n          <AutoRow gap=\"6px\">\r\n            <StyledWarningIcon />\r\n            <Text color=\"failure\">{TranslateString(1128, 'Token imported')}</Text>\r\n          </AutoRow>\r\n          <Text>\r\n            {TranslateString(\r\n              1130,\r\n              'Anyone can create a BEP20 token on BSC with any name, including creating fake versions of existing tokens and tokens that claim to represent projects that do not have a token.'\r\n            )}\r\n          </Text>\r\n          <Text>\r\n            {TranslateString(\r\n              1132,\r\n              'This interface can load arbitrary tokens by token addresses. Please take extra caution and do your research when interacting with arbitrary BEP20 tokens.'\r\n            )}\r\n          </Text>\r\n          <Text>{TranslateString(1134, 'If you purchase an arbitrary token, you may be unable to sell it back.')}</Text>\r\n          {tokens.map((token) => {\r\n            return <TokenWarningCard key={token.address} token={token} />\r\n          })}\r\n          <RowBetween>\r\n            <div>\r\n              <label htmlFor=\"understand-checkbox\" style={{ cursor: 'pointer', userSelect: 'none' }}>\r\n                <input\r\n                  id=\"understand-checkbox\"\r\n                  type=\"checkbox\"\r\n                  className=\"understand-checkbox\"\r\n                  checked={understandChecked}\r\n                  onChange={toggleUnderstand}\r\n                />{' '}\r\n                <Text as=\"span\" ml=\"4px\">\r\n                  {TranslateString(148, 'I understand')}\r\n                </Text>\r\n              </label>\r\n            </div>\r\n            <Button\r\n              disabled={!understandChecked}\r\n              variant=\"danger\"\r\n              style={{ width: '140px' }}\r\n              className=\"token-dismiss-button\"\r\n              onClick={() => {\r\n                onConfirm()\r\n              }}\r\n            >\r\n              {TranslateString(150, 'Continue')}\r\n            </Button>\r\n          </RowBetween>\r\n        </AutoColumn>\r\n      </WarningContainer>\r\n    </Modal>\r\n  )\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useToggle.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\parseENSAddress.ts",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SearchModal\\sorting.ts",["853"],"import { Token, TokenAmount } from '@appleswap/sdk'\r\nimport { useMemo } from 'react'\r\nimport { useAllTokenBalances } from '../../state/wallet/hooks'\r\n\r\n// compare two token amounts with highest one coming first\r\nfunction balanceComparator(balanceA?: TokenAmount, balanceB?: TokenAmount) {\r\n  if (balanceA && balanceB) {\r\n    return balanceA.greaterThan(balanceB) ? -1 : balanceA.equalTo(balanceB) ? 0 : 1\r\n  }\r\n  if (balanceA && balanceA.greaterThan('0')) {\r\n    return -1\r\n  }\r\n  if (balanceB && balanceB.greaterThan('0')) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getTokenComparator(balances: {\r\n  [tokenAddress: string]: TokenAmount | undefined\r\n}): (tokenA: Token, tokenB: Token) => number {\r\n  return function sortTokens(tokenA: Token, tokenB: Token): number {\r\n    // -1 = a is first\r\n    // 1 = b is first\r\n\r\n    // sort by balances\r\n    const balanceA = balances[tokenA.address]\r\n    const balanceB = balances[tokenB.address]\r\n\r\n    const balanceComp = balanceComparator(balanceA, balanceB)\r\n    if (balanceComp !== 0) return balanceComp\r\n\r\n    if (tokenA.symbol && tokenB.symbol) {\r\n      // sort by symbol\r\n      return tokenA.symbol.toLowerCase() < tokenB.symbol.toLowerCase() ? -1 : 1\r\n    }\r\n    return tokenA.symbol ? -1 : tokenB.symbol ? -1 : 0\r\n  }\r\n}\r\n\r\nexport function useTokenComparator(inverted: boolean): (tokenA: Token, tokenB: Token) => number {\r\n  const balances = useAllTokenBalances()\r\n  const comparator = useMemo(() => getTokenComparator(balances ?? {}), [balances])\r\n  return useMemo(() => {\r\n    if (inverted) {\r\n      return (tokenA: Token, tokenB: Token) => comparator(tokenA, tokenB) * -1\r\n    }\r\n    return comparator\r\n  }, [inverted, comparator])\r\n}\r\n\r\nexport default useTokenComparator\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SearchModal\\filtering.ts",["854"],"import { Token } from '@appleswap/sdk'\r\nimport { isAddress } from '../../utils'\r\n\r\nexport function filterTokens(tokens: Token[], search: string): Token[] {\r\n  if (search.length === 0) return tokens\r\n\r\n  const searchingAddress = isAddress(search)\r\n\r\n  if (searchingAddress) {\r\n    return tokens.filter((token) => token.address === searchingAddress)\r\n  }\r\n\r\n  const lowerSearchParts = search\r\n    .toLowerCase()\r\n    .split(/\\s+/)\r\n    .filter((s) => s.length > 0)\r\n\r\n  if (lowerSearchParts.length === 0) {\r\n    return tokens\r\n  }\r\n\r\n  const matchesSearch = (s: string): boolean => {\r\n    const sParts = s\r\n      .toLowerCase()\r\n      .split(/\\s+/)\r\n      .filter((str) => str.length > 0)\r\n\r\n    return lowerSearchParts.every((p) => p.length === 0 || sParts.some((sp) => sp.startsWith(p) || sp.endsWith(p)))\r\n  }\r\n\r\n  return tokens.filter((token) => {\r\n    const { symbol, name } = token\r\n\r\n    return (symbol && matchesSearch(symbol)) || (name && matchesSearch(name))\r\n  })\r\n}\r\n\r\nexport default filterTokens\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\hooks\\useOnClickOutside.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SearchModal\\SortButton.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SearchModal\\CurrencyList.tsx",["855"],"import { Currency, CurrencyAmount, currencyEquals, ETHER, Token } from '@appleswap/sdk'\r\nimport React, { CSSProperties, MutableRefObject, useCallback, useMemo } from 'react'\r\nimport { FixedSizeList } from 'react-window'\r\nimport styled from 'styled-components'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useSelectedTokenList, WrappedTokenInfo } from '../../state/lists/hooks'\r\nimport { useAddUserToken, useRemoveUserAddedToken } from '../../state/user/hooks'\r\nimport { useCurrencyBalance } from '../../state/wallet/hooks'\r\nimport { LinkStyledButton } from '../Shared'\r\nimport { useIsUserAddedToken } from '../../hooks/Tokens'\r\nimport Column from '../Column'\r\nimport { RowFixed } from '../Row'\r\nimport CurrencyLogo from '../CurrencyLogo'\r\nimport { MouseoverTooltip } from '../Tooltip'\r\nimport { FadedSpan, MenuItem } from './styleds'\r\nimport Loader from '../Loader'\r\nimport { isTokenOnList } from '../../utils'\r\n\r\nfunction currencyKey(currency: Currency): string {\r\n  return currency instanceof Token ? currency.address : currency === ETHER ? 'ETHER' : ''\r\n}\r\n\r\nconst StyledBalanceText = styled(Text)`\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  max-width: 5rem;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\nconst Tag = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.tertiary};\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  padding: 0.25rem 0.3rem 0.25rem 0.3rem;\r\n  max-width: 6rem;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  justify-self: flex-end;\r\n  margin-right: 4px;\r\n`\r\n\r\nfunction Balance({ balance }: { balance: CurrencyAmount }) {\r\n  return <StyledBalanceText title={balance.toExact()}>{balance.toSignificant(4)}</StyledBalanceText>\r\n}\r\n\r\nconst TagContainer = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`\r\n\r\nfunction TokenTags({ currency }: { currency: Currency }) {\r\n  if (!(currency instanceof WrappedTokenInfo)) {\r\n    return <span />\r\n  }\r\n\r\n  const { tags } = currency\r\n  if (!tags || tags.length === 0) return <span />\r\n\r\n  const tag = tags[0]\r\n\r\n  return (\r\n    <TagContainer>\r\n      <MouseoverTooltip text={tag.description}>\r\n        <Tag key={tag.id}>{tag.name}</Tag>\r\n      </MouseoverTooltip>\r\n      {tags.length > 1 ? (\r\n        <MouseoverTooltip\r\n          text={tags\r\n            .slice(1)\r\n            .map(({ name, description }) => `${name}: ${description}`)\r\n            .join('; \\n')}\r\n        >\r\n          <Tag>...</Tag>\r\n        </MouseoverTooltip>\r\n      ) : null}\r\n    </TagContainer>\r\n  )\r\n}\r\n\r\nfunction CurrencyRow({\r\n  currency,\r\n  onSelect,\r\n  isSelected,\r\n  otherSelected,\r\n  style,\r\n}: {\r\n  currency: Currency\r\n  onSelect: () => void\r\n  isSelected: boolean\r\n  otherSelected: boolean\r\n  style: CSSProperties\r\n}) {\r\n  const { account, chainId } = useActiveWeb3React()\r\n  const key = currencyKey(currency)\r\n  const selectedTokenList = useSelectedTokenList()\r\n  const isOnSelectedList = isTokenOnList(selectedTokenList, currency)\r\n  const customAdded = useIsUserAddedToken(currency)\r\n  const balance = useCurrencyBalance(account ?? undefined, currency)\r\n\r\n  const removeToken = useRemoveUserAddedToken()\r\n  const addToken = useAddUserToken()\r\n\r\n  // only show add or remove buttons if not on selected list\r\n  return (\r\n    <MenuItem\r\n      style={style}\r\n      className={`token-item-${key}`}\r\n      onClick={() => (isSelected ? null : onSelect())}\r\n      disabled={isSelected}\r\n      selected={otherSelected}\r\n    >\r\n      <CurrencyLogo currency={currency} size=\"24px\" />\r\n      <Column>\r\n        <Text title={currency.name}>{currency.symbol}</Text>\r\n        <FadedSpan>\r\n          {!isOnSelectedList && customAdded && !(currency instanceof WrappedTokenInfo) ? (\r\n            <Text>\r\n              Added by user\r\n              <LinkStyledButton\r\n                onClick={(event) => {\r\n                  event.stopPropagation()\r\n                  if (chainId && currency instanceof Token) removeToken(chainId, currency.address)\r\n                }}\r\n              >\r\n                (Remove)\r\n              </LinkStyledButton>\r\n            </Text>\r\n          ) : null}\r\n          {!isOnSelectedList && !customAdded && !(currency instanceof WrappedTokenInfo) ? (\r\n            <Text>\r\n              Found by address\r\n              <LinkStyledButton\r\n                onClick={(event) => {\r\n                  event.stopPropagation()\r\n                  if (currency instanceof Token) addToken(currency)\r\n                }}\r\n              >\r\n                (Add)\r\n              </LinkStyledButton>\r\n            </Text>\r\n          ) : null}\r\n        </FadedSpan>\r\n      </Column>\r\n      <TokenTags currency={currency} />\r\n      <RowFixed style={{ justifySelf: 'flex-end' }}>\r\n        {balance ? <Balance balance={balance} /> : account ? <Loader /> : null}\r\n      </RowFixed>\r\n    </MenuItem>\r\n  )\r\n}\r\n\r\nexport default function CurrencyList({\r\n  height,\r\n  currencies,\r\n  selectedCurrency,\r\n  onCurrencySelect,\r\n  otherCurrency,\r\n  fixedListRef,\r\n  showETH,\r\n}: {\r\n  height: number\r\n  currencies: Currency[]\r\n  selectedCurrency?: Currency | null\r\n  onCurrencySelect: (currency: Currency) => void\r\n  otherCurrency?: Currency | null\r\n  fixedListRef?: MutableRefObject<FixedSizeList | undefined>\r\n  showETH: boolean\r\n}) {\r\n  const itemData = useMemo(() => (showETH ? [Currency.ETHER, ...currencies] : [...currencies]), [currencies, showETH])\r\n\r\n  const Row = useCallback(\r\n    ({ data, index, style }) => {\r\n      const currency: Currency = data[index]\r\n      const isSelected = Boolean(selectedCurrency && currencyEquals(selectedCurrency, currency))\r\n      const otherSelected = Boolean(otherCurrency && currencyEquals(otherCurrency, currency))\r\n      const handleSelect = () => onCurrencySelect(currency)\r\n      return (\r\n        <CurrencyRow\r\n          style={style}\r\n          currency={currency}\r\n          isSelected={isSelected}\r\n          onSelect={handleSelect}\r\n          otherSelected={otherSelected}\r\n        />\r\n      )\r\n    },\r\n    [onCurrencySelect, otherCurrency, selectedCurrency]\r\n  )\r\n\r\n  const itemKey = useCallback((index: number, data: any) => currencyKey(data[index]), [])\r\n\r\n  return (\r\n    <FixedSizeList\r\n      height={height}\r\n      ref={fixedListRef as any}\r\n      width=\"100%\"\r\n      itemData={itemData}\r\n      itemCount={itemData.length}\r\n      itemSize={56}\r\n      itemKey={itemKey}\r\n    >\r\n      {Row}\r\n    </FixedSizeList>\r\n  )\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Tooltip\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\SearchModal\\CommonBases.tsx",["856"],"import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { ChainId, Currency, currencyEquals, ETHER, Token } from '@appleswap/sdk'\r\nimport styled from 'styled-components'\r\n\r\nimport useI18n from 'hooks/useI18n'\r\nimport { SUGGESTED_BASES } from '../../constants'\r\nimport { AutoColumn } from '../Column'\r\nimport QuestionHelper from '../QuestionHelper'\r\nimport { AutoRow } from '../Row'\r\nimport CurrencyLogo from '../CurrencyLogo'\r\n\r\nconst BaseWrapper = styled.div<{ disable?: boolean }>`\r\n  border: 1px solid ${({ theme, disable }) => (disable ? 'transparent' : theme.colors.tertiary)};\r\n  border-radius: 10px;\r\n  display: flex;\r\n  padding: 6px;\r\n\r\n  align-items: center;\r\n  :hover {\r\n    cursor: ${({ disable }) => !disable && 'pointer'};\r\n    background-color: ${({ theme, disable }) => !disable && theme.colors.invertedContrast};\r\n  }\r\n\r\n  background-color: ${({ theme, disable }) => disable && theme.colors.tertiary};\r\n  opacity: ${({ disable }) => disable && '0.4'};\r\n`\r\n\r\nexport default function CommonBases({\r\n  chainId,\r\n  onSelect,\r\n  selectedCurrency,\r\n}: {\r\n  chainId?: ChainId\r\n  selectedCurrency?: Currency | null\r\n  onSelect: (currency: Currency) => void\r\n}) {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <AutoColumn gap=\"md\">\r\n      <AutoRow>\r\n        <Text fontSize=\"14px\">Common bases</Text>\r\n        <QuestionHelper text={TranslateString(1204, 'These tokens are commonly paired with other tokens.')} />\r\n      </AutoRow>\r\n      <AutoRow gap=\"4px\">\r\n        <BaseWrapper\r\n          onClick={() => {\r\n            if (!selectedCurrency || !currencyEquals(selectedCurrency, ETHER)) {\r\n              onSelect(ETHER)\r\n            }\r\n          }}\r\n          disable={selectedCurrency === ETHER}\r\n        >\r\n          <CurrencyLogo currency={ETHER} style={{ marginRight: 8 }} />\r\n          <Text>BNB</Text>\r\n        </BaseWrapper>\r\n        {(chainId ? SUGGESTED_BASES[chainId] : []).map((token: Token) => {\r\n          const selected = selectedCurrency instanceof Token && selectedCurrency.address === token.address\r\n          return (\r\n            <BaseWrapper onClick={() => !selected && onSelect(token)} disable={selected} key={token.address}>\r\n              <CurrencyLogo currency={token} style={{ marginRight: 8 }} />\r\n              <Text>{token.symbol}</Text>\r\n            </BaseWrapper>\r\n          )\r\n        })}\r\n      </AutoRow>\r\n    </AutoColumn>\r\n  )\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\PageHeader\\AudioSetting.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\PageHeader\\TransactionDeadlineSetting.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\PageHeader\\SlippageToleranceSetting.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\TransactionConfirmationModal\\helpers.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\NumericalInput\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\utils\\contenthashToUri.ts",["857","858","859"],"import CID from 'cids'\r\nimport { getCodec, rmPrefix } from 'multicodec'\r\nimport { decode, toB58String } from 'multihashes'\r\n\r\nexport function hexToUint8Array(hex: string): Uint8Array {\r\n  hex = hex.startsWith('0x') ? hex.substr(2) : hex\r\n  if (hex.length % 2 !== 0) throw new Error('hex must have length that is multiple of 2')\r\n  const arr = new Uint8Array(hex.length / 2)\r\n  for (let i = 0; i < arr.length; i++) {\r\n    arr[i] = parseInt(hex.substr(i * 2, 2), 16)\r\n  }\r\n  return arr\r\n}\r\n\r\nconst UTF_8_DECODER = new TextDecoder()\r\n\r\n/**\r\n * Returns the URI representation of the content hash for supported codecs\r\n * @param contenthash to decode\r\n */\r\nexport default function contenthashToUri(contenthash: string): string {\r\n  const buff = hexToUint8Array(contenthash)\r\n  const codec = getCodec(buff as Buffer) // the typing is wrong for @types/multicodec\r\n  switch (codec) {\r\n    case 'ipfs-ns': {\r\n      const data = rmPrefix(buff as Buffer)\r\n      const cid = new CID(data)\r\n      return `ipfs://${toB58String(cid.multihash)}`\r\n    }\r\n    case 'ipns-ns': {\r\n      const data = rmPrefix(buff as Buffer)\r\n      const cid = new CID(data)\r\n      const multihash = decode(cid.multihash)\r\n      if (multihash.name === 'identity') {\r\n        return `ipns://${UTF_8_DECODER.decode(multihash.digest).trim()}`\r\n      } \r\n        return `ipns://${toB58String(cid.multihash)}`\r\n      \r\n    }\r\n    default:\r\n      throw new Error(`Unrecognized codec: ${codec}`)\r\n  }\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\AddressInputPanel\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Pane\\index.tsx",[],["860","861","862","863","864"],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\AdvancedSwapDetails.tsx",["865"],"import React from 'react'\r\nimport { Trade, TradeType } from '@appleswap/sdk'\r\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Field } from '../../state/swap/actions'\r\nimport { useUserSlippageTolerance } from '../../state/user/hooks'\r\nimport { computeSlippageAdjustedAmounts, computeTradePriceBreakdown } from '../../utils/prices'\r\nimport { AutoColumn } from '../Column'\r\nimport QuestionHelper from '../QuestionHelper'\r\nimport { RowBetween, RowFixed } from '../Row'\r\nimport FormattedPriceImpact from './FormattedPriceImpact'\r\nimport { SectionBreak } from './styleds'\r\nimport SwapRoute from './SwapRoute'\r\n\r\nfunction TradeSummary({ trade, allowedSlippage }: { trade: Trade; allowedSlippage: number }) {\r\n  const { priceImpactWithoutFee, realizedLPFee } = computeTradePriceBreakdown(trade)\r\n  const isExactIn = trade.tradeType === TradeType.EXACT_INPUT\r\n  const slippageAdjustedAmounts = computeSlippageAdjustedAmounts(trade, allowedSlippage)\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody>\r\n        <RowBetween>\r\n          <RowFixed>\r\n            <Text fontSize=\"14px\">\r\n              {isExactIn ? TranslateString(1210, 'Minimum received') : TranslateString(220, 'Maximum sold')}\r\n            </Text>\r\n            <QuestionHelper\r\n              text={TranslateString(\r\n                202,\r\n                'Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.'\r\n              )}\r\n            />\r\n          </RowFixed>\r\n          <RowFixed>\r\n            <Text fontSize=\"14px\">\r\n              {isExactIn\r\n                ? `${slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4)} ${trade.outputAmount.currency.symbol}` ??\r\n                  '-'\r\n                : `${slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4)} ${trade.inputAmount.currency.symbol}` ??\r\n                  '-'}\r\n            </Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n        <RowBetween>\r\n          <RowFixed>\r\n            <Text fontSize='14px'>{TranslateString(226, 'Price Impact')}</Text>\r\n            <QuestionHelper\r\n              text={TranslateString(\r\n                224,\r\n                'The difference between the market price and estimated price due to trade size.'\r\n              )}\r\n            />\r\n          </RowFixed>\r\n          <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\r\n        </RowBetween>\r\n\r\n        <RowBetween>\r\n          <RowFixed>\r\n            <Text fontSize=\"14px\">{TranslateString(228, 'Liquidity Provider Fee')}</Text>\r\n            <QuestionHelper\r\n              text={TranslateString(\r\n                230,\r\n                'For each trade a 0.2% fee is paid. 0.17% goes to liquidity providers and 0.03% goes to the PancakeSwap treasury.'\r\n              )}\r\n            />\r\n          </RowFixed>\r\n          <Text fontSize=\"14px\">\r\n            {realizedLPFee ? `${realizedLPFee.toSignificant(4)} ${trade.inputAmount.currency.symbol}` : '-'}\r\n          </Text>\r\n        </RowBetween>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport interface AdvancedSwapDetailsProps {\r\n  trade?: Trade\r\n}\r\n\r\nexport function AdvancedSwapDetails({ trade }: AdvancedSwapDetailsProps) {\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n  const TranslateString = useI18n()\r\n  const showRoute = Boolean(trade && trade.route.path.length > 2)\r\n\r\n  return (\r\n    <AutoColumn gap=\"md\">\r\n      {trade && (\r\n        <>\r\n          <TradeSummary trade={trade} allowedSlippage={allowedSlippage} />\r\n          {showRoute && (\r\n            <>\r\n              <SectionBreak />\r\n              <AutoColumn style={{ padding: '0 24px' }}>\r\n                <RowFixed>\r\n                  <Text fontSize=\"14px\">Route</Text>\r\n                  <QuestionHelper\r\n                    text={TranslateString(\r\n                      999,\r\n                      'Routing through these tokens resulted in the best price for your trade.'\r\n                    )}\r\n                  />\r\n                </RowFixed>\r\n                <SwapRoute trade={trade} />\r\n              </AutoColumn>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </AutoColumn>\r\n  )\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\SwapModalFooter.tsx",["866"],"import { Trade, TradeType } from '@appleswap/sdk'\r\nimport React, { useMemo, useState } from 'react'\r\nimport { Text, Button } from '@pancakeswap-libs/uikit'\r\nimport { Repeat } from 'react-feather'\r\n\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Field } from '../../state/swap/actions'\r\nimport {\r\n  computeSlippageAdjustedAmounts,\r\n  computeTradePriceBreakdown,\r\n  formatExecutionPrice,\r\n  warningSeverity,\r\n} from '../../utils/prices'\r\nimport { AutoColumn } from '../Column'\r\nimport QuestionHelper from '../QuestionHelper'\r\nimport { AutoRow, RowBetween, RowFixed } from '../Row'\r\nimport FormattedPriceImpact from './FormattedPriceImpact'\r\nimport { StyledBalanceMaxMini, SwapCallbackError } from './styleds'\r\n\r\nexport default function SwapModalFooter({\r\n  trade,\r\n  onConfirm,\r\n  allowedSlippage,\r\n  swapErrorMessage,\r\n  disabledConfirm,\r\n}: {\r\n  trade: Trade\r\n  allowedSlippage: number\r\n  onConfirm: () => void\r\n  swapErrorMessage: string | undefined\r\n  disabledConfirm: boolean\r\n}) {\r\n  const [showInverted, setShowInverted] = useState<boolean>(false)\r\n  const slippageAdjustedAmounts = useMemo(() => computeSlippageAdjustedAmounts(trade, allowedSlippage), [\r\n    allowedSlippage,\r\n    trade,\r\n  ])\r\n  const { priceImpactWithoutFee, realizedLPFee } = useMemo(() => computeTradePriceBreakdown(trade), [trade])\r\n  const severity = warningSeverity(priceImpactWithoutFee)\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <>\r\n      <AutoColumn gap=\"0px\">\r\n        <RowBetween align=\"center\">\r\n          <Text fontSize=\"14px\">Price</Text>\r\n          <Text\r\n            fontSize=\"14px\"\r\n            style={{\r\n              justifyContent: 'center',\r\n              alignItems: 'center',\r\n              display: 'flex',\r\n              textAlign: 'right',\r\n              paddingLeft: '8px',\r\n              fontWeight: 500,\r\n            }}\r\n          >\r\n            {formatExecutionPrice(trade, showInverted)}\r\n            <StyledBalanceMaxMini onClick={() => setShowInverted(!showInverted)}>\r\n              <Repeat size={14} />\r\n            </StyledBalanceMaxMini>\r\n          </Text>\r\n        </RowBetween>\r\n\r\n        <RowBetween>\r\n          <RowFixed>\r\n            <Text fontSize=\"14px\">\r\n              {trade.tradeType === TradeType.EXACT_INPUT\r\n                ? TranslateString(1210, 'Minimum received')\r\n                : TranslateString(220, 'Maximum sold')}\r\n            </Text>\r\n            <QuestionHelper\r\n              text={TranslateString(\r\n                202,\r\n                'Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.'\r\n              )}\r\n            />\r\n          </RowFixed>\r\n          <RowFixed>\r\n            <Text fontSize=\"14px\">\r\n              {trade.tradeType === TradeType.EXACT_INPUT\r\n                ? slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4) ?? '-'\r\n                : slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4) ?? '-'}\r\n            </Text>\r\n            <Text fontSize=\"14px\" marginLeft=\"4px\">\r\n              {trade.tradeType === TradeType.EXACT_INPUT\r\n                ? trade.outputAmount.currency.symbol\r\n                : trade.inputAmount.currency.symbol}\r\n            </Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n        <RowBetween>\r\n          <RowFixed>\r\n            <Text fontSize=\"14px\">{TranslateString(226, 'Price Impact')}</Text>\r\n            <QuestionHelper\r\n              text={TranslateString(224, 'The difference between the market price and your price due to trade size.')}\r\n            />\r\n          </RowFixed>\r\n          <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\r\n        </RowBetween>\r\n        <RowBetween>\r\n          <RowFixed>\r\n            <Text fontSize=\"14px\">{TranslateString(228, 'Liquidity Provider Fee')}</Text>\r\n            <QuestionHelper\r\n              text={TranslateString(\r\n                999,\r\n                'For each trade a 0.2% fee is paid. 0.17% goes to liquidity providers and 0.03% goes to the PancakeSwap treasury.'\r\n              )}\r\n            />\r\n          </RowFixed>\r\n          <Text fontSize=\"14px\">\r\n            {realizedLPFee ? `${realizedLPFee?.toSignificant(6)} ${trade.inputAmount.currency.symbol}` : '-'}\r\n          </Text>\r\n        </RowBetween>\r\n      </AutoColumn>\r\n\r\n      <AutoRow>\r\n        <Button\r\n          onClick={onConfirm}\r\n          disabled={disabledConfirm}\r\n          variant={severity > 2 ? 'danger' : 'primary'}\r\n          mt=\"10px\"\r\n          id=\"confirm-swap-or-send\"\r\n          width=\"100%\"\r\n        >\r\n          {severity > 2 ? 'Swap Anyway' : 'Confirm Swap'}\r\n        </Button>\r\n\r\n        {swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\r\n      </AutoRow>\r\n    </>\r\n  )\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\SwapModalHeader.tsx",["867"],"import React, { useContext, useMemo } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\nimport { Trade, TradeType } from '@appleswap/sdk'\r\nimport { Button, Text } from '@pancakeswap-libs/uikit'\r\nimport { ArrowDown, AlertTriangle } from 'react-feather'\r\nimport { Field } from '../../state/swap/actions'\r\nimport { isAddress, shortenAddress } from '../../utils'\r\nimport { computeSlippageAdjustedAmounts, computeTradePriceBreakdown, warningSeverity } from '../../utils/prices'\r\nimport { AutoColumn } from '../Column'\r\nimport CurrencyLogo from '../CurrencyLogo'\r\nimport { RowBetween, RowFixed } from '../Row'\r\nimport { SwapShowAcceptChanges } from './styleds'\r\n\r\nconst PriceInfoText = styled(Text)`\r\n  font-style: italic;\r\n  line-height: 1.3;\r\n\r\n  span {\r\n    color: ${({ theme }) => theme.colors.primary};\r\n    font-weight: 600;\r\n  }\r\n`\r\n\r\nexport default function SwapModalHeader({\r\n  trade,\r\n  allowedSlippage,\r\n  recipient,\r\n  showAcceptChanges,\r\n  onAcceptChanges,\r\n}: {\r\n  trade: Trade\r\n  allowedSlippage: number\r\n  recipient: string | null\r\n  showAcceptChanges: boolean\r\n  onAcceptChanges: () => void\r\n}) {\r\n  const slippageAdjustedAmounts = useMemo(() => computeSlippageAdjustedAmounts(trade, allowedSlippage), [\r\n    trade,\r\n    allowedSlippage,\r\n  ])\r\n  const { priceImpactWithoutFee } = useMemo(() => computeTradePriceBreakdown(trade), [trade])\r\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\r\n\r\n  const theme = useContext(ThemeContext)\r\n\r\n  return (\r\n    <AutoColumn gap=\"md\" style={{ marginTop: '20px' }}>\r\n      <RowBetween align=\"flex-end\">\r\n        <RowFixed gap=\"0px\">\r\n          <CurrencyLogo currency={trade.inputAmount.currency} size=\"24px\" style={{ marginRight: '12px' }} />\r\n          <Text\r\n            fontSize=\"24px\"\r\n            color={showAcceptChanges && trade.tradeType === TradeType.EXACT_OUTPUT ? theme.colors.primary : 'text'}\r\n          >\r\n            {trade.inputAmount.toSignificant(6)}\r\n          </Text>\r\n        </RowFixed>\r\n        <RowFixed gap=\"0px\">\r\n          <Text fontSize=\"24px\" style={{ marginLeft: '10px', fontWeight: 500 }}>\r\n            {trade.inputAmount.currency.symbol}\r\n          </Text>\r\n        </RowFixed>\r\n      </RowBetween>\r\n      <RowFixed>\r\n        <ArrowDown size=\"16\" color={theme.colors.textSubtle} style={{ marginLeft: '4px', minWidth: '16px' }} />\r\n      </RowFixed>\r\n      <RowBetween align=\"flex-end\">\r\n        <RowFixed gap=\"0px\">\r\n          <CurrencyLogo currency={trade.outputAmount.currency} size=\"24px\" style={{ marginRight: '12px' }} />\r\n          <Text\r\n            fontSize=\"24px\"\r\n            style={{ marginLeft: '10px', fontWeight: 500 }}\r\n            color={\r\n              priceImpactSeverity > 2\r\n                ? theme.colors.failure\r\n                : showAcceptChanges && trade.tradeType === TradeType.EXACT_INPUT\r\n                ? theme.colors.primary\r\n                : 'text'\r\n            }\r\n          >\r\n            {trade.outputAmount.toSignificant(6)}\r\n          </Text>\r\n        </RowFixed>\r\n        <RowFixed gap=\"0px\">\r\n          <Text fontSize=\"24px\" style={{ marginLeft: '10px', fontWeight: 500 }}>\r\n            {trade.outputAmount.currency.symbol}\r\n          </Text>\r\n        </RowFixed>\r\n      </RowBetween>\r\n      {showAcceptChanges ? (\r\n        <SwapShowAcceptChanges justify=\"flex-start\" gap=\"0px\">\r\n          <RowBetween>\r\n            <RowFixed>\r\n              <AlertTriangle size={20} style={{ marginRight: '8px', minWidth: 24 }} />\r\n              <Text color=\"primary\"> Price Updated</Text>\r\n            </RowFixed>\r\n            <Button onClick={onAcceptChanges}>Accept</Button>\r\n          </RowBetween>\r\n        </SwapShowAcceptChanges>\r\n      ) : null}\r\n      <AutoColumn justify=\"flex-start\" gap=\"sm\" style={{ padding: '16px 0 0' }}>\r\n        {trade.tradeType === TradeType.EXACT_INPUT ? (\r\n          <PriceInfoText>\r\n            {`Output is estimated. You will receive at least `}\r\n            <span>\r\n              {slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(6)} {trade.outputAmount.currency.symbol}\r\n            </span>\r\n            {' or the transaction will revert.'}\r\n          </PriceInfoText>\r\n        ) : (\r\n          <PriceInfoText>\r\n            {`Input is estimated. You will sell at most `}\r\n            <span>\r\n              {slippageAdjustedAmounts[Field.INPUT]?.toSignificant(6)} {trade.inputAmount.currency.symbol}\r\n            </span>\r\n            {' or the transaction will revert.'}\r\n          </PriceInfoText>\r\n        )}\r\n      </AutoColumn>\r\n      {recipient !== null ? (\r\n        <AutoColumn justify=\"flex-start\" gap=\"sm\" style={{ padding: '16px 0 0' }}>\r\n          <Text>\r\n            Output will be sent to{' '}\r\n            <b title={recipient}>{isAddress(recipient) ? shortenAddress(recipient) : recipient}</b>\r\n          </Text>\r\n        </AutoColumn>\r\n      ) : null}\r\n    </AutoColumn>\r\n  )\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\ListLogo\\index.tsx",[],"C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\SwapRoute.tsx",["868"],"import { Trade } from '@appleswap/sdk'\r\nimport React, { Fragment, memo, useContext } from 'react'\r\nimport { ChevronRight } from 'react-feather'\r\nimport { Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { ThemeContext } from 'styled-components'\r\nimport CurrencyLogo from '../CurrencyLogo'\r\n\r\nexport default memo(function SwapRoute({ trade }: { trade: Trade }) {\r\n  const theme = useContext(ThemeContext)\r\n  return (\r\n    <Flex\r\n      px=\"1rem\"\r\n      py=\"0.5rem\"\r\n      my=\"0.5rem\"\r\n      style={{ border: `1px solid ${theme.colors.tertiary}`, borderRadius: '1rem' }}\r\n      flexWrap=\"wrap\"\r\n      justifyContent=\"space-evenly\"\r\n      alignItems=\"center\"\r\n    >\r\n      {trade.route.path.map((token, i, path) => {\r\n        const isLastItem: boolean = i === path.length - 1\r\n        return (\r\n          // eslint-disable-next-line react/no-array-index-key\r\n          <Fragment key={i}>\r\n            <Flex my=\"0.5rem\" alignItems=\"center\" style={{ flexShrink: 0 }}>\r\n              <CurrencyLogo currency={token} size=\"1.5rem\" />\r\n              <Text fontSize=\"14px\" color=\"text\" ml=\"0.5rem\">\r\n                {token.symbol}\r\n              </Text>\r\n            </Flex>\r\n            {isLastItem ? null : <ChevronRight color=\"textSubtle\" />}\r\n          </Fragment>\r\n        )\r\n      })}\r\n    </Flex>\r\n  )\r\n})\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\swap\\FormattedPriceImpact.tsx",["869"],"import { Percent } from '@appleswap/sdk'\r\nimport React from 'react'\r\nimport { ONE_BIPS } from '../../constants'\r\nimport { warningSeverity } from '../../utils/prices'\r\nimport { ErrorText } from './styleds'\r\n\r\n/**\r\n * Formatted version of price impact text with warning colors\r\n */\r\nexport default function FormattedPriceImpact({ priceImpact }: { priceImpact?: Percent }) {\r\n  return (\r\n    <ErrorText fontSize=\"14px\" severity={warningSeverity(priceImpact)}>\r\n      {priceImpact ? (priceImpact.lessThan(ONE_BIPS) ? '<0.01%' : `${priceImpact.toFixed(2)}%`) : '-'}\r\n    </ErrorText>\r\n  )\r\n}\r\n","C:\\Users\\msi\\Desktop\\appleswap-interface\\src\\components\\Popover\\index.tsx",["870"],"import { Placement } from '@popperjs/core'\r\nimport { transparentize } from 'polished'\r\nimport React, { useCallback, useState } from 'react'\r\nimport { usePopper } from 'react-popper'\r\nimport styled from 'styled-components'\r\nimport Portal from '@reach/portal'\r\nimport useInterval from '../../hooks/useInterval'\r\n\r\nconst PopoverContainer = styled.div<{ show: boolean }>`\r\n  z-index: 9999;\r\n\r\n  visibility: ${(props) => (props.show ? 'visible' : 'hidden')};\r\n  opacity: ${(props) => (props.show ? 1 : 0)};\r\n  transition: visibility 150ms linear, opacity 150ms linear;\r\n\r\n  background: ${({ theme }) => theme.colors.invertedContrast};\r\n  border: 1px solid ${({ theme }) => theme.colors.tertiary};\r\n  box-shadow: 0 4px 8px 0 ${transparentize(0.9, '#2F80ED')};\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  border-radius: 8px;\r\n`\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nconst Arrow = styled.div`\r\n  width: 8px;\r\n  height: 8px;\r\n  z-index: 9998;\r\n\r\n  ::before {\r\n    position: absolute;\r\n    width: 8px;\r\n    height: 8px;\r\n    z-index: 9998;\r\n\r\n    content: '';\r\n    border: 1px solid ${({ theme }) => theme.colors.tertiary};\r\n    transform: rotate(45deg);\r\n    background: ${({ theme }) => theme.colors.invertedContrast};\r\n  }\r\n\r\n  &.arrow-top {\r\n    bottom: -5px;\r\n    ::before {\r\n      border-top: none;\r\n      border-left: none;\r\n    }\r\n  }\r\n\r\n  &.arrow-bottom {\r\n    top: -5px;\r\n    ::before {\r\n      border-bottom: none;\r\n      border-right: none;\r\n    }\r\n  }\r\n\r\n  &.arrow-left {\r\n    right: -5px;\r\n\r\n    ::before {\r\n      border-bottom: none;\r\n      border-left: none;\r\n    }\r\n  }\r\n\r\n  &.arrow-right {\r\n    left: -5px;\r\n    ::before {\r\n      border-right: none;\r\n      border-top: none;\r\n    }\r\n  }\r\n`\r\n\r\nexport interface PopoverProps {\r\n  content: React.ReactNode\r\n  show: boolean\r\n  children: React.ReactNode\r\n  placement?: Placement\r\n}\r\n\r\nexport default function Popover({ content, show, children, placement = 'auto' }: PopoverProps) {\r\n  const [referenceElement, setReferenceElement] = useState<HTMLDivElement | null>(null)\r\n  const [popperElement, setPopperElement] = useState<HTMLDivElement | null>(null)\r\n  const [arrowElement, setArrowElement] = useState<HTMLDivElement | null>(null)\r\n  const { styles, update, attributes } = usePopper(referenceElement, popperElement, {\r\n    placement,\r\n    strategy: 'fixed',\r\n    modifiers: [\r\n      { name: 'offset', options: { offset: [8, 8] } },\r\n      { name: 'arrow', options: { element: arrowElement } },\r\n    ],\r\n  })\r\n  const updateCallback = useCallback(() => {\r\n    if (update) {\r\n      update()\r\n    }\r\n  }, [update])\r\n  useInterval(updateCallback, show ? 100 : null)\r\n\r\n  return (\r\n    <>\r\n      <ReferenceElement ref={setReferenceElement as any}>{children}</ReferenceElement>\r\n      <Portal>\r\n        <PopoverContainer show={show} ref={setPopperElement as any} style={styles.popper} {...attributes.popper}>\r\n          {content}\r\n          <Arrow\r\n            className={`arrow-${attributes.popper?.['data-popper-placement'] ?? ''}`}\r\n            ref={setArrowElement as any}\r\n            style={styles.arrow}\r\n            {...attributes.arrow}\r\n          />\r\n        </PopoverContainer>\r\n      </Portal>\r\n    </>\r\n  )\r\n}\r\n",{"ruleId":"871","replacedBy":"872"},{"ruleId":"873","replacedBy":"874"},{"ruleId":"875","replacedBy":"876"},{"ruleId":"877","replacedBy":"878"},{"ruleId":"879","replacedBy":"880"},{"ruleId":"881","severity":2,"message":"882","line":2,"column":25,"nodeType":"883","endLine":2,"endColumn":41},{"ruleId":"881","severity":2,"message":"882","line":2,"column":25,"nodeType":"883","endLine":2,"endColumn":41},{"ruleId":"881","severity":2,"message":"882","line":2,"column":25,"nodeType":"883","endLine":2,"endColumn":41},{"ruleId":"881","severity":2,"message":"884","line":3,"column":26,"nodeType":"883","endLine":3,"endColumn":44},{"ruleId":"881","severity":2,"message":"885","line":3,"column":17,"nodeType":"883","endLine":3,"endColumn":22},{"ruleId":"881","severity":2,"message":"882","line":4,"column":68,"nodeType":"883","endLine":4,"endColumn":84},{"ruleId":"881","severity":2,"message":"882","line":1,"column":52,"nodeType":"883","endLine":1,"endColumn":68},{"ruleId":"881","severity":2,"message":"882","line":6,"column":64,"nodeType":"883","endLine":6,"endColumn":80},{"ruleId":"881","severity":2,"message":"882","line":1,"column":52,"nodeType":"883","endLine":1,"endColumn":68},{"ruleId":"881","severity":2,"message":"882","line":3,"column":22,"nodeType":"883","endLine":3,"endColumn":38},{"ruleId":"881","severity":2,"message":"882","line":7,"column":80,"nodeType":"883","endLine":7,"endColumn":96},{"ruleId":"881","severity":2,"message":"882","line":2,"column":42,"nodeType":"883","endLine":2,"endColumn":58},{"ruleId":"881","severity":2,"message":"882","line":1,"column":38,"nodeType":"883","endLine":1,"endColumn":54},{"ruleId":"881","severity":2,"message":"882","line":3,"column":22,"nodeType":"883","endLine":3,"endColumn":38},{"ruleId":"881","severity":2,"message":"882","line":2,"column":56,"nodeType":"883","endLine":2,"endColumn":72},{"ruleId":"881","severity":2,"message":"882","line":1,"column":45,"nodeType":"883","endLine":1,"endColumn":61},{"ruleId":"881","severity":2,"message":"886","line":3,"column":42,"nodeType":"883","endLine":3,"endColumn":86},{"ruleId":"881","severity":2,"message":"882","line":1,"column":75,"nodeType":"883","endLine":1,"endColumn":91},{"ruleId":"881","severity":2,"message":"882","line":1,"column":84,"nodeType":"883","endLine":1,"endColumn":100},{"ruleId":"881","severity":2,"message":"882","line":2,"column":37,"nodeType":"883","endLine":2,"endColumn":53},{"ruleId":"881","severity":2,"message":"882","line":1,"column":76,"nodeType":"883","endLine":1,"endColumn":92},{"ruleId":"881","severity":2,"message":"882","line":3,"column":59,"nodeType":"883","endLine":3,"endColumn":75},{"ruleId":"881","severity":2,"message":"882","line":1,"column":40,"nodeType":"883","endLine":1,"endColumn":56},{"ruleId":"881","severity":2,"message":"882","line":2,"column":36,"nodeType":"883","endLine":2,"endColumn":52},{"ruleId":"881","severity":2,"message":"882","line":2,"column":82,"nodeType":"883","endLine":2,"endColumn":98},{"ruleId":"881","severity":2,"message":"882","line":1,"column":77,"nodeType":"883","endLine":1,"endColumn":93},{"ruleId":"881","severity":2,"message":"882","line":1,"column":36,"nodeType":"883","endLine":1,"endColumn":52},{"ruleId":"881","severity":2,"message":"882","line":1,"column":26,"nodeType":"883","endLine":1,"endColumn":42},{"ruleId":"881","severity":2,"message":"882","line":1,"column":26,"nodeType":"883","endLine":1,"endColumn":42},{"ruleId":"881","severity":2,"message":"882","line":1,"column":45,"nodeType":"883","endLine":1,"endColumn":61},{"ruleId":"881","severity":2,"message":"882","line":1,"column":55,"nodeType":"883","endLine":1,"endColumn":71},{"ruleId":"881","severity":2,"message":"882","line":1,"column":62,"nodeType":"883","endLine":1,"endColumn":78},{"ruleId":"881","severity":2,"message":"882","line":2,"column":32,"nodeType":"883","endLine":2,"endColumn":48},{"ruleId":"881","severity":2,"message":"882","line":3,"column":73,"nodeType":"883","endLine":3,"endColumn":89},{"ruleId":"881","severity":2,"message":"882","line":1,"column":40,"nodeType":"883","endLine":1,"endColumn":56},{"ruleId":"881","severity":2,"message":"882","line":1,"column":61,"nodeType":"883","endLine":1,"endColumn":77},{"ruleId":"881","severity":2,"message":"882","line":1,"column":25,"nodeType":"883","endLine":1,"endColumn":41},{"ruleId":"881","severity":2,"message":"882","line":2,"column":23,"nodeType":"883","endLine":2,"endColumn":39},{"ruleId":"881","severity":2,"message":"884","line":1,"column":26,"nodeType":"883","endLine":1,"endColumn":44},{"ruleId":"881","severity":2,"message":"884","line":1,"column":26,"nodeType":"883","endLine":1,"endColumn":44},{"ruleId":"881","severity":2,"message":"882","line":1,"column":25,"nodeType":"883","endLine":1,"endColumn":41},{"ruleId":"881","severity":2,"message":"884","line":1,"column":26,"nodeType":"883","endLine":1,"endColumn":44},{"ruleId":"881","severity":2,"message":"882","line":1,"column":39,"nodeType":"883","endLine":1,"endColumn":55},{"ruleId":"881","severity":2,"message":"882","line":1,"column":90,"nodeType":"883","endLine":1,"endColumn":106},{"ruleId":"881","severity":2,"message":"882","line":1,"column":23,"nodeType":"883","endLine":1,"endColumn":39},{"ruleId":"881","severity":2,"message":"882","line":1,"column":36,"nodeType":"883","endLine":1,"endColumn":52},{"ruleId":"881","severity":2,"message":"882","line":1,"column":23,"nodeType":"883","endLine":1,"endColumn":39},{"ruleId":"881","severity":2,"message":"882","line":1,"column":72,"nodeType":"883","endLine":1,"endColumn":88},{"ruleId":"881","severity":2,"message":"882","line":3,"column":65,"nodeType":"883","endLine":3,"endColumn":81},{"ruleId":"881","severity":2,"message":"887","line":1,"column":17,"nodeType":"883","endLine":1,"endColumn":23},{"ruleId":"881","severity":2,"message":"888","line":2,"column":36,"nodeType":"883","endLine":2,"endColumn":48},{"ruleId":"881","severity":2,"message":"889","line":3,"column":37,"nodeType":"883","endLine":3,"endColumn":50},{"ruleId":"871","replacedBy":"890"},{"ruleId":"873","replacedBy":"891"},{"ruleId":"875","replacedBy":"892"},{"ruleId":"877","replacedBy":"893"},{"ruleId":"879","replacedBy":"894"},{"ruleId":"881","severity":2,"message":"882","line":2,"column":34,"nodeType":"883","endLine":2,"endColumn":50},{"ruleId":"881","severity":2,"message":"882","line":1,"column":34,"nodeType":"883","endLine":1,"endColumn":50},{"ruleId":"881","severity":2,"message":"882","line":3,"column":34,"nodeType":"883","endLine":3,"endColumn":50},{"ruleId":"881","severity":2,"message":"882","line":1,"column":23,"nodeType":"883","endLine":1,"endColumn":39},{"ruleId":"881","severity":2,"message":"882","line":1,"column":25,"nodeType":"883","endLine":1,"endColumn":41},{"ruleId":"881","severity":2,"message":"895","line":6,"column":20,"nodeType":"883","endLine":6,"endColumn":35},"lines-around-directive",["896"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"import/no-unresolved","Unable to resolve path to module '@appleswap/sdk'.","Literal","Unable to resolve path to module 'ethers/lib/utils'.","Unable to resolve path to module 'ajv'.","Unable to resolve path to module '@uniswap/v2-core/build/IUniswapV2Pair.json'.","Unable to resolve path to module 'cids'.","Unable to resolve path to module 'multicodec'.","Unable to resolve path to module 'multihashes'.",["896"],[],[],[],[],"Unable to resolve path to module '@reach/portal'.","padding-line-between-statements"]